
CharementCertif_XTWReader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e54  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000644  08005048  08005048  00015048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800568c  0800568c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800568c  0800568c  0001568c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005694  08005694  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005694  08005694  00015694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005698  08005698  00015698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800569c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000184c  200001dc  08005878  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a28  08005878  00021a28  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000105cb  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000234f  00000000  00000000  000307dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ba0  00000000  00000000  00032b30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ac8  00000000  00000000  000336d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a0b5  00000000  00000000  00034198  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a0cf  00000000  00000000  0005e24d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010403a  00000000  00000000  0006831c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016c356  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038f4  00000000  00000000  0016c3d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	e000      	b.n	8000206 <__do_global_dtors_aux+0x12>
 8000204:	bf00      	nop
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	200001dc 	.word	0x200001dc
 8000210:	00000000 	.word	0x00000000
 8000214:	08005030 	.word	0x08005030

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	e000      	b.n	8000226 <frame_dummy+0xe>
 8000224:	bf00      	nop
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	200001e0 	.word	0x200001e0
 8000230:	08005030 	.word	0x08005030

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr

08000244 <__aeabi_uldivmod>:
 8000244:	b953      	cbnz	r3, 800025c <__aeabi_uldivmod+0x18>
 8000246:	b94a      	cbnz	r2, 800025c <__aeabi_uldivmod+0x18>
 8000248:	2900      	cmp	r1, #0
 800024a:	bf08      	it	eq
 800024c:	2800      	cmpeq	r0, #0
 800024e:	bf1c      	itt	ne
 8000250:	f04f 31ff 	movne.w	r1, #4294967295
 8000254:	f04f 30ff 	movne.w	r0, #4294967295
 8000258:	f000 b97c 	b.w	8000554 <__aeabi_idiv0>
 800025c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000260:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000264:	f000 f806 	bl	8000274 <__udivmoddi4>
 8000268:	f8dd e004 	ldr.w	lr, [sp, #4]
 800026c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000270:	b004      	add	sp, #16
 8000272:	4770      	bx	lr

08000274 <__udivmoddi4>:
 8000274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000278:	468c      	mov	ip, r1
 800027a:	9d08      	ldr	r5, [sp, #32]
 800027c:	4604      	mov	r4, r0
 800027e:	468a      	mov	sl, r1
 8000280:	2b00      	cmp	r3, #0
 8000282:	d14a      	bne.n	800031a <__udivmoddi4+0xa6>
 8000284:	428a      	cmp	r2, r1
 8000286:	4617      	mov	r7, r2
 8000288:	d962      	bls.n	8000350 <__udivmoddi4+0xdc>
 800028a:	fab2 f682 	clz	r6, r2
 800028e:	b14e      	cbz	r6, 80002a4 <__udivmoddi4+0x30>
 8000290:	f1c6 0e20 	rsb	lr, r6, #32
 8000294:	fa01 f306 	lsl.w	r3, r1, r6
 8000298:	40b7      	lsls	r7, r6
 800029a:	40b4      	lsls	r4, r6
 800029c:	fa20 fe0e 	lsr.w	lr, r0, lr
 80002a0:	ea4e 0a03 	orr.w	sl, lr, r3
 80002a4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002a8:	0c23      	lsrs	r3, r4, #16
 80002aa:	fa1f f987 	uxth.w	r9, r7
 80002ae:	fbba fef8 	udiv	lr, sl, r8
 80002b2:	fb08 aa1e 	mls	sl, r8, lr, sl
 80002b6:	fb0e f209 	mul.w	r2, lr, r9
 80002ba:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80002be:	429a      	cmp	r2, r3
 80002c0:	d90b      	bls.n	80002da <__udivmoddi4+0x66>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f10e 31ff 	add.w	r1, lr, #4294967295
 80002c8:	bf2c      	ite	cs
 80002ca:	2001      	movcs	r0, #1
 80002cc:	2000      	movcc	r0, #0
 80002ce:	429a      	cmp	r2, r3
 80002d0:	d902      	bls.n	80002d8 <__udivmoddi4+0x64>
 80002d2:	2800      	cmp	r0, #0
 80002d4:	f000 812a 	beq.w	800052c <__udivmoddi4+0x2b8>
 80002d8:	468e      	mov	lr, r1
 80002da:	1a9a      	subs	r2, r3, r2
 80002dc:	b2a3      	uxth	r3, r4
 80002de:	fbb2 f0f8 	udiv	r0, r2, r8
 80002e2:	fb08 2210 	mls	r2, r8, r0, r2
 80002e6:	fb00 f909 	mul.w	r9, r0, r9
 80002ea:	ea43 4402 	orr.w	r4, r3, r2, lsl #16
 80002ee:	45a1      	cmp	r9, r4
 80002f0:	d907      	bls.n	8000302 <__udivmoddi4+0x8e>
 80002f2:	193c      	adds	r4, r7, r4
 80002f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x8c>
 80002fa:	45a1      	cmp	r9, r4
 80002fc:	f200 8110 	bhi.w	8000520 <__udivmoddi4+0x2ac>
 8000300:	4618      	mov	r0, r3
 8000302:	eba4 0409 	sub.w	r4, r4, r9
 8000306:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800030a:	2100      	movs	r1, #0
 800030c:	b11d      	cbz	r5, 8000316 <__udivmoddi4+0xa2>
 800030e:	40f4      	lsrs	r4, r6
 8000310:	2300      	movs	r3, #0
 8000312:	e9c5 4300 	strd	r4, r3, [r5]
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0xbc>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80f2 	beq.w	8000508 <__udivmoddi4+0x294>
 8000324:	2100      	movs	r1, #0
 8000326:	e9c5 0c00 	strd	r0, ip, [r5]
 800032a:	4608      	mov	r0, r1
 800032c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000330:	fab3 f183 	clz	r1, r3
 8000334:	2900      	cmp	r1, #0
 8000336:	d14e      	bne.n	80003d6 <__udivmoddi4+0x162>
 8000338:	4563      	cmp	r3, ip
 800033a:	f0c0 80e8 	bcc.w	800050e <__udivmoddi4+0x29a>
 800033e:	4282      	cmp	r2, r0
 8000340:	f240 80e5 	bls.w	800050e <__udivmoddi4+0x29a>
 8000344:	4608      	mov	r0, r1
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e5      	beq.n	8000316 <__udivmoddi4+0xa2>
 800034a:	e9c5 4a00 	strd	r4, sl, [r5]
 800034e:	e7e2      	b.n	8000316 <__udivmoddi4+0xa2>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xe0>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f682 	clz	r6, r2
 8000358:	2e00      	cmp	r6, #0
 800035a:	f040 8099 	bne.w	8000490 <__udivmoddi4+0x21c>
 800035e:	1a8b      	subs	r3, r1, r2
 8000360:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000364:	fa1f f882 	uxth.w	r8, r2
 8000368:	2101      	movs	r1, #1
 800036a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800036e:	fbb3 f2fe 	udiv	r2, r3, lr
 8000372:	fb0e 3012 	mls	r0, lr, r2, r3
 8000376:	fb08 f902 	mul.w	r9, r8, r2
 800037a:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
 800037e:	45e1      	cmp	r9, ip
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x120>
 8000382:	eb17 0c0c 	adds.w	ip, r7, ip
 8000386:	f102 33ff 	add.w	r3, r2, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x11e>
 800038c:	45e1      	cmp	r9, ip
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2b2>
 8000392:	461a      	mov	r2, r3
 8000394:	ebac 0c09 	sub.w	ip, ip, r9
 8000398:	b2a3      	uxth	r3, r4
 800039a:	fbbc f0fe 	udiv	r0, ip, lr
 800039e:	fb0e cc10 	mls	ip, lr, r0, ip
 80003a2:	fb08 f800 	mul.w	r8, r8, r0
 80003a6:	ea43 440c 	orr.w	r4, r3, ip, lsl #16
 80003aa:	45a0      	cmp	r8, r4
 80003ac:	d90e      	bls.n	80003cc <__udivmoddi4+0x158>
 80003ae:	193c      	adds	r4, r7, r4
 80003b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b4:	bf2c      	ite	cs
 80003b6:	f04f 0c01 	movcs.w	ip, #1
 80003ba:	f04f 0c00 	movcc.w	ip, #0
 80003be:	45a0      	cmp	r8, r4
 80003c0:	d903      	bls.n	80003ca <__udivmoddi4+0x156>
 80003c2:	f1bc 0f00 	cmp.w	ip, #0
 80003c6:	f000 80a8 	beq.w	800051a <__udivmoddi4+0x2a6>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003d4:	e79a      	b.n	800030c <__udivmoddi4+0x98>
 80003d6:	f1c1 0420 	rsb	r4, r1, #32
 80003da:	408b      	lsls	r3, r1
 80003dc:	fa02 fe01 	lsl.w	lr, r2, r1
 80003e0:	fa0c f601 	lsl.w	r6, ip, r1
 80003e4:	40e2      	lsrs	r2, r4
 80003e6:	fa20 f704 	lsr.w	r7, r0, r4
 80003ea:	fa2c fc04 	lsr.w	ip, ip, r4
 80003ee:	fa00 f801 	lsl.w	r8, r0, r1
 80003f2:	4313      	orrs	r3, r2
 80003f4:	433e      	orrs	r6, r7
 80003f6:	0c1f      	lsrs	r7, r3, #16
 80003f8:	0c32      	lsrs	r2, r6, #16
 80003fa:	fa1f f983 	uxth.w	r9, r3
 80003fe:	fbbc f0f7 	udiv	r0, ip, r7
 8000402:	fb07 cc10 	mls	ip, r7, r0, ip
 8000406:	fb00 fa09 	mul.w	sl, r0, r9
 800040a:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
 800040e:	45e2      	cmp	sl, ip
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x1b0>
 8000412:	eb13 0c0c 	adds.w	ip, r3, ip
 8000416:	f100 32ff 	add.w	r2, r0, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x1ae>
 800041c:	45e2      	cmp	sl, ip
 800041e:	f200 8089 	bhi.w	8000534 <__udivmoddi4+0x2c0>
 8000422:	4610      	mov	r0, r2
 8000424:	ebac 0c0a 	sub.w	ip, ip, sl
 8000428:	b2b6      	uxth	r6, r6
 800042a:	fbbc faf7 	udiv	sl, ip, r7
 800042e:	fb07 cc1a 	mls	ip, r7, sl, ip
 8000432:	fb0a f909 	mul.w	r9, sl, r9
 8000436:	ea46 420c 	orr.w	r2, r6, ip, lsl #16
 800043a:	4591      	cmp	r9, r2
 800043c:	d906      	bls.n	800044c <__udivmoddi4+0x1d8>
 800043e:	189a      	adds	r2, r3, r2
 8000440:	f10a 36ff 	add.w	r6, sl, #4294967295
 8000444:	d201      	bcs.n	800044a <__udivmoddi4+0x1d6>
 8000446:	4591      	cmp	r9, r2
 8000448:	d87a      	bhi.n	8000540 <__udivmoddi4+0x2cc>
 800044a:	46b2      	mov	sl, r6
 800044c:	ea4a 4000 	orr.w	r0, sl, r0, lsl #16
 8000450:	eba2 0209 	sub.w	r2, r2, r9
 8000454:	fba0 670e 	umull	r6, r7, r0, lr
 8000458:	42ba      	cmp	r2, r7
 800045a:	46b4      	mov	ip, r6
 800045c:	46b9      	mov	r9, r7
 800045e:	d302      	bcc.n	8000466 <__udivmoddi4+0x1f2>
 8000460:	d107      	bne.n	8000472 <__udivmoddi4+0x1fe>
 8000462:	45b0      	cmp	r8, r6
 8000464:	d205      	bcs.n	8000472 <__udivmoddi4+0x1fe>
 8000466:	ebb6 0c0e 	subs.w	ip, r6, lr
 800046a:	eb67 0303 	sbc.w	r3, r7, r3
 800046e:	3801      	subs	r0, #1
 8000470:	4699      	mov	r9, r3
 8000472:	2d00      	cmp	r5, #0
 8000474:	d06b      	beq.n	800054e <__udivmoddi4+0x2da>
 8000476:	ebb8 030c 	subs.w	r3, r8, ip
 800047a:	eb62 0209 	sbc.w	r2, r2, r9
 800047e:	fa02 f404 	lsl.w	r4, r2, r4
 8000482:	40cb      	lsrs	r3, r1
 8000484:	40ca      	lsrs	r2, r1
 8000486:	2100      	movs	r1, #0
 8000488:	431c      	orrs	r4, r3
 800048a:	e9c5 4200 	strd	r4, r2, [r5]
 800048e:	e742      	b.n	8000316 <__udivmoddi4+0xa2>
 8000490:	40b7      	lsls	r7, r6
 8000492:	f1c6 0220 	rsb	r2, r6, #32
 8000496:	fa01 f306 	lsl.w	r3, r1, r6
 800049a:	40b4      	lsls	r4, r6
 800049c:	fa21 fc02 	lsr.w	ip, r1, r2
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	fa20 f202 	lsr.w	r2, r0, r2
 80004a8:	fa1f f887 	uxth.w	r8, r7
 80004ac:	fbbc f1fe 	udiv	r1, ip, lr
 80004b0:	431a      	orrs	r2, r3
 80004b2:	fb0e cc11 	mls	ip, lr, r1, ip
 80004b6:	fb01 f008 	mul.w	r0, r1, r8
 80004ba:	0c13      	lsrs	r3, r2, #16
 80004bc:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
 80004c0:	4560      	cmp	r0, ip
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x260>
 80004c4:	eb17 0c0c 	adds.w	ip, r7, ip
 80004c8:	f101 33ff 	add.w	r3, r1, #4294967295
 80004cc:	d201      	bcs.n	80004d2 <__udivmoddi4+0x25e>
 80004ce:	4560      	cmp	r0, ip
 80004d0:	d833      	bhi.n	800053a <__udivmoddi4+0x2c6>
 80004d2:	4619      	mov	r1, r3
 80004d4:	ebac 0c00 	sub.w	ip, ip, r0
 80004d8:	b292      	uxth	r2, r2
 80004da:	fbbc f0fe 	udiv	r0, ip, lr
 80004de:	fb0e cc10 	mls	ip, lr, r0, ip
 80004e2:	fb00 f308 	mul.w	r3, r0, r8
 80004e6:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
 80004ea:	4563      	cmp	r3, ip
 80004ec:	d907      	bls.n	80004fe <__udivmoddi4+0x28a>
 80004ee:	eb17 0c0c 	adds.w	ip, r7, ip
 80004f2:	f100 32ff 	add.w	r2, r0, #4294967295
 80004f6:	d201      	bcs.n	80004fc <__udivmoddi4+0x288>
 80004f8:	4563      	cmp	r3, ip
 80004fa:	d825      	bhi.n	8000548 <__udivmoddi4+0x2d4>
 80004fc:	4610      	mov	r0, r2
 80004fe:	ebac 0303 	sub.w	r3, ip, r3
 8000502:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000506:	e730      	b.n	800036a <__udivmoddi4+0xf6>
 8000508:	4629      	mov	r1, r5
 800050a:	4628      	mov	r0, r5
 800050c:	e703      	b.n	8000316 <__udivmoddi4+0xa2>
 800050e:	1a84      	subs	r4, r0, r2
 8000510:	eb6c 0303 	sbc.w	r3, ip, r3
 8000514:	2001      	movs	r0, #1
 8000516:	469a      	mov	sl, r3
 8000518:	e715      	b.n	8000346 <__udivmoddi4+0xd2>
 800051a:	3802      	subs	r0, #2
 800051c:	443c      	add	r4, r7
 800051e:	e755      	b.n	80003cc <__udivmoddi4+0x158>
 8000520:	3802      	subs	r0, #2
 8000522:	443c      	add	r4, r7
 8000524:	e6ed      	b.n	8000302 <__udivmoddi4+0x8e>
 8000526:	3a02      	subs	r2, #2
 8000528:	44bc      	add	ip, r7
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x120>
 800052c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000530:	443b      	add	r3, r7
 8000532:	e6d2      	b.n	80002da <__udivmoddi4+0x66>
 8000534:	3802      	subs	r0, #2
 8000536:	449c      	add	ip, r3
 8000538:	e774      	b.n	8000424 <__udivmoddi4+0x1b0>
 800053a:	3902      	subs	r1, #2
 800053c:	44bc      	add	ip, r7
 800053e:	e7c9      	b.n	80004d4 <__udivmoddi4+0x260>
 8000540:	f1aa 0a02 	sub.w	sl, sl, #2
 8000544:	441a      	add	r2, r3
 8000546:	e781      	b.n	800044c <__udivmoddi4+0x1d8>
 8000548:	3802      	subs	r0, #2
 800054a:	44bc      	add	ip, r7
 800054c:	e7d7      	b.n	80004fe <__udivmoddi4+0x28a>
 800054e:	4629      	mov	r1, r5
 8000550:	e6e1      	b.n	8000316 <__udivmoddi4+0xa2>
 8000552:	bf00      	nop

08000554 <__aeabi_idiv0>:
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop

08000558 <crc_update>:
    0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0
};


crc_t crc_update(crc_t crc, const void *data, size_t data_len)
{
 8000558:	b480      	push	{r7}
 800055a:	b087      	sub	sp, #28
 800055c:	af00      	add	r7, sp, #0
 800055e:	60f8      	str	r0, [r7, #12]
 8000560:	60b9      	str	r1, [r7, #8]
 8000562:	607a      	str	r2, [r7, #4]
    const unsigned char *d = (const unsigned char *)data;
 8000564:	68bb      	ldr	r3, [r7, #8]
 8000566:	617b      	str	r3, [r7, #20]
    unsigned int tbl_idx;

    while (data_len--) {
 8000568:	e012      	b.n	8000590 <crc_update+0x38>
        tbl_idx = ((crc >> 8) ^ *d) & 0xff;
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	0a1b      	lsrs	r3, r3, #8
 800056e:	697a      	ldr	r2, [r7, #20]
 8000570:	7812      	ldrb	r2, [r2, #0]
 8000572:	4053      	eors	r3, r2
 8000574:	b2db      	uxtb	r3, r3
 8000576:	613b      	str	r3, [r7, #16]
        crc = (crc_table[tbl_idx] ^ (crc << 8)) & 0xffff;
 8000578:	4a0c      	ldr	r2, [pc, #48]	; (80005ac <crc_update+0x54>)
 800057a:	693b      	ldr	r3, [r7, #16]
 800057c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	021b      	lsls	r3, r3, #8
 8000584:	4053      	eors	r3, r2
 8000586:	b29b      	uxth	r3, r3
 8000588:	60fb      	str	r3, [r7, #12]
        d++;
 800058a:	697b      	ldr	r3, [r7, #20]
 800058c:	3301      	adds	r3, #1
 800058e:	617b      	str	r3, [r7, #20]
    while (data_len--) {
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	1e5a      	subs	r2, r3, #1
 8000594:	607a      	str	r2, [r7, #4]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d1e7      	bne.n	800056a <crc_update+0x12>
    }
    return crc & 0xffff;
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	b29b      	uxth	r3, r3
}
 800059e:	4618      	mov	r0, r3
 80005a0:	371c      	adds	r7, #28
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	0800508c 	.word	0x0800508c

080005b0 <crc_init>:
 * Calculate the initial crc value.
 *
 * \return     The initial crc value.
 */
static inline crc_t crc_init(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
    return 0xffff;
 80005b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr

080005c2 <crc_finalize>:
 *
 * \param[in] crc  The current crc value.
 * \return     The final crc value.
 */
static inline crc_t crc_finalize(crc_t crc)
{
 80005c2:	b480      	push	{r7}
 80005c4:	b083      	sub	sp, #12
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	6078      	str	r0, [r7, #4]
    return crc;
 80005ca:	687b      	ldr	r3, [r7, #4]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08a      	sub	sp, #40	; 0x28
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f000 fd9e 	bl	800111e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e2:	f000 f895 	bl	8000710 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e6:	f000 f925 	bl	8000834 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005ea:	f000 f8d7 	bl	800079c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  Ringbuf_init();
 80005ee:	f000 fc27 	bl	8000e40 <Ringbuf_init>
  uint8_t ret, timeout;
  unsigned char* ptsize;
  unsigned char* ptcrcUart;
  char* certificat = NULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	61fb      	str	r3, [r7, #28]
  int readTrig = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	623b      	str	r3, [r7, #32]


  unsigned int sizeCertif = 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61bb      	str	r3, [r7, #24]
  unsigned int crcUart = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	617b      	str	r3, [r7, #20]
  int index=0;
 8000602:	2300      	movs	r3, #0
 8000604:	613b      	str	r3, [r7, #16]

    /* USER CODE END WHILE */

	    /* USER CODE BEGIN 3 */
		  while(1) {
		      ret = IsDataAvailable();
 8000606:	f000 fcd5 	bl	8000fb4 <IsDataAvailable>
 800060a:	4603      	mov	r3, r0
 800060c:	73fb      	strb	r3, [r7, #15]
		      if(ret)
 800060e:	7bfb      	ldrb	r3, [r7, #15]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d006      	beq.n	8000622 <main+0x4a>
		      {
		        Uart_read();
 8000614:	f000 fc98 	bl	8000f48 <Uart_read>
		        HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000618:	2101      	movs	r1, #1
 800061a:	483a      	ldr	r0, [pc, #232]	; (8000704 <main+0x12c>)
 800061c:	f001 f8c0 	bl	80017a0 <HAL_GPIO_TogglePin>
 8000620:	e00c      	b.n	800063c <main+0x64>
		      } else {
		          HAL_Delay(1); //1ms
 8000622:	2001      	movs	r0, #1
 8000624:	f000 fdf2 	bl	800120c <HAL_Delay>
	              timeout++;
 8000628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800062c:	3301      	adds	r3, #1
 800062e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		            if(readTrig) //Data already receive
 8000632:	6a3b      	ldr	r3, [r7, #32]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <main+0x64>
		             readTrig = 2;
 8000638:	2302      	movs	r3, #2
 800063a:	623b      	str	r3, [r7, #32]
		          	  }
		               //MODIF BCH: 150ms ok confortable
		               if(timeout == 150 || readTrig == 2) break; // timeout to break
 800063c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000640:	2b96      	cmp	r3, #150	; 0x96
 8000642:	d003      	beq.n	800064c <main+0x74>
 8000644:	6a3b      	ldr	r3, [r7, #32]
 8000646:	2b02      	cmp	r3, #2
 8000648:	d000      	beq.n	800064c <main+0x74>
		      ret = IsDataAvailable();
 800064a:	e7dc      	b.n	8000606 <main+0x2e>
		        }


	   buffer = get_rx_buffer();
 800064c:	f000 fc20 	bl	8000e90 <get_rx_buffer>
 8000650:	4602      	mov	r2, r0
 8000652:	4b2d      	ldr	r3, [pc, #180]	; (8000708 <main+0x130>)
 8000654:	601a      	str	r2, [r3, #0]
	   if(Look_for("56474B3321", buffer) == 1)
 8000656:	4b2c      	ldr	r3, [pc, #176]	; (8000708 <main+0x130>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4619      	mov	r1, r3
 800065c:	482b      	ldr	r0, [pc, #172]	; (800070c <main+0x134>)
 800065e:	f000 fc21 	bl	8000ea4 <Look_for>
 8000662:	4603      	mov	r3, r0
 8000664:	2b01      	cmp	r3, #1
 8000666:	d1ce      	bne.n	8000606 <main+0x2e>
	   {
		  buffer += 10;  //taille du delimiteur
 8000668:	4b27      	ldr	r3, [pc, #156]	; (8000708 <main+0x130>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	330a      	adds	r3, #10
 800066e:	4a26      	ldr	r2, [pc, #152]	; (8000708 <main+0x130>)
 8000670:	6013      	str	r3, [r2, #0]

		  ptsize = str_sub(buffer,index,3);
 8000672:	4b25      	ldr	r3, [pc, #148]	; (8000708 <main+0x130>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	6939      	ldr	r1, [r7, #16]
 8000678:	2203      	movs	r2, #3
 800067a:	4618      	mov	r0, r3
 800067c:	f000 f918 	bl	80008b0 <str_sub>
 8000680:	60b8      	str	r0, [r7, #8]
		  sizeCertif = hex2dec(ptsize);		//taille du certificat
 8000682:	68b8      	ldr	r0, [r7, #8]
 8000684:	f000 f960 	bl	8000948 <hex2dec>
 8000688:	4603      	mov	r3, r0
 800068a:	61bb      	str	r3, [r7, #24]
		  buffer +=4;
 800068c:	4b1e      	ldr	r3, [pc, #120]	; (8000708 <main+0x130>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	3304      	adds	r3, #4
 8000692:	4a1d      	ldr	r2, [pc, #116]	; (8000708 <main+0x130>)
 8000694:	6013      	str	r3, [r2, #0]

		  ptcrcUart = str_sub(buffer,index,3);
 8000696:	4b1c      	ldr	r3, [pc, #112]	; (8000708 <main+0x130>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	6939      	ldr	r1, [r7, #16]
 800069c:	2203      	movs	r2, #3
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 f906 	bl	80008b0 <str_sub>
 80006a4:	6078      	str	r0, [r7, #4]
		  crcUart = hex2dec(ptcrcUart);		//crc recupere par Uart
 80006a6:	6878      	ldr	r0, [r7, #4]
 80006a8:	f000 f94e 	bl	8000948 <hex2dec>
 80006ac:	4603      	mov	r3, r0
 80006ae:	617b      	str	r3, [r7, #20]
		  buffer += 4;
 80006b0:	4b15      	ldr	r3, [pc, #84]	; (8000708 <main+0x130>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	3304      	adds	r3, #4
 80006b6:	4a14      	ldr	r2, [pc, #80]	; (8000708 <main+0x130>)
 80006b8:	6013      	str	r3, [r2, #0]

		  crc_t crc_calculated = crc_init();
 80006ba:	f7ff ff79 	bl	80005b0 <crc_init>
 80006be:	6038      	str	r0, [r7, #0]
		  crc_calculated = crc_update(crc_calculated, buffer, sizeCertif);
 80006c0:	4b11      	ldr	r3, [pc, #68]	; (8000708 <main+0x130>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	69ba      	ldr	r2, [r7, #24]
 80006c6:	4619      	mov	r1, r3
 80006c8:	6838      	ldr	r0, [r7, #0]
 80006ca:	f7ff ff45 	bl	8000558 <crc_update>
 80006ce:	6038      	str	r0, [r7, #0]
		  crc_calculated = crc_finalize(crc_calculated);		//crc calculé
 80006d0:	6838      	ldr	r0, [r7, #0]
 80006d2:	f7ff ff76 	bl	80005c2 <crc_finalize>
 80006d6:	6038      	str	r0, [r7, #0]

		  if(crcUart == crc_calculated)
 80006d8:	697a      	ldr	r2, [r7, #20]
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	429a      	cmp	r2, r3
 80006de:	d192      	bne.n	8000606 <main+0x2e>
		  {
			certificat = malloc(sizeCertif * sizeof(char));
 80006e0:	69b8      	ldr	r0, [r7, #24]
 80006e2:	f003 fb67 	bl	8003db4 <malloc>
 80006e6:	4603      	mov	r3, r0
 80006e8:	61fb      	str	r3, [r7, #28]
			if (certificat == NULL)
 80006ea:	69fb      	ldr	r3, [r7, #28]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d102      	bne.n	80006f6 <main+0x11e>
			 {
			     exit(0);
 80006f0:	2000      	movs	r0, #0
 80006f2:	f003 facb 	bl	8003c8c <exit>
			 }

		     strcpy(certificat, buffer);
 80006f6:	4b04      	ldr	r3, [pc, #16]	; (8000708 <main+0x130>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4619      	mov	r1, r3
 80006fc:	69f8      	ldr	r0, [r7, #28]
 80006fe:	f003 fc90 	bl	8004022 <strcpy>
  while (1)
 8000702:	e780      	b.n	8000606 <main+0x2e>
 8000704:	42020400 	.word	0x42020400
 8000708:	20001a14 	.word	0x20001a14
 800070c:	08005048 	.word	0x08005048

08000710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b098      	sub	sp, #96	; 0x60
 8000714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000716:	f107 0318 	add.w	r3, r7, #24
 800071a:	2248      	movs	r2, #72	; 0x48
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f003 fb50 	bl	8003dc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 8000732:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000736:	f001 f85b 	bl	80017f0 <HAL_PWREx_ControlVoltageScaling>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000740:	f000 f914 	bl	800096c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000744:	2302      	movs	r3, #2
 8000746:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000748:	f44f 7380 	mov.w	r3, #256	; 0x100
 800074c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800074e:	2340      	movs	r3, #64	; 0x40
 8000750:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000752:	2300      	movs	r3, #0
 8000754:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000756:	f107 0318 	add.w	r3, r7, #24
 800075a:	4618      	mov	r0, r3
 800075c:	f001 f8d8 	bl	8001910 <HAL_RCC_OscConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000766:	f000 f901 	bl	800096c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076a:	230f      	movs	r3, #15
 800076c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800076e:	2301      	movs	r3, #1
 8000770:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000772:	2300      	movs	r3, #0
 8000774:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	2101      	movs	r1, #1
 8000782:	4618      	mov	r0, r3
 8000784:	f001 fd26 	bl	80021d4 <HAL_RCC_ClockConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800078e:	f000 f8ed 	bl	800096c <Error_Handler>
  }
}
 8000792:	bf00      	nop
 8000794:	3760      	adds	r7, #96	; 0x60
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
	...

0800079c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007a0:	4b22      	ldr	r3, [pc, #136]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007a2:	4a23      	ldr	r2, [pc, #140]	; (8000830 <MX_USART3_UART_Init+0x94>)
 80007a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007a6:	4b21      	ldr	r3, [pc, #132]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007ae:	4b1f      	ldr	r3, [pc, #124]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007b4:	4b1d      	ldr	r3, [pc, #116]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ba:	4b1c      	ldr	r3, [pc, #112]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007c0:	4b1a      	ldr	r3, [pc, #104]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007c2:	220c      	movs	r2, #12
 80007c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c6:	4b19      	ldr	r3, [pc, #100]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007cc:	4b17      	ldr	r3, [pc, #92]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007d2:	4b16      	ldr	r3, [pc, #88]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007d8:	4b14      	ldr	r3, [pc, #80]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007da:	2200      	movs	r2, #0
 80007dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007de:	4b13      	ldr	r3, [pc, #76]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007e4:	4811      	ldr	r0, [pc, #68]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007e6:	f002 fc9b 	bl	8003120 <HAL_UART_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80007f0:	f000 f8bc 	bl	800096c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007f4:	2100      	movs	r1, #0
 80007f6:	480d      	ldr	r0, [pc, #52]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007f8:	f003 f95e 	bl	8003ab8 <HAL_UARTEx_SetTxFifoThreshold>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000802:	f000 f8b3 	bl	800096c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000806:	2100      	movs	r1, #0
 8000808:	4808      	ldr	r0, [pc, #32]	; (800082c <MX_USART3_UART_Init+0x90>)
 800080a:	f003 f993 	bl	8003b34 <HAL_UARTEx_SetRxFifoThreshold>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000814:	f000 f8aa 	bl	800096c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000818:	4804      	ldr	r0, [pc, #16]	; (800082c <MX_USART3_UART_Init+0x90>)
 800081a:	f003 f914 	bl	8003a46 <HAL_UARTEx_DisableFifoMode>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000824:	f000 f8a2 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20001984 	.word	0x20001984
 8000830:	40004800 	.word	0x40004800

08000834 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b088      	sub	sp, #32
 8000838:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083a:	f107 030c 	add.w	r3, r7, #12
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084a:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <MX_GPIO_Init+0x74>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	4a16      	ldr	r2, [pc, #88]	; (80008a8 <MX_GPIO_Init+0x74>)
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000856:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <MX_GPIO_Init+0x74>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	f003 0304 	and.w	r3, r3, #4
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <MX_GPIO_Init+0x74>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	4a10      	ldr	r2, [pc, #64]	; (80008a8 <MX_GPIO_Init+0x74>)
 8000868:	f043 0302 	orr.w	r3, r3, #2
 800086c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <MX_GPIO_Init+0x74>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	f003 0302 	and.w	r3, r3, #2
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin|LED5_Pin
 800087a:	2200      	movs	r2, #0
 800087c:	211f      	movs	r1, #31
 800087e:	480b      	ldr	r0, [pc, #44]	; (80008ac <MX_GPIO_Init+0x78>)
 8000880:	f000 ff76 	bl	8001770 <HAL_GPIO_WritePin>
                          |LED4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED5_Pin
                           LED4_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED5_Pin
 8000884:	231f      	movs	r3, #31
 8000886:	60fb      	str	r3, [r7, #12]
                          |LED4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000888:	2301      	movs	r3, #1
 800088a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000890:	2300      	movs	r3, #0
 8000892:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	4619      	mov	r1, r3
 800089a:	4804      	ldr	r0, [pc, #16]	; (80008ac <MX_GPIO_Init+0x78>)
 800089c:	f000 fde8 	bl	8001470 <HAL_GPIO_Init>

}
 80008a0:	bf00      	nop
 80008a2:	3720      	adds	r7, #32
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40021000 	.word	0x40021000
 80008ac:	42020400 	.word	0x42020400

080008b0 <str_sub>:

/* USER CODE BEGIN 4 */
char* str_sub (const char *s, unsigned int start, unsigned int end)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	60f8      	str	r0, [r7, #12]
 80008b8:	60b9      	str	r1, [r7, #8]
 80008ba:	607a      	str	r2, [r7, #4]
	   char *new_s = NULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]

	   if (s != NULL && start < end)
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d036      	beq.n	8000934 <str_sub+0x84>
 80008c6:	68ba      	ldr	r2, [r7, #8]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	429a      	cmp	r2, r3
 80008cc:	d232      	bcs.n	8000934 <str_sub+0x84>
	   {
	      new_s = malloc (sizeof (*new_s) * (end - start + 2));
 80008ce:	687a      	ldr	r2, [r7, #4]
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	1ad3      	subs	r3, r2, r3
 80008d4:	3302      	adds	r3, #2
 80008d6:	4618      	mov	r0, r3
 80008d8:	f003 fa6c 	bl	8003db4 <malloc>
 80008dc:	4603      	mov	r3, r0
 80008de:	617b      	str	r3, [r7, #20]
	      if (new_s != NULL)
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d01b      	beq.n	800091e <str_sub+0x6e>
	      {
	         int i;
	         for (i = start; i <= end; i++)
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	613b      	str	r3, [r7, #16]
 80008ea:	e00c      	b.n	8000906 <str_sub+0x56>
	         {
	            new_s[i-start] = s[i];
 80008ec:	693b      	ldr	r3, [r7, #16]
 80008ee:	68fa      	ldr	r2, [r7, #12]
 80008f0:	441a      	add	r2, r3
 80008f2:	6939      	ldr	r1, [r7, #16]
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	1acb      	subs	r3, r1, r3
 80008f8:	6979      	ldr	r1, [r7, #20]
 80008fa:	440b      	add	r3, r1
 80008fc:	7812      	ldrb	r2, [r2, #0]
 80008fe:	701a      	strb	r2, [r3, #0]
	         for (i = start; i <= end; i++)
 8000900:	693b      	ldr	r3, [r7, #16]
 8000902:	3301      	adds	r3, #1
 8000904:	613b      	str	r3, [r7, #16]
 8000906:	693b      	ldr	r3, [r7, #16]
 8000908:	687a      	ldr	r2, [r7, #4]
 800090a:	429a      	cmp	r2, r3
 800090c:	d2ee      	bcs.n	80008ec <str_sub+0x3c>
	         }
	         new_s[i-start] = '\0';
 800090e:	693a      	ldr	r2, [r7, #16]
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	1ad3      	subs	r3, r2, r3
 8000914:	697a      	ldr	r2, [r7, #20]
 8000916:	4413      	add	r3, r2
 8000918:	2200      	movs	r2, #0
 800091a:	701a      	strb	r2, [r3, #0]
 800091c:	e00a      	b.n	8000934 <str_sub+0x84>
	      }
	      else
	      {
	         fprintf (stderr, "Memoire insuffisante\n");
 800091e:	4b08      	ldr	r3, [pc, #32]	; (8000940 <str_sub+0x90>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	2215      	movs	r2, #21
 8000926:	2101      	movs	r1, #1
 8000928:	4806      	ldr	r0, [pc, #24]	; (8000944 <str_sub+0x94>)
 800092a:	f003 fa11 	bl	8003d50 <fwrite>
	         exit (EXIT_FAILURE);
 800092e:	2001      	movs	r0, #1
 8000930:	f003 f9ac 	bl	8003c8c <exit>
	      }
	   }
	   return new_s;
 8000934:	697b      	ldr	r3, [r7, #20]
}
 8000936:	4618      	mov	r0, r3
 8000938:	3718      	adds	r7, #24
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	2000000c 	.word	0x2000000c
 8000944:	08005054 	.word	0x08005054

08000948 <hex2dec>:

int hex2dec (const char * tab) {
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
    int res;
    sscanf(tab, "%X", &res);
 8000950:	f107 030c 	add.w	r3, r7, #12
 8000954:	461a      	mov	r2, r3
 8000956:	4904      	ldr	r1, [pc, #16]	; (8000968 <hex2dec+0x20>)
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f003 faf3 	bl	8003f44 <siscanf>
    return res;
 800095e:	68fb      	ldr	r3, [r7, #12]
}
 8000960:	4618      	mov	r0, r3
 8000962:	3710      	adds	r7, #16
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	0800506c 	.word	0x0800506c

0800096c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000970:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000972:	e7fe      	b.n	8000972 <Error_Handler+0x6>

08000974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097a:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <HAL_MspInit+0x44>)
 800097c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800097e:	4a0e      	ldr	r2, [pc, #56]	; (80009b8 <HAL_MspInit+0x44>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6613      	str	r3, [r2, #96]	; 0x60
 8000986:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <HAL_MspInit+0x44>)
 8000988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <HAL_MspInit+0x44>)
 8000994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000996:	4a08      	ldr	r2, [pc, #32]	; (80009b8 <HAL_MspInit+0x44>)
 8000998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800099c:	6593      	str	r3, [r2, #88]	; 0x58
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <HAL_MspInit+0x44>)
 80009a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80009aa:	f000 ff7d 	bl	80018a8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40021000 	.word	0x40021000

080009bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b0ae      	sub	sp, #184	; 0xb8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009d4:	f107 0310 	add.w	r3, r7, #16
 80009d8:	2294      	movs	r2, #148	; 0x94
 80009da:	2100      	movs	r1, #0
 80009dc:	4618      	mov	r0, r3
 80009de:	f003 f9f1 	bl	8003dc4 <memset>
  if(huart->Instance==USART3)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a25      	ldr	r2, [pc, #148]	; (8000a7c <HAL_UART_MspInit+0xc0>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d142      	bne.n	8000a72 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80009ec:	2304      	movs	r3, #4
 80009ee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80009f0:	2300      	movs	r3, #0
 80009f2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009f4:	f107 0310 	add.w	r3, r7, #16
 80009f8:	4618      	mov	r0, r3
 80009fa:	f001 febd 	bl	8002778 <HAL_RCCEx_PeriphCLKConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a04:	f7ff ffb2 	bl	800096c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a08:	4b1d      	ldr	r3, [pc, #116]	; (8000a80 <HAL_UART_MspInit+0xc4>)
 8000a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a0c:	4a1c      	ldr	r2, [pc, #112]	; (8000a80 <HAL_UART_MspInit+0xc4>)
 8000a0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a12:	6593      	str	r3, [r2, #88]	; 0x58
 8000a14:	4b1a      	ldr	r3, [pc, #104]	; (8000a80 <HAL_UART_MspInit+0xc4>)
 8000a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a20:	4b17      	ldr	r3, [pc, #92]	; (8000a80 <HAL_UART_MspInit+0xc4>)
 8000a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a24:	4a16      	ldr	r2, [pc, #88]	; (8000a80 <HAL_UART_MspInit+0xc4>)
 8000a26:	f043 0304 	orr.w	r3, r3, #4
 8000a2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2c:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <HAL_UART_MspInit+0xc4>)
 8000a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a30:	f003 0304 	and.w	r3, r3, #4
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC4     ------> USART3_TX
    PC5     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000a38:	2330      	movs	r3, #48	; 0x30
 8000a3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a50:	2307      	movs	r3, #7
 8000a52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a56:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4809      	ldr	r0, [pc, #36]	; (8000a84 <HAL_UART_MspInit+0xc8>)
 8000a5e:	f000 fd07 	bl	8001470 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2100      	movs	r1, #0
 8000a66:	203f      	movs	r0, #63	; 0x3f
 8000a68:	f000 fccd 	bl	8001406 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000a6c:	203f      	movs	r0, #63	; 0x3f
 8000a6e:	f000 fce4 	bl	800143a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a72:	bf00      	nop
 8000a74:	37b8      	adds	r7, #184	; 0xb8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40004800 	.word	0x40004800
 8000a80:	40021000 	.word	0x40021000
 8000a84:	42020800 	.word	0x42020800

08000a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <NMI_Handler+0x4>

08000a8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <HardFault_Handler+0x4>

08000a94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <MemManage_Handler+0x4>

08000a9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <BusFault_Handler+0x4>

08000aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <UsageFault_Handler+0x4>

08000aa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr

08000ac2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ad4:	f000 fb7a 	bl	80011cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}

08000adc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
//  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */
  Uart_isr(&huart3);
 8000ae0:	4802      	ldr	r0, [pc, #8]	; (8000aec <USART3_IRQHandler+0x10>)
 8000ae2:	f000 fa8b 	bl	8000ffc <Uart_isr>

  /* USER CODE END USART3_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20001984 	.word	0x20001984

08000af0 <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000afa:	f003 f8c1 	bl	8003c80 <__errno>
 8000afe:	4602      	mov	r2, r0
 8000b00:	2316      	movs	r3, #22
 8000b02:	6013      	str	r3, [r2, #0]
	return -1;
 8000b04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <_exit>:

void _exit (int status)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000b18:	f04f 31ff 	mov.w	r1, #4294967295
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f7ff ffe7 	bl	8000af0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000b22:	e7fe      	b.n	8000b22 <_exit+0x12>

08000b24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	60f8      	str	r0, [r7, #12]
 8000b2c:	60b9      	str	r1, [r7, #8]
 8000b2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
 8000b34:	e00a      	b.n	8000b4c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b36:	e000      	b.n	8000b3a <_read+0x16>
 8000b38:	bf00      	nop
 8000b3a:	4601      	mov	r1, r0
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	1c5a      	adds	r2, r3, #1
 8000b40:	60ba      	str	r2, [r7, #8]
 8000b42:	b2ca      	uxtb	r2, r1
 8000b44:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	617b      	str	r3, [r7, #20]
 8000b4c:	697a      	ldr	r2, [r7, #20]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	dbf0      	blt.n	8000b36 <_read+0x12>
	}

return len;
 8000b54:	687b      	ldr	r3, [r7, #4]
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3718      	adds	r7, #24
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b086      	sub	sp, #24
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	60f8      	str	r0, [r7, #12]
 8000b66:	60b9      	str	r1, [r7, #8]
 8000b68:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	617b      	str	r3, [r7, #20]
 8000b6e:	e009      	b.n	8000b84 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	1c5a      	adds	r2, r3, #1
 8000b74:	60ba      	str	r2, [r7, #8]
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	e000      	b.n	8000b7e <_write+0x20>
 8000b7c:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	3301      	adds	r3, #1
 8000b82:	617b      	str	r3, [r7, #20]
 8000b84:	697a      	ldr	r2, [r7, #20]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	dbf1      	blt.n	8000b70 <_write+0x12>
	}
	return len;
 8000b8c:	687b      	ldr	r3, [r7, #4]
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3718      	adds	r7, #24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <_close>:

int _close(int file)
{
 8000b96:	b480      	push	{r7}
 8000b98:	b083      	sub	sp, #12
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
	return -1;
 8000b9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	b083      	sub	sp, #12
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
 8000bb6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bbe:	605a      	str	r2, [r3, #4]
	return 0;
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <_isatty>:

int _isatty(int file)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b083      	sub	sp, #12
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
	return 1;
 8000bd6:	2301      	movs	r3, #1
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	607a      	str	r2, [r7, #4]
	return 0;
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3714      	adds	r7, #20
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
	...

08000c00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c08:	4a14      	ldr	r2, [pc, #80]	; (8000c5c <_sbrk+0x5c>)
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <_sbrk+0x60>)
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c14:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <_sbrk+0x64>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d102      	bne.n	8000c22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c1c:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <_sbrk+0x64>)
 8000c1e:	4a12      	ldr	r2, [pc, #72]	; (8000c68 <_sbrk+0x68>)
 8000c20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <_sbrk+0x64>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4413      	add	r3, r2
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d207      	bcs.n	8000c40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c30:	f003 f826 	bl	8003c80 <__errno>
 8000c34:	4602      	mov	r2, r0
 8000c36:	230c      	movs	r3, #12
 8000c38:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3e:	e009      	b.n	8000c54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <_sbrk+0x64>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c46:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <_sbrk+0x64>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	4a05      	ldr	r2, [pc, #20]	; (8000c64 <_sbrk+0x64>)
 8000c50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c52:	68fb      	ldr	r3, [r7, #12]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3718      	adds	r7, #24
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20030000 	.word	0x20030000
 8000c60:	00000400 	.word	0x00000400
 8000c64:	200001f8 	.word	0x200001f8
 8000c68:	20001a28 	.word	0x20001a28

08000c6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <SystemInit+0x20>)
 8000c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c76:	4a05      	ldr	r2, [pc, #20]	; (8000c8c <SystemInit+0x20>)
 8000c78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b087      	sub	sp, #28
 8000c94:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8000c96:	4b4f      	ldr	r3, [pc, #316]	; (8000dd4 <SystemCoreClockUpdate+0x144>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f003 0308 	and.w	r3, r3, #8
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d107      	bne.n	8000cb2 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8000ca2:	4b4c      	ldr	r3, [pc, #304]	; (8000dd4 <SystemCoreClockUpdate+0x144>)
 8000ca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ca8:	0a1b      	lsrs	r3, r3, #8
 8000caa:	f003 030f 	and.w	r3, r3, #15
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	e005      	b.n	8000cbe <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8000cb2:	4b48      	ldr	r3, [pc, #288]	; (8000dd4 <SystemCoreClockUpdate+0x144>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	091b      	lsrs	r3, r3, #4
 8000cb8:	f003 030f 	and.w	r3, r3, #15
 8000cbc:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8000cbe:	4a46      	ldr	r2, [pc, #280]	; (8000dd8 <SystemCoreClockUpdate+0x148>)
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cc6:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000cc8:	4b42      	ldr	r3, [pc, #264]	; (8000dd4 <SystemCoreClockUpdate+0x144>)
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	f003 030c 	and.w	r3, r3, #12
 8000cd0:	2b0c      	cmp	r3, #12
 8000cd2:	d865      	bhi.n	8000da0 <SystemCoreClockUpdate+0x110>
 8000cd4:	a201      	add	r2, pc, #4	; (adr r2, 8000cdc <SystemCoreClockUpdate+0x4c>)
 8000cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cda:	bf00      	nop
 8000cdc:	08000d11 	.word	0x08000d11
 8000ce0:	08000da1 	.word	0x08000da1
 8000ce4:	08000da1 	.word	0x08000da1
 8000ce8:	08000da1 	.word	0x08000da1
 8000cec:	08000d19 	.word	0x08000d19
 8000cf0:	08000da1 	.word	0x08000da1
 8000cf4:	08000da1 	.word	0x08000da1
 8000cf8:	08000da1 	.word	0x08000da1
 8000cfc:	08000d21 	.word	0x08000d21
 8000d00:	08000da1 	.word	0x08000da1
 8000d04:	08000da1 	.word	0x08000da1
 8000d08:	08000da1 	.word	0x08000da1
 8000d0c:	08000d29 	.word	0x08000d29
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000d10:	4a32      	ldr	r2, [pc, #200]	; (8000ddc <SystemCoreClockUpdate+0x14c>)
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	6013      	str	r3, [r2, #0]
      break;
 8000d16:	e047      	b.n	8000da8 <SystemCoreClockUpdate+0x118>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000d18:	4b30      	ldr	r3, [pc, #192]	; (8000ddc <SystemCoreClockUpdate+0x14c>)
 8000d1a:	4a31      	ldr	r2, [pc, #196]	; (8000de0 <SystemCoreClockUpdate+0x150>)
 8000d1c:	601a      	str	r2, [r3, #0]
      break;
 8000d1e:	e043      	b.n	8000da8 <SystemCoreClockUpdate+0x118>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000d20:	4b2e      	ldr	r3, [pc, #184]	; (8000ddc <SystemCoreClockUpdate+0x14c>)
 8000d22:	4a2f      	ldr	r2, [pc, #188]	; (8000de0 <SystemCoreClockUpdate+0x150>)
 8000d24:	601a      	str	r2, [r3, #0]
      break;
 8000d26:	e03f      	b.n	8000da8 <SystemCoreClockUpdate+0x118>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000d28:	4b2a      	ldr	r3, [pc, #168]	; (8000dd4 <SystemCoreClockUpdate+0x144>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	f003 0303 	and.w	r3, r3, #3
 8000d30:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8000d32:	4b28      	ldr	r3, [pc, #160]	; (8000dd4 <SystemCoreClockUpdate+0x144>)
 8000d34:	68db      	ldr	r3, [r3, #12]
 8000d36:	091b      	lsrs	r3, r3, #4
 8000d38:	f003 030f 	and.w	r3, r3, #15
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	60bb      	str	r3, [r7, #8]

      switch (pllsource)
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d002      	beq.n	8000d4c <SystemCoreClockUpdate+0xbc>
 8000d46:	2b03      	cmp	r3, #3
 8000d48:	d006      	beq.n	8000d58 <SystemCoreClockUpdate+0xc8>
 8000d4a:	e00b      	b.n	8000d64 <SystemCoreClockUpdate+0xd4>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8000d4c:	4a24      	ldr	r2, [pc, #144]	; (8000de0 <SystemCoreClockUpdate+0x150>)
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d54:	613b      	str	r3, [r7, #16]
          break;
 8000d56:	e00b      	b.n	8000d70 <SystemCoreClockUpdate+0xe0>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8000d58:	4a21      	ldr	r2, [pc, #132]	; (8000de0 <SystemCoreClockUpdate+0x150>)
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d60:	613b      	str	r3, [r7, #16]
          break;
 8000d62:	e005      	b.n	8000d70 <SystemCoreClockUpdate+0xe0>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8000d64:	697a      	ldr	r2, [r7, #20]
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d6c:	613b      	str	r3, [r7, #16]
          break;
 8000d6e:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8000d70:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <SystemCoreClockUpdate+0x144>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	0a1b      	lsrs	r3, r3, #8
 8000d76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	fb02 f303 	mul.w	r3, r2, r3
 8000d80:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8000d82:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <SystemCoreClockUpdate+0x144>)
 8000d84:	68db      	ldr	r3, [r3, #12]
 8000d86:	0e5b      	lsrs	r3, r3, #25
 8000d88:	f003 0303 	and.w	r3, r3, #3
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d9a:	4a10      	ldr	r2, [pc, #64]	; (8000ddc <SystemCoreClockUpdate+0x14c>)
 8000d9c:	6013      	str	r3, [r2, #0]
      break;
 8000d9e:	e003      	b.n	8000da8 <SystemCoreClockUpdate+0x118>

    default:
      SystemCoreClock = msirange;
 8000da0:	4a0e      	ldr	r2, [pc, #56]	; (8000ddc <SystemCoreClockUpdate+0x14c>)
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	6013      	str	r3, [r2, #0]
      break;
 8000da6:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000da8:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <SystemCoreClockUpdate+0x144>)
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	091b      	lsrs	r3, r3, #4
 8000dae:	f003 030f 	and.w	r3, r3, #15
 8000db2:	4a0c      	ldr	r2, [pc, #48]	; (8000de4 <SystemCoreClockUpdate+0x154>)
 8000db4:	5cd3      	ldrb	r3, [r2, r3]
 8000db6:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000db8:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <SystemCoreClockUpdate+0x14c>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8000dc2:	4a06      	ldr	r2, [pc, #24]	; (8000ddc <SystemCoreClockUpdate+0x14c>)
 8000dc4:	6013      	str	r3, [r2, #0]
}
 8000dc6:	bf00      	nop
 8000dc8:	371c      	adds	r7, #28
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	080054a4 	.word	0x080054a4
 8000ddc:	20000000 	.word	0x20000000
 8000de0:	00f42400 	.word	0x00f42400
 8000de4:	0800548c 	.word	0x0800548c

08000de8 <store_char>:

ring_buffer *_rx_buffer;
ring_buffer *_tx_buffer;

static void store_char(unsigned char c, ring_buffer *buffer)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	6039      	str	r1, [r7, #0]
 8000df2:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	f8d3 3bb8 	ldr.w	r3, [r3, #3000]	; 0xbb8
 8000dfa:	1c5a      	adds	r2, r3, #1
 8000dfc:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <store_char+0x54>)
 8000dfe:	fba3 1302 	umull	r1, r3, r3, r2
 8000e02:	099b      	lsrs	r3, r3, #6
 8000e04:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000e08:	fb01 f303 	mul.w	r3, r1, r3
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	f8d3 2bbc 	ldr.w	r2, [r3, #3004]	; 0xbbc
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d009      	beq.n	8000e30 <store_char+0x48>
    buffer->buffer[buffer->head] = c;
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	f8d3 3bb8 	ldr.w	r3, [r3, #3000]	; 0xbb8
 8000e22:	683a      	ldr	r2, [r7, #0]
 8000e24:	79f9      	ldrb	r1, [r7, #7]
 8000e26:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8000e28:	68fa      	ldr	r2, [r7, #12]
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	f8c3 2bb8 	str.w	r2, [r3, #3000]	; 0xbb8
  }
}
 8000e30:	bf00      	nop
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	057619f1 	.word	0x057619f1

08000e40 <Ringbuf_init>:

void Ringbuf_init(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8000e44:	4b0d      	ldr	r3, [pc, #52]	; (8000e7c <Ringbuf_init+0x3c>)
 8000e46:	4a0e      	ldr	r2, [pc, #56]	; (8000e80 <Ringbuf_init+0x40>)
 8000e48:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <Ringbuf_init+0x44>)
 8000e4c:	4a0e      	ldr	r2, [pc, #56]	; (8000e88 <Ringbuf_init+0x48>)
 8000e4e:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8000e50:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <Ringbuf_init+0x4c>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	689a      	ldr	r2, [r3, #8]
 8000e56:	4b0d      	ldr	r3, [pc, #52]	; (8000e8c <Ringbuf_init+0x4c>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f042 0201 	orr.w	r2, r2, #1
 8000e5e:	609a      	str	r2, [r3, #8]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8000e60:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <Ringbuf_init+0x4c>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <Ringbuf_init+0x4c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f042 0220 	orr.w	r2, r2, #32
 8000e6e:	601a      	str	r2, [r3, #0]
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	20001a1c 	.word	0x20001a1c
 8000e80:	200001fc 	.word	0x200001fc
 8000e84:	20001a18 	.word	0x20001a18
 8000e88:	20000dbc 	.word	0x20000dbc
 8000e8c:	20001984 	.word	0x20001984

08000e90 <get_rx_buffer>:

unsigned char* get_rx_buffer() {
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
	return rx_buffer.buffer;
 8000e94:	4b02      	ldr	r3, [pc, #8]	; (8000ea0 <get_rx_buffer+0x10>)
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	200001fc 	.word	0x200001fc

08000ea4 <Look_for>:

int Look_for (char *str, char *buffertolookinto)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
	int stringlength = strlen (str);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f7ff f9c0 	bl	8000234 <strlen>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	60fb      	str	r3, [r7, #12]
	int bufferlength = strlen (buffertolookinto);
 8000eb8:	6838      	ldr	r0, [r7, #0]
 8000eba:	f7ff f9bb 	bl	8000234 <strlen>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	60bb      	str	r3, [r7, #8]
	int so_far = 0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
	int indx = 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]
repeat:
	while (str[so_far] != buffertolookinto[indx]) indx++;
 8000eca:	e002      	b.n	8000ed2 <Look_for+0x2e>
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	613b      	str	r3, [r7, #16]
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	781a      	ldrb	r2, [r3, #0]
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	6839      	ldr	r1, [r7, #0]
 8000ede:	440b      	add	r3, r1
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	d1f2      	bne.n	8000ecc <Look_for+0x28>
	if (str[so_far] == buffertolookinto[indx]){
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	4413      	add	r3, r2
 8000eec:	781a      	ldrb	r2, [r3, #0]
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	6839      	ldr	r1, [r7, #0]
 8000ef2:	440b      	add	r3, r1
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d111      	bne.n	8000f1e <Look_for+0x7a>
	while (str[so_far] == buffertolookinto[indx])
 8000efa:	e005      	b.n	8000f08 <Look_for+0x64>
	{
		so_far++;
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	3301      	adds	r3, #1
 8000f00:	617b      	str	r3, [r7, #20]
		indx++;
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	3301      	adds	r3, #1
 8000f06:	613b      	str	r3, [r7, #16]
	while (str[so_far] == buffertolookinto[indx])
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	781a      	ldrb	r2, [r3, #0]
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	6839      	ldr	r1, [r7, #0]
 8000f14:	440b      	add	r3, r1
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d0ef      	beq.n	8000efc <Look_for+0x58>
 8000f1c:	e008      	b.n	8000f30 <Look_for+0x8c>
	}
	}

	else
		{
			so_far =0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
			if (indx >= bufferlength) return -1;
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	dbcf      	blt.n	8000eca <Look_for+0x26>
 8000f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2e:	e007      	b.n	8000f40 <Look_for+0x9c>
			goto repeat;
		}

	if (so_far == stringlength) return 1;
 8000f30:	697a      	ldr	r2, [r7, #20]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d101      	bne.n	8000f3c <Look_for+0x98>
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e001      	b.n	8000f40 <Look_for+0x9c>
	else return -1;
 8000f3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3718      	adds	r7, #24
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <Uart_read>:

int Uart_read(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8000f4e:	4b17      	ldr	r3, [pc, #92]	; (8000fac <Uart_read+0x64>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f8d3 2bb8 	ldr.w	r2, [r3, #3000]	; 0xbb8
 8000f56:	4b15      	ldr	r3, [pc, #84]	; (8000fac <Uart_read+0x64>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f8d3 3bbc 	ldr.w	r3, [r3, #3004]	; 0xbbc
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d102      	bne.n	8000f68 <Uart_read+0x20>
  {
    return -1;
 8000f62:	f04f 33ff 	mov.w	r3, #4294967295
 8000f66:	e01a      	b.n	8000f9e <Uart_read+0x56>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8000f68:	4b10      	ldr	r3, [pc, #64]	; (8000fac <Uart_read+0x64>)
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <Uart_read+0x64>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f8d3 3bbc 	ldr.w	r3, [r3, #3004]	; 0xbbc
 8000f74:	5cd3      	ldrb	r3, [r2, r3]
 8000f76:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8000f78:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <Uart_read+0x64>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f8d3 3bbc 	ldr.w	r3, [r3, #3004]	; 0xbbc
 8000f80:	1c5a      	adds	r2, r3, #1
 8000f82:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <Uart_read+0x64>)
 8000f84:	6819      	ldr	r1, [r3, #0]
 8000f86:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <Uart_read+0x68>)
 8000f88:	fba3 0302 	umull	r0, r3, r3, r2
 8000f8c:	099b      	lsrs	r3, r3, #6
 8000f8e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000f92:	fb00 f303 	mul.w	r3, r0, r3
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	f8c1 3bbc 	str.w	r3, [r1, #3004]	; 0xbbc
    return c;
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	20001a1c 	.word	0x20001a1c
 8000fb0:	057619f1 	.word	0x057619f1

08000fb4 <IsDataAvailable>:
		__HAL_UART_ENABLE_IT(uart, UART_IT_TXE); // Enable UART transmission interrupt
	}
}

int IsDataAvailable(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8000fb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <IsDataAvailable+0x40>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f8d3 3bb8 	ldr.w	r3, [r3, #3000]	; 0xbb8
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <IsDataAvailable+0x40>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f8d3 3bbc 	ldr.w	r3, [r3, #3004]	; 0xbbc
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	4a08      	ldr	r2, [pc, #32]	; (8000ff8 <IsDataAvailable+0x44>)
 8000fd8:	fba2 1203 	umull	r1, r2, r2, r3
 8000fdc:	0992      	lsrs	r2, r2, #6
 8000fde:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000fe2:	fb01 f202 	mul.w	r2, r1, r2
 8000fe6:	1a9b      	subs	r3, r3, r2
 8000fe8:	b29b      	uxth	r3, r3
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	20001a1c 	.word	0x20001a1c
 8000ff8:	057619f1 	.word	0x057619f1

08000ffc <Uart_isr>:
	if (so_far == len) return 1;
	else return -1;
}

void Uart_isr (UART_HandleTypeDef *huart)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	69db      	ldr	r3, [r3, #28]
 800100a:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	f003 0320 	and.w	r3, r3, #32
 800101a:	2b00      	cmp	r3, #0
 800101c:	d013      	beq.n	8001046 <Uart_isr+0x4a>
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	f003 0320 	and.w	r3, r3, #32
 8001024:	2b00      	cmp	r3, #0
 8001026:	d00e      	beq.n	8001046 <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->ISR;                       /* Read status register */
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	69db      	ldr	r3, [r3, #28]
        unsigned char c = huart->Instance->RDR;     /* Read data register */
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001034:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8001036:	4b22      	ldr	r3, [pc, #136]	; (80010c0 <Uart_isr+0xc4>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	7bfb      	ldrb	r3, [r7, #15]
 800103c:	4611      	mov	r1, r2
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fed2 	bl	8000de8 <store_char>
        return;
 8001044:	e038      	b.n	80010b8 <Uart_isr+0xbc>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800104c:	2b00      	cmp	r3, #0
 800104e:	d033      	beq.n	80010b8 <Uart_isr+0xbc>
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001056:	2b00      	cmp	r3, #0
 8001058:	d02e      	beq.n	80010b8 <Uart_isr+0xbc>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 800105a:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <Uart_isr+0xc8>)
 800105c:	f8d3 2bb8 	ldr.w	r2, [r3, #3000]	; 0xbb8
 8001060:	4b18      	ldr	r3, [pc, #96]	; (80010c4 <Uart_isr+0xc8>)
 8001062:	f8d3 3bbc 	ldr.w	r3, [r3, #3004]	; 0xbbc
 8001066:	429a      	cmp	r2, r3
 8001068:	d108      	bne.n	800107c <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001078:	601a      	str	r2, [r3, #0]

    	      huart->Instance->ISR;
    	      huart->Instance->RDR = c;

    	    }
    	return;
 800107a:	e01d      	b.n	80010b8 <Uart_isr+0xbc>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 800107c:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <Uart_isr+0xc8>)
 800107e:	f8d3 3bbc 	ldr.w	r3, [r3, #3004]	; 0xbbc
 8001082:	4a10      	ldr	r2, [pc, #64]	; (80010c4 <Uart_isr+0xc8>)
 8001084:	5cd3      	ldrb	r3, [r2, r3]
 8001086:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8001088:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <Uart_isr+0xc8>)
 800108a:	f8d3 3bbc 	ldr.w	r3, [r3, #3004]	; 0xbbc
 800108e:	1c5a      	adds	r2, r3, #1
 8001090:	4b0d      	ldr	r3, [pc, #52]	; (80010c8 <Uart_isr+0xcc>)
 8001092:	fba3 1302 	umull	r1, r3, r3, r2
 8001096:	099b      	lsrs	r3, r3, #6
 8001098:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800109c:	fb01 f303 	mul.w	r3, r1, r3
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	4a08      	ldr	r2, [pc, #32]	; (80010c4 <Uart_isr+0xc8>)
 80010a4:	f8c2 3bbc 	str.w	r3, [r2, #3004]	; 0xbbc
    	      huart->Instance->ISR;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	69db      	ldr	r3, [r3, #28]
    	      huart->Instance->RDR = c;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	7bba      	ldrb	r2, [r7, #14]
 80010b4:	625a      	str	r2, [r3, #36]	; 0x24
    	return;
 80010b6:	bf00      	nop
    }
}
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20001a1c 	.word	0x20001a1c
 80010c4:	20000dbc 	.word	0x20000dbc
 80010c8:	057619f1 	.word	0x057619f1

080010cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80010cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001104 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010d0:	f7ff fdcc 	bl	8000c6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80010d4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80010d6:	e003      	b.n	80010e0 <LoopCopyDataInit>

080010d8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80010d8:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80010da:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80010dc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80010de:	3104      	adds	r1, #4

080010e0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80010e0:	480a      	ldr	r0, [pc, #40]	; (800110c <LoopForever+0xa>)
	ldr	r3, =_edata
 80010e2:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <LoopForever+0xe>)
	adds	r2, r0, r1
 80010e4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80010e6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80010e8:	d3f6      	bcc.n	80010d8 <CopyDataInit>
	ldr	r2, =_sbss
 80010ea:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <LoopForever+0x12>)
	b	LoopFillZerobss
 80010ec:	e002      	b.n	80010f4 <LoopFillZerobss>

080010ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80010ee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80010f0:	f842 3b04 	str.w	r3, [r2], #4

080010f4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80010f4:	4b08      	ldr	r3, [pc, #32]	; (8001118 <LoopForever+0x16>)
	cmp	r2, r3
 80010f6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80010f8:	d3f9      	bcc.n	80010ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010fa:	f002 fe37 	bl	8003d6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010fe:	f7ff fa6b 	bl	80005d8 <main>

08001102 <LoopForever>:

LoopForever:
    b LoopForever
 8001102:	e7fe      	b.n	8001102 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001104:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8001108:	0800569c 	.word	0x0800569c
	ldr	r0, =_sdata
 800110c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001110:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8001114:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8001118:	20001a28 	.word	0x20001a28

0800111c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800111c:	e7fe      	b.n	800111c <ADC1_2_IRQHandler>

0800111e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001124:	2300      	movs	r3, #0
 8001126:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001128:	2004      	movs	r0, #4
 800112a:	f000 f961 	bl	80013f0 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 800112e:	f7ff fdaf 	bl	8000c90 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001132:	2000      	movs	r0, #0
 8001134:	f000 f80e 	bl	8001154 <HAL_InitTick>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d002      	beq.n	8001144 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	71fb      	strb	r3, [r7, #7]
 8001142:	e001      	b.n	8001148 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001144:	f7ff fc16 	bl	8000974 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001148:	79fb      	ldrb	r3, [r7, #7]
}
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800115c:	2300      	movs	r3, #0
 800115e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001160:	4b17      	ldr	r3, [pc, #92]	; (80011c0 <HAL_InitTick+0x6c>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d023      	beq.n	80011b0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001168:	4b16      	ldr	r3, [pc, #88]	; (80011c4 <HAL_InitTick+0x70>)
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <HAL_InitTick+0x6c>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	4619      	mov	r1, r3
 8001172:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001176:	fbb3 f3f1 	udiv	r3, r3, r1
 800117a:	fbb2 f3f3 	udiv	r3, r2, r3
 800117e:	4618      	mov	r0, r3
 8001180:	f000 f969 	bl	8001456 <HAL_SYSTICK_Config>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d10f      	bne.n	80011aa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2b07      	cmp	r3, #7
 800118e:	d809      	bhi.n	80011a4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001190:	2200      	movs	r2, #0
 8001192:	6879      	ldr	r1, [r7, #4]
 8001194:	f04f 30ff 	mov.w	r0, #4294967295
 8001198:	f000 f935 	bl	8001406 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800119c:	4a0a      	ldr	r2, [pc, #40]	; (80011c8 <HAL_InitTick+0x74>)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6013      	str	r3, [r2, #0]
 80011a2:	e007      	b.n	80011b4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	73fb      	strb	r3, [r7, #15]
 80011a8:	e004      	b.n	80011b4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	73fb      	strb	r3, [r7, #15]
 80011ae:	e001      	b.n	80011b4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000008 	.word	0x20000008
 80011c4:	20000000 	.word	0x20000000
 80011c8:	20000004 	.word	0x20000004

080011cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_IncTick+0x20>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	461a      	mov	r2, r3
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <HAL_IncTick+0x24>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4413      	add	r3, r2
 80011dc:	4a04      	ldr	r2, [pc, #16]	; (80011f0 <HAL_IncTick+0x24>)
 80011de:	6013      	str	r3, [r2, #0]
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	20000008 	.word	0x20000008
 80011f0:	20001a20 	.word	0x20001a20

080011f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  return uwTick;
 80011f8:	4b03      	ldr	r3, [pc, #12]	; (8001208 <HAL_GetTick+0x14>)
 80011fa:	681b      	ldr	r3, [r3, #0]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	20001a20 	.word	0x20001a20

0800120c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001214:	f7ff ffee 	bl	80011f4 <HAL_GetTick>
 8001218:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001224:	d005      	beq.n	8001232 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001226:	4b09      	ldr	r3, [pc, #36]	; (800124c <HAL_Delay+0x40>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	461a      	mov	r2, r3
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4413      	add	r3, r2
 8001230:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001232:	bf00      	nop
 8001234:	f7ff ffde 	bl	80011f4 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	68fa      	ldr	r2, [r7, #12]
 8001240:	429a      	cmp	r2, r3
 8001242:	d8f7      	bhi.n	8001234 <HAL_Delay+0x28>
  {
  }
}
 8001244:	bf00      	nop
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000008 	.word	0x20000008

08001250 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <__NVIC_SetPriorityGrouping+0x44>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001266:	68ba      	ldr	r2, [r7, #8]
 8001268:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800126c:	4013      	ands	r3, r2
 800126e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001278:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800127c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001280:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001282:	4a04      	ldr	r2, [pc, #16]	; (8001294 <__NVIC_SetPriorityGrouping+0x44>)
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	60d3      	str	r3, [r2, #12]
}
 8001288:	bf00      	nop
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800129c:	4b04      	ldr	r3, [pc, #16]	; (80012b0 <__NVIC_GetPriorityGrouping+0x18>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	0a1b      	lsrs	r3, r3, #8
 80012a2:	f003 0307 	and.w	r3, r3, #7
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	db0b      	blt.n	80012de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	f003 021f 	and.w	r2, r3, #31
 80012cc:	4907      	ldr	r1, [pc, #28]	; (80012ec <__NVIC_EnableIRQ+0x38>)
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	095b      	lsrs	r3, r3, #5
 80012d4:	2001      	movs	r0, #1
 80012d6:	fa00 f202 	lsl.w	r2, r0, r2
 80012da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	e000e100 	.word	0xe000e100

080012f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	6039      	str	r1, [r7, #0]
 80012fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001300:	2b00      	cmp	r3, #0
 8001302:	db0a      	blt.n	800131a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	b2da      	uxtb	r2, r3
 8001308:	490c      	ldr	r1, [pc, #48]	; (800133c <__NVIC_SetPriority+0x4c>)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	0152      	lsls	r2, r2, #5
 8001310:	b2d2      	uxtb	r2, r2
 8001312:	440b      	add	r3, r1
 8001314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001318:	e00a      	b.n	8001330 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	b2da      	uxtb	r2, r3
 800131e:	4908      	ldr	r1, [pc, #32]	; (8001340 <__NVIC_SetPriority+0x50>)
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	f003 030f 	and.w	r3, r3, #15
 8001326:	3b04      	subs	r3, #4
 8001328:	0152      	lsls	r2, r2, #5
 800132a:	b2d2      	uxtb	r2, r2
 800132c:	440b      	add	r3, r1
 800132e:	761a      	strb	r2, [r3, #24]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000e100 	.word	0xe000e100
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001344:	b480      	push	{r7}
 8001346:	b089      	sub	sp, #36	; 0x24
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	f1c3 0307 	rsb	r3, r3, #7
 800135e:	2b03      	cmp	r3, #3
 8001360:	bf28      	it	cs
 8001362:	2303      	movcs	r3, #3
 8001364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3303      	adds	r3, #3
 800136a:	2b06      	cmp	r3, #6
 800136c:	d902      	bls.n	8001374 <NVIC_EncodePriority+0x30>
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3b04      	subs	r3, #4
 8001372:	e000      	b.n	8001376 <NVIC_EncodePriority+0x32>
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001378:	f04f 32ff 	mov.w	r2, #4294967295
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43da      	mvns	r2, r3
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	401a      	ands	r2, r3
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800138c:	f04f 31ff 	mov.w	r1, #4294967295
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	fa01 f303 	lsl.w	r3, r1, r3
 8001396:	43d9      	mvns	r1, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139c:	4313      	orrs	r3, r2
         );
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3724      	adds	r7, #36	; 0x24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
	...

080013ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3b01      	subs	r3, #1
 80013b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013bc:	d301      	bcc.n	80013c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013be:	2301      	movs	r3, #1
 80013c0:	e00f      	b.n	80013e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013c2:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <SysTick_Config+0x40>)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ca:	2107      	movs	r1, #7
 80013cc:	f04f 30ff 	mov.w	r0, #4294967295
 80013d0:	f7ff ff8e 	bl	80012f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d4:	4b05      	ldr	r3, [pc, #20]	; (80013ec <SysTick_Config+0x40>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013da:	4b04      	ldr	r3, [pc, #16]	; (80013ec <SysTick_Config+0x40>)
 80013dc:	2207      	movs	r2, #7
 80013de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	e000e010 	.word	0xe000e010

080013f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff ff29 	bl	8001250 <__NVIC_SetPriorityGrouping>
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b086      	sub	sp, #24
 800140a:	af00      	add	r7, sp, #0
 800140c:	4603      	mov	r3, r0
 800140e:	60b9      	str	r1, [r7, #8]
 8001410:	607a      	str	r2, [r7, #4]
 8001412:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001414:	f7ff ff40 	bl	8001298 <__NVIC_GetPriorityGrouping>
 8001418:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	68b9      	ldr	r1, [r7, #8]
 800141e:	6978      	ldr	r0, [r7, #20]
 8001420:	f7ff ff90 	bl	8001344 <NVIC_EncodePriority>
 8001424:	4602      	mov	r2, r0
 8001426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800142a:	4611      	mov	r1, r2
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ff5f 	bl	80012f0 <__NVIC_SetPriority>
}
 8001432:	bf00      	nop
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b082      	sub	sp, #8
 800143e:	af00      	add	r7, sp, #0
 8001440:	4603      	mov	r3, r0
 8001442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff ff33 	bl	80012b4 <__NVIC_EnableIRQ>
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b082      	sub	sp, #8
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff ffa4 	bl	80013ac <SysTick_Config>
 8001464:	4603      	mov	r3, r0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001470:	b480      	push	{r7}
 8001472:	b087      	sub	sp, #28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800147e:	e158      	b.n	8001732 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	2101      	movs	r1, #1
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	fa01 f303 	lsl.w	r3, r1, r3
 800148c:	4013      	ands	r3, r2
 800148e:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2b00      	cmp	r3, #0
 8001494:	f000 814a 	beq.w	800172c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d00b      	beq.n	80014b8 <HAL_GPIO_Init+0x48>
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d007      	beq.n	80014b8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014ac:	2b11      	cmp	r3, #17
 80014ae:	d003      	beq.n	80014b8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	2b12      	cmp	r3, #18
 80014b6:	d130      	bne.n	800151a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	2203      	movs	r2, #3
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43db      	mvns	r3, r3
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	4013      	ands	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	68da      	ldr	r2, [r3, #12]
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	4313      	orrs	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014ee:	2201      	movs	r2, #1
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43db      	mvns	r3, r3
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	4013      	ands	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	091b      	lsrs	r3, r3, #4
 8001504:	f003 0201 	and.w	r2, r3, #1
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4313      	orrs	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	2203      	movs	r2, #3
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43db      	mvns	r3, r3
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	4013      	ands	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	689a      	ldr	r2, [r3, #8]
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	4313      	orrs	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	2b02      	cmp	r3, #2
 8001550:	d003      	beq.n	800155a <HAL_GPIO_Init+0xea>
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2b12      	cmp	r3, #18
 8001558:	d123      	bne.n	80015a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	08da      	lsrs	r2, r3, #3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	3208      	adds	r2, #8
 8001562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001566:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	220f      	movs	r2, #15
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	691a      	ldr	r2, [r3, #16]
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	f003 0307 	and.w	r3, r3, #7
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	08da      	lsrs	r2, r3, #3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3208      	adds	r2, #8
 800159c:	6939      	ldr	r1, [r7, #16]
 800159e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	2203      	movs	r2, #3
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43db      	mvns	r3, r3
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	4013      	ands	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f003 0203 	and.w	r2, r3, #3
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f000 80a4 	beq.w	800172c <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 80015e4:	4a5a      	ldr	r2, [pc, #360]	; (8001750 <HAL_GPIO_Init+0x2e0>)
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	089b      	lsrs	r3, r3, #2
 80015ea:	3318      	adds	r3, #24
 80015ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f0:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	f003 0303 	and.w	r3, r3, #3
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	220f      	movs	r2, #15
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	43db      	mvns	r3, r3
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	4013      	ands	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a52      	ldr	r2, [pc, #328]	; (8001754 <HAL_GPIO_Init+0x2e4>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d025      	beq.n	800165c <HAL_GPIO_Init+0x1ec>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a51      	ldr	r2, [pc, #324]	; (8001758 <HAL_GPIO_Init+0x2e8>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d01f      	beq.n	8001658 <HAL_GPIO_Init+0x1e8>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4a50      	ldr	r2, [pc, #320]	; (800175c <HAL_GPIO_Init+0x2ec>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d019      	beq.n	8001654 <HAL_GPIO_Init+0x1e4>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a4f      	ldr	r2, [pc, #316]	; (8001760 <HAL_GPIO_Init+0x2f0>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d013      	beq.n	8001650 <HAL_GPIO_Init+0x1e0>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a4e      	ldr	r2, [pc, #312]	; (8001764 <HAL_GPIO_Init+0x2f4>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d00d      	beq.n	800164c <HAL_GPIO_Init+0x1dc>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4a4d      	ldr	r2, [pc, #308]	; (8001768 <HAL_GPIO_Init+0x2f8>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d007      	beq.n	8001648 <HAL_GPIO_Init+0x1d8>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4a4c      	ldr	r2, [pc, #304]	; (800176c <HAL_GPIO_Init+0x2fc>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d101      	bne.n	8001644 <HAL_GPIO_Init+0x1d4>
 8001640:	2306      	movs	r3, #6
 8001642:	e00c      	b.n	800165e <HAL_GPIO_Init+0x1ee>
 8001644:	2307      	movs	r3, #7
 8001646:	e00a      	b.n	800165e <HAL_GPIO_Init+0x1ee>
 8001648:	2305      	movs	r3, #5
 800164a:	e008      	b.n	800165e <HAL_GPIO_Init+0x1ee>
 800164c:	2304      	movs	r3, #4
 800164e:	e006      	b.n	800165e <HAL_GPIO_Init+0x1ee>
 8001650:	2303      	movs	r3, #3
 8001652:	e004      	b.n	800165e <HAL_GPIO_Init+0x1ee>
 8001654:	2302      	movs	r3, #2
 8001656:	e002      	b.n	800165e <HAL_GPIO_Init+0x1ee>
 8001658:	2301      	movs	r3, #1
 800165a:	e000      	b.n	800165e <HAL_GPIO_Init+0x1ee>
 800165c:	2300      	movs	r3, #0
 800165e:	697a      	ldr	r2, [r7, #20]
 8001660:	f002 0203 	and.w	r2, r2, #3
 8001664:	00d2      	lsls	r2, r2, #3
 8001666:	4093      	lsls	r3, r2
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	4313      	orrs	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 800166e:	4938      	ldr	r1, [pc, #224]	; (8001750 <HAL_GPIO_Init+0x2e0>)
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	089b      	lsrs	r3, r3, #2
 8001674:	3318      	adds	r3, #24
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800167c:	4b34      	ldr	r3, [pc, #208]	; (8001750 <HAL_GPIO_Init+0x2e0>)
 800167e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001682:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	43db      	mvns	r3, r3
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	4013      	ands	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d003      	beq.n	80016a2 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4313      	orrs	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016a2:	4a2b      	ldr	r2, [pc, #172]	; (8001750 <HAL_GPIO_Init+0x2e0>)
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80016aa:	4b29      	ldr	r3, [pc, #164]	; (8001750 <HAL_GPIO_Init+0x2e0>)
 80016ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	43db      	mvns	r3, r3
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	4013      	ands	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d003      	beq.n	80016d0 <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016d0:	4a1f      	ldr	r2, [pc, #124]	; (8001750 <HAL_GPIO_Init+0x2e0>)
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016d8:	4b1d      	ldr	r3, [pc, #116]	; (8001750 <HAL_GPIO_Init+0x2e0>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	43db      	mvns	r3, r3
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	4013      	ands	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d003      	beq.n	80016fc <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016fc:	4a14      	ldr	r2, [pc, #80]	; (8001750 <HAL_GPIO_Init+0x2e0>)
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001702:	4b13      	ldr	r3, [pc, #76]	; (8001750 <HAL_GPIO_Init+0x2e0>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	43db      	mvns	r3, r3
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	4013      	ands	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4313      	orrs	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001726:	4a0a      	ldr	r2, [pc, #40]	; (8001750 <HAL_GPIO_Init+0x2e0>)
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	3301      	adds	r3, #1
 8001730:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	fa22 f303 	lsr.w	r3, r2, r3
 800173c:	2b00      	cmp	r3, #0
 800173e:	f47f ae9f 	bne.w	8001480 <HAL_GPIO_Init+0x10>
  }
}
 8001742:	bf00      	nop
 8001744:	371c      	adds	r7, #28
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	4002f400 	.word	0x4002f400
 8001754:	42020000 	.word	0x42020000
 8001758:	42020400 	.word	0x42020400
 800175c:	42020800 	.word	0x42020800
 8001760:	42020c00 	.word	0x42020c00
 8001764:	42021000 	.word	0x42021000
 8001768:	42021400 	.word	0x42021400
 800176c:	42021800 	.word	0x42021800

08001770 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	460b      	mov	r3, r1
 800177a:	807b      	strh	r3, [r7, #2]
 800177c:	4613      	mov	r3, r2
 800177e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001780:	787b      	ldrb	r3, [r7, #1]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001786:	887a      	ldrh	r2, [r7, #2]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800178c:	e002      	b.n	8001794 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800178e:	887a      	ldrh	r2, [r7, #2]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	460b      	mov	r3, r1
 80017aa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017b2:	887a      	ldrh	r2, [r7, #2]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	4013      	ands	r3, r2
 80017b8:	041a      	lsls	r2, r3, #16
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	43d9      	mvns	r1, r3
 80017be:	887b      	ldrh	r3, [r7, #2]
 80017c0:	400b      	ands	r3, r1
 80017c2:	431a      	orrs	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	619a      	str	r2, [r3, #24]
}
 80017c8:	bf00      	nop
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80017d8:	4b04      	ldr	r3, [pc, #16]	; (80017ec <HAL_PWREx_GetVoltageRange+0x18>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	40007000 	.word	0x40007000

080017f0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 80017f8:	4b27      	ldr	r3, [pc, #156]	; (8001898 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001800:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8001802:	f000 f861 	bl	80018c8 <HAL_PWREx_SMPS_GetEffectiveMode>
 8001806:	4603      	mov	r3, r0
 8001808:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800180c:	d101      	bne.n	8001812 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e03e      	b.n	8001890 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8001812:	4b21      	ldr	r3, [pc, #132]	; (8001898 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800181a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800181e:	d101      	bne.n	8001824 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e035      	b.n	8001890 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8001824:	68ba      	ldr	r2, [r7, #8]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	429a      	cmp	r2, r3
 800182a:	d101      	bne.n	8001830 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 800182c:	2300      	movs	r3, #0
 800182e:	e02f      	b.n	8001890 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001830:	4b19      	ldr	r3, [pc, #100]	; (8001898 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8001838:	4917      	ldr	r1, [pc, #92]	; (8001898 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4313      	orrs	r3, r2
 800183e:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8001840:	4b16      	ldr	r3, [pc, #88]	; (800189c <HAL_PWREx_ControlVoltageScaling+0xac>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	095b      	lsrs	r3, r3, #5
 8001846:	4a16      	ldr	r2, [pc, #88]	; (80018a0 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001848:	fba2 2303 	umull	r2, r3, r2, r3
 800184c:	09db      	lsrs	r3, r3, #7
 800184e:	2232      	movs	r2, #50	; 0x32
 8001850:	fb02 f303 	mul.w	r3, r2, r3
 8001854:	4a13      	ldr	r2, [pc, #76]	; (80018a4 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8001856:	fba2 2303 	umull	r2, r3, r2, r3
 800185a:	08db      	lsrs	r3, r3, #3
 800185c:	3301      	adds	r3, #1
 800185e:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001860:	e002      	b.n	8001868 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	3b01      	subs	r3, #1
 8001866:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001868:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800186a:	695b      	ldr	r3, [r3, #20]
 800186c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001870:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001874:	d102      	bne.n	800187c <HAL_PWREx_ControlVoltageScaling+0x8c>
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1f2      	bne.n	8001862 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800187e:	695b      	ldr	r3, [r3, #20]
 8001880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001884:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001888:	d101      	bne.n	800188e <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e000      	b.n	8001890 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40007000 	.word	0x40007000
 800189c:	20000000 	.word	0x20000000
 80018a0:	0a7c5ac5 	.word	0x0a7c5ac5
 80018a4:	cccccccd 	.word	0xcccccccd

080018a8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80018ac:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	4a04      	ldr	r2, [pc, #16]	; (80018c4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80018b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b6:	6093      	str	r3, [r2, #8]
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	40007000 	.word	0x40007000

080018c8 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 80018ce:	4b0f      	ldr	r3, [pc, #60]	; (800190c <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 80018de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018e2:	607b      	str	r3, [r7, #4]
 80018e4:	e00a      	b.n	80018fc <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d103      	bne.n	80018f8 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 80018f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018f4:	607b      	str	r3, [r7, #4]
 80018f6:	e001      	b.n	80018fc <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 80018f8:	2300      	movs	r3, #0
 80018fa:	607b      	str	r3, [r7, #4]
  }

  return mode;
 80018fc:	687b      	ldr	r3, [r7, #4]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	40007000 	.word	0x40007000

08001910 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b088      	sub	sp, #32
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d102      	bne.n	8001924 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	f000 bc52 	b.w	80021c8 <HAL_RCC_OscConfig+0x8b8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001924:	4ba3      	ldr	r3, [pc, #652]	; (8001bb4 <HAL_RCC_OscConfig+0x2a4>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f003 030c 	and.w	r3, r3, #12
 800192c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800192e:	4ba1      	ldr	r3, [pc, #644]	; (8001bb4 <HAL_RCC_OscConfig+0x2a4>)
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	f003 0303 	and.w	r3, r3, #3
 8001936:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0310 	and.w	r3, r3, #16
 8001940:	2b00      	cmp	r3, #0
 8001942:	f000 80da 	beq.w	8001afa <HAL_RCC_OscConfig+0x1ea>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d006      	beq.n	800195a <HAL_RCC_OscConfig+0x4a>
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	2b0c      	cmp	r3, #12
 8001950:	f040 8081 	bne.w	8001a56 <HAL_RCC_OscConfig+0x146>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d17d      	bne.n	8001a56 <HAL_RCC_OscConfig+0x146>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800195a:	4b96      	ldr	r3, [pc, #600]	; (8001bb4 <HAL_RCC_OscConfig+0x2a4>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d006      	beq.n	8001974 <HAL_RCC_OscConfig+0x64>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d102      	bne.n	8001974 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	f000 bc2a 	b.w	80021c8 <HAL_RCC_OscConfig+0x8b8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001978:	4b8e      	ldr	r3, [pc, #568]	; (8001bb4 <HAL_RCC_OscConfig+0x2a4>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0308 	and.w	r3, r3, #8
 8001980:	2b00      	cmp	r3, #0
 8001982:	d004      	beq.n	800198e <HAL_RCC_OscConfig+0x7e>
 8001984:	4b8b      	ldr	r3, [pc, #556]	; (8001bb4 <HAL_RCC_OscConfig+0x2a4>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800198c:	e005      	b.n	800199a <HAL_RCC_OscConfig+0x8a>
 800198e:	4b89      	ldr	r3, [pc, #548]	; (8001bb4 <HAL_RCC_OscConfig+0x2a4>)
 8001990:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001994:	091b      	lsrs	r3, r3, #4
 8001996:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800199a:	4293      	cmp	r3, r2
 800199c:	d224      	bcs.n	80019e8 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a2:	4618      	mov	r0, r3
 80019a4:	f000 fe0c 	bl	80025c0 <RCC_SetFlashLatencyFromMSIRange>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d002      	beq.n	80019b4 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	f000 bc0a 	b.w	80021c8 <HAL_RCC_OscConfig+0x8b8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019b4:	4b7f      	ldr	r3, [pc, #508]	; (8001bb4 <HAL_RCC_OscConfig+0x2a4>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a7e      	ldr	r2, [pc, #504]	; (8001bb4 <HAL_RCC_OscConfig+0x2a4>)
 80019ba:	f043 0308 	orr.w	r3, r3, #8
 80019be:	6013      	str	r3, [r2, #0]
 80019c0:	4b7c      	ldr	r3, [pc, #496]	; (8001bb4 <HAL_RCC_OscConfig+0x2a4>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019cc:	4979      	ldr	r1, [pc, #484]	; (8001bb4 <HAL_RCC_OscConfig+0x2a4>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019d2:	4b78      	ldr	r3, [pc, #480]	; (8001bb4 <HAL_RCC_OscConfig+0x2a4>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a1b      	ldr	r3, [r3, #32]
 80019de:	021b      	lsls	r3, r3, #8
 80019e0:	4974      	ldr	r1, [pc, #464]	; (8001bb4 <HAL_RCC_OscConfig+0x2a4>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	604b      	str	r3, [r1, #4]
 80019e6:	e025      	b.n	8001a34 <HAL_RCC_OscConfig+0x124>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019e8:	4b72      	ldr	r3, [pc, #456]	; (8001bb4 <HAL_RCC_OscConfig+0x2a4>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a71      	ldr	r2, [pc, #452]	; (8001bb4 <HAL_RCC_OscConfig+0x2a4>)
 80019ee:	f043 0308 	orr.w	r3, r3, #8
 80019f2:	6013      	str	r3, [r2, #0]
 80019f4:	4b6f      	ldr	r3, [pc, #444]	; (8001bb4 <HAL_RCC_OscConfig+0x2a4>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a00:	496c      	ldr	r1, [pc, #432]	; (8001bb4 <HAL_RCC_OscConfig+0x2a4>)
 8001a02:	4313      	orrs	r3, r2
 8001a04:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a06:	4b6b      	ldr	r3, [pc, #428]	; (8001bb4 <HAL_RCC_OscConfig+0x2a4>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a1b      	ldr	r3, [r3, #32]
 8001a12:	021b      	lsls	r3, r3, #8
 8001a14:	4967      	ldr	r1, [pc, #412]	; (8001bb4 <HAL_RCC_OscConfig+0x2a4>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d109      	bne.n	8001a34 <HAL_RCC_OscConfig+0x124>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a24:	4618      	mov	r0, r3
 8001a26:	f000 fdcb 	bl	80025c0 <RCC_SetFlashLatencyFromMSIRange>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <HAL_RCC_OscConfig+0x124>
            {
              return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e3c9      	b.n	80021c8 <HAL_RCC_OscConfig+0x8b8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001a34:	f000 fd88 	bl	8002548 <HAL_RCC_GetHCLKFreq>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	4b5f      	ldr	r3, [pc, #380]	; (8001bb8 <HAL_RCC_OscConfig+0x2a8>)
 8001a3c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a3e:	4b5f      	ldr	r3, [pc, #380]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff fb86 	bl	8001154 <HAL_InitTick>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8001a4c:	7bfb      	ldrb	r3, [r7, #15]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d052      	beq.n	8001af8 <HAL_RCC_OscConfig+0x1e8>
        {
          return status;
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
 8001a54:	e3b8      	b.n	80021c8 <HAL_RCC_OscConfig+0x8b8>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d032      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x1b4>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a5e:	4b55      	ldr	r3, [pc, #340]	; (8001bb4 <HAL_RCC_OscConfig+0x2a4>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a54      	ldr	r2, [pc, #336]	; (8001bb4 <HAL_RCC_OscConfig+0x2a4>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a6a:	f7ff fbc3 	bl	80011f4 <HAL_GetTick>
 8001a6e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a70:	e008      	b.n	8001a84 <HAL_RCC_OscConfig+0x174>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a72:	f7ff fbbf 	bl	80011f4 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x174>
          {
            return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e3a1      	b.n	80021c8 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a84:	4b4b      	ldr	r3, [pc, #300]	; (8001bb4 <HAL_RCC_OscConfig+0x2a4>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d0f0      	beq.n	8001a72 <HAL_RCC_OscConfig+0x162>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a90:	4b48      	ldr	r3, [pc, #288]	; (8001bb4 <HAL_RCC_OscConfig+0x2a4>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a47      	ldr	r2, [pc, #284]	; (8001bb4 <HAL_RCC_OscConfig+0x2a4>)
 8001a96:	f043 0308 	orr.w	r3, r3, #8
 8001a9a:	6013      	str	r3, [r2, #0]
 8001a9c:	4b45      	ldr	r3, [pc, #276]	; (8001bb4 <HAL_RCC_OscConfig+0x2a4>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa8:	4942      	ldr	r1, [pc, #264]	; (8001bb4 <HAL_RCC_OscConfig+0x2a4>)
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001aae:	4b41      	ldr	r3, [pc, #260]	; (8001bb4 <HAL_RCC_OscConfig+0x2a4>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a1b      	ldr	r3, [r3, #32]
 8001aba:	021b      	lsls	r3, r3, #8
 8001abc:	493d      	ldr	r1, [pc, #244]	; (8001bb4 <HAL_RCC_OscConfig+0x2a4>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	604b      	str	r3, [r1, #4]
 8001ac2:	e01a      	b.n	8001afa <HAL_RCC_OscConfig+0x1ea>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ac4:	4b3b      	ldr	r3, [pc, #236]	; (8001bb4 <HAL_RCC_OscConfig+0x2a4>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a3a      	ldr	r2, [pc, #232]	; (8001bb4 <HAL_RCC_OscConfig+0x2a4>)
 8001aca:	f023 0301 	bic.w	r3, r3, #1
 8001ace:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ad0:	f7ff fb90 	bl	80011f4 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x1da>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ad8:	f7ff fb8c 	bl	80011f4 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x1da>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e36e      	b.n	80021c8 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001aea:	4b32      	ldr	r3, [pc, #200]	; (8001bb4 <HAL_RCC_OscConfig+0x2a4>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1f0      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x1c8>
 8001af6:	e000      	b.n	8001afa <HAL_RCC_OscConfig+0x1ea>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001af8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d071      	beq.n	8001bea <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	2b08      	cmp	r3, #8
 8001b0a:	d005      	beq.n	8001b18 <HAL_RCC_OscConfig+0x208>
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	2b0c      	cmp	r3, #12
 8001b10:	d10e      	bne.n	8001b30 <HAL_RCC_OscConfig+0x220>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	2b03      	cmp	r3, #3
 8001b16:	d10b      	bne.n	8001b30 <HAL_RCC_OscConfig+0x220>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b18:	4b26      	ldr	r3, [pc, #152]	; (8001bb4 <HAL_RCC_OscConfig+0x2a4>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d061      	beq.n	8001be8 <HAL_RCC_OscConfig+0x2d8>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d15d      	bne.n	8001be8 <HAL_RCC_OscConfig+0x2d8>
      {
        return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e34b      	b.n	80021c8 <HAL_RCC_OscConfig+0x8b8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b38:	d106      	bne.n	8001b48 <HAL_RCC_OscConfig+0x238>
 8001b3a:	4b1e      	ldr	r3, [pc, #120]	; (8001bb4 <HAL_RCC_OscConfig+0x2a4>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a1d      	ldr	r2, [pc, #116]	; (8001bb4 <HAL_RCC_OscConfig+0x2a4>)
 8001b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	e01d      	b.n	8001b84 <HAL_RCC_OscConfig+0x274>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b50:	d10c      	bne.n	8001b6c <HAL_RCC_OscConfig+0x25c>
 8001b52:	4b18      	ldr	r3, [pc, #96]	; (8001bb4 <HAL_RCC_OscConfig+0x2a4>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a17      	ldr	r2, [pc, #92]	; (8001bb4 <HAL_RCC_OscConfig+0x2a4>)
 8001b58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b5c:	6013      	str	r3, [r2, #0]
 8001b5e:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <HAL_RCC_OscConfig+0x2a4>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a14      	ldr	r2, [pc, #80]	; (8001bb4 <HAL_RCC_OscConfig+0x2a4>)
 8001b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	e00b      	b.n	8001b84 <HAL_RCC_OscConfig+0x274>
 8001b6c:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <HAL_RCC_OscConfig+0x2a4>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a10      	ldr	r2, [pc, #64]	; (8001bb4 <HAL_RCC_OscConfig+0x2a4>)
 8001b72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b76:	6013      	str	r3, [r2, #0]
 8001b78:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <HAL_RCC_OscConfig+0x2a4>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a0d      	ldr	r2, [pc, #52]	; (8001bb4 <HAL_RCC_OscConfig+0x2a4>)
 8001b7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d019      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x2b0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b8c:	f7ff fb32 	bl	80011f4 <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x296>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b94:	f7ff fb2e 	bl	80011f4 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b64      	cmp	r3, #100	; 0x64
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x296>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e310      	b.n	80021c8 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ba6:	4b03      	ldr	r3, [pc, #12]	; (8001bb4 <HAL_RCC_OscConfig+0x2a4>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d0f0      	beq.n	8001b94 <HAL_RCC_OscConfig+0x284>
 8001bb2:	e01a      	b.n	8001bea <HAL_RCC_OscConfig+0x2da>
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	20000000 	.word	0x20000000
 8001bbc:	20000004 	.word	0x20000004
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc0:	f7ff fb18 	bl	80011f4 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x2ca>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc8:	f7ff fb14 	bl	80011f4 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b64      	cmp	r3, #100	; 0x64
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x2ca>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e2f6      	b.n	80021c8 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bda:	4ba6      	ldr	r3, [pc, #664]	; (8001e74 <HAL_RCC_OscConfig+0x564>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f0      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x2b8>
 8001be6:	e000      	b.n	8001bea <HAL_RCC_OscConfig+0x2da>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d060      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x3a8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	2b04      	cmp	r3, #4
 8001bfa:	d005      	beq.n	8001c08 <HAL_RCC_OscConfig+0x2f8>
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	2b0c      	cmp	r3, #12
 8001c00:	d119      	bne.n	8001c36 <HAL_RCC_OscConfig+0x326>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d116      	bne.n	8001c36 <HAL_RCC_OscConfig+0x326>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c08:	4b9a      	ldr	r3, [pc, #616]	; (8001e74 <HAL_RCC_OscConfig+0x564>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d005      	beq.n	8001c20 <HAL_RCC_OscConfig+0x310>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e2d3      	b.n	80021c8 <HAL_RCC_OscConfig+0x8b8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c20:	4b94      	ldr	r3, [pc, #592]	; (8001e74 <HAL_RCC_OscConfig+0x564>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	061b      	lsls	r3, r3, #24
 8001c2e:	4991      	ldr	r1, [pc, #580]	; (8001e74 <HAL_RCC_OscConfig+0x564>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c34:	e040      	b.n	8001cb8 <HAL_RCC_OscConfig+0x3a8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d023      	beq.n	8001c86 <HAL_RCC_OscConfig+0x376>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c3e:	4b8d      	ldr	r3, [pc, #564]	; (8001e74 <HAL_RCC_OscConfig+0x564>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a8c      	ldr	r2, [pc, #560]	; (8001e74 <HAL_RCC_OscConfig+0x564>)
 8001c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4a:	f7ff fad3 	bl	80011f4 <HAL_GetTick>
 8001c4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c50:	e008      	b.n	8001c64 <HAL_RCC_OscConfig+0x354>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c52:	f7ff facf 	bl	80011f4 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e2b1      	b.n	80021c8 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c64:	4b83      	ldr	r3, [pc, #524]	; (8001e74 <HAL_RCC_OscConfig+0x564>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d0f0      	beq.n	8001c52 <HAL_RCC_OscConfig+0x342>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c70:	4b80      	ldr	r3, [pc, #512]	; (8001e74 <HAL_RCC_OscConfig+0x564>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	061b      	lsls	r3, r3, #24
 8001c7e:	497d      	ldr	r1, [pc, #500]	; (8001e74 <HAL_RCC_OscConfig+0x564>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	604b      	str	r3, [r1, #4]
 8001c84:	e018      	b.n	8001cb8 <HAL_RCC_OscConfig+0x3a8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c86:	4b7b      	ldr	r3, [pc, #492]	; (8001e74 <HAL_RCC_OscConfig+0x564>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a7a      	ldr	r2, [pc, #488]	; (8001e74 <HAL_RCC_OscConfig+0x564>)
 8001c8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c92:	f7ff faaf 	bl	80011f4 <HAL_GetTick>
 8001c96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c98:	e008      	b.n	8001cac <HAL_RCC_OscConfig+0x39c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c9a:	f7ff faab 	bl	80011f4 <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e28d      	b.n	80021c8 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cac:	4b71      	ldr	r3, [pc, #452]	; (8001e74 <HAL_RCC_OscConfig+0x564>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1f0      	bne.n	8001c9a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0308 	and.w	r3, r3, #8
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d051      	beq.n	8001d68 <HAL_RCC_OscConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	695b      	ldr	r3, [r3, #20]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d031      	beq.n	8001d30 <HAL_RCC_OscConfig+0x420>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d108      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x3d6>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8001cd4:	4b67      	ldr	r3, [pc, #412]	; (8001e74 <HAL_RCC_OscConfig+0x564>)
 8001cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cda:	4a66      	ldr	r2, [pc, #408]	; (8001e74 <HAL_RCC_OscConfig+0x564>)
 8001cdc:	f023 0310 	bic.w	r3, r3, #16
 8001ce0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001ce4:	e007      	b.n	8001cf6 <HAL_RCC_OscConfig+0x3e6>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8001ce6:	4b63      	ldr	r3, [pc, #396]	; (8001e74 <HAL_RCC_OscConfig+0x564>)
 8001ce8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cec:	4a61      	ldr	r2, [pc, #388]	; (8001e74 <HAL_RCC_OscConfig+0x564>)
 8001cee:	f043 0310 	orr.w	r3, r3, #16
 8001cf2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cf6:	4b5f      	ldr	r3, [pc, #380]	; (8001e74 <HAL_RCC_OscConfig+0x564>)
 8001cf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cfc:	4a5d      	ldr	r2, [pc, #372]	; (8001e74 <HAL_RCC_OscConfig+0x564>)
 8001cfe:	f043 0301 	orr.w	r3, r3, #1
 8001d02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d06:	f7ff fa75 	bl	80011f4 <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d0e:	f7ff fa71 	bl	80011f4 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b07      	cmp	r3, #7
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e253      	b.n	80021c8 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d20:	4b54      	ldr	r3, [pc, #336]	; (8001e74 <HAL_RCC_OscConfig+0x564>)
 8001d22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0ef      	beq.n	8001d0e <HAL_RCC_OscConfig+0x3fe>
 8001d2e:	e01b      	b.n	8001d68 <HAL_RCC_OscConfig+0x458>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d30:	4b50      	ldr	r3, [pc, #320]	; (8001e74 <HAL_RCC_OscConfig+0x564>)
 8001d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d36:	4a4f      	ldr	r2, [pc, #316]	; (8001e74 <HAL_RCC_OscConfig+0x564>)
 8001d38:	f023 0301 	bic.w	r3, r3, #1
 8001d3c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d40:	f7ff fa58 	bl	80011f4 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x44a>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d48:	f7ff fa54 	bl	80011f4 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b07      	cmp	r3, #7
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e236      	b.n	80021c8 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d5a:	4b46      	ldr	r3, [pc, #280]	; (8001e74 <HAL_RCC_OscConfig+0x564>)
 8001d5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1ef      	bne.n	8001d48 <HAL_RCC_OscConfig+0x438>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f000 8109 	beq.w	8001f88 <HAL_RCC_OscConfig+0x678>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d76:	2300      	movs	r3, #0
 8001d78:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d7a:	4b3e      	ldr	r3, [pc, #248]	; (8001e74 <HAL_RCC_OscConfig+0x564>)
 8001d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10d      	bne.n	8001da2 <HAL_RCC_OscConfig+0x492>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d86:	4b3b      	ldr	r3, [pc, #236]	; (8001e74 <HAL_RCC_OscConfig+0x564>)
 8001d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8a:	4a3a      	ldr	r2, [pc, #232]	; (8001e74 <HAL_RCC_OscConfig+0x564>)
 8001d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d90:	6593      	str	r3, [r2, #88]	; 0x58
 8001d92:	4b38      	ldr	r3, [pc, #224]	; (8001e74 <HAL_RCC_OscConfig+0x564>)
 8001d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9a:	60bb      	str	r3, [r7, #8]
 8001d9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001da2:	4b35      	ldr	r3, [pc, #212]	; (8001e78 <HAL_RCC_OscConfig+0x568>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d118      	bne.n	8001de0 <HAL_RCC_OscConfig+0x4d0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dae:	4b32      	ldr	r3, [pc, #200]	; (8001e78 <HAL_RCC_OscConfig+0x568>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a31      	ldr	r2, [pc, #196]	; (8001e78 <HAL_RCC_OscConfig+0x568>)
 8001db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dba:	f7ff fa1b 	bl	80011f4 <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCC_OscConfig+0x4c4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dc2:	f7ff fa17 	bl	80011f4 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x4c4>
        {
          return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e1f9      	b.n	80021c8 <HAL_RCC_OscConfig+0x8b8>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dd4:	4b28      	ldr	r3, [pc, #160]	; (8001e78 <HAL_RCC_OscConfig+0x568>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d0f0      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d01f      	beq.n	8001e2c <HAL_RCC_OscConfig+0x51c>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f003 0304 	and.w	r3, r3, #4
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d010      	beq.n	8001e1a <HAL_RCC_OscConfig+0x50a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001df8:	4b1e      	ldr	r3, [pc, #120]	; (8001e74 <HAL_RCC_OscConfig+0x564>)
 8001dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dfe:	4a1d      	ldr	r2, [pc, #116]	; (8001e74 <HAL_RCC_OscConfig+0x564>)
 8001e00:	f043 0304 	orr.w	r3, r3, #4
 8001e04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001e08:	4b1a      	ldr	r3, [pc, #104]	; (8001e74 <HAL_RCC_OscConfig+0x564>)
 8001e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e0e:	4a19      	ldr	r2, [pc, #100]	; (8001e74 <HAL_RCC_OscConfig+0x564>)
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e18:	e018      	b.n	8001e4c <HAL_RCC_OscConfig+0x53c>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001e1a:	4b16      	ldr	r3, [pc, #88]	; (8001e74 <HAL_RCC_OscConfig+0x564>)
 8001e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e20:	4a14      	ldr	r2, [pc, #80]	; (8001e74 <HAL_RCC_OscConfig+0x564>)
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e2a:	e00f      	b.n	8001e4c <HAL_RCC_OscConfig+0x53c>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001e2c:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <HAL_RCC_OscConfig+0x564>)
 8001e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e32:	4a10      	ldr	r2, [pc, #64]	; (8001e74 <HAL_RCC_OscConfig+0x564>)
 8001e34:	f023 0301 	bic.w	r3, r3, #1
 8001e38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001e3c:	4b0d      	ldr	r3, [pc, #52]	; (8001e74 <HAL_RCC_OscConfig+0x564>)
 8001e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e42:	4a0c      	ldr	r2, [pc, #48]	; (8001e74 <HAL_RCC_OscConfig+0x564>)
 8001e44:	f023 0304 	bic.w	r3, r3, #4
 8001e48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d058      	beq.n	8001f06 <HAL_RCC_OscConfig+0x5f6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e54:	f7ff f9ce 	bl	80011f4 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e5a:	e00f      	b.n	8001e7c <HAL_RCC_OscConfig+0x56c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e5c:	f7ff f9ca 	bl	80011f4 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d906      	bls.n	8001e7c <HAL_RCC_OscConfig+0x56c>
        {
          return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e1aa      	b.n	80021c8 <HAL_RCC_OscConfig+0x8b8>
 8001e72:	bf00      	nop
 8001e74:	40021000 	.word	0x40021000
 8001e78:	40007000 	.word	0x40007000
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e7c:	4bb0      	ldr	r3, [pc, #704]	; (8002140 <HAL_RCC_OscConfig+0x830>)
 8001e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0e8      	beq.n	8001e5c <HAL_RCC_OscConfig+0x54c>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d01b      	beq.n	8001ece <HAL_RCC_OscConfig+0x5be>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001e96:	4baa      	ldr	r3, [pc, #680]	; (8002140 <HAL_RCC_OscConfig+0x830>)
 8001e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e9c:	4aa8      	ldr	r2, [pc, #672]	; (8002140 <HAL_RCC_OscConfig+0x830>)
 8001e9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ea2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001ea6:	e00a      	b.n	8001ebe <HAL_RCC_OscConfig+0x5ae>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ea8:	f7ff f9a4 	bl	80011f4 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x5ae>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e184      	b.n	80021c8 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001ebe:	4ba0      	ldr	r3, [pc, #640]	; (8002140 <HAL_RCC_OscConfig+0x830>)
 8001ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d0ed      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x598>
 8001ecc:	e053      	b.n	8001f76 <HAL_RCC_OscConfig+0x666>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001ece:	4b9c      	ldr	r3, [pc, #624]	; (8002140 <HAL_RCC_OscConfig+0x830>)
 8001ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ed4:	4a9a      	ldr	r2, [pc, #616]	; (8002140 <HAL_RCC_OscConfig+0x830>)
 8001ed6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001eda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001ede:	e00a      	b.n	8001ef6 <HAL_RCC_OscConfig+0x5e6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee0:	f7ff f988 	bl	80011f4 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e168      	b.n	80021c8 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001ef6:	4b92      	ldr	r3, [pc, #584]	; (8002140 <HAL_RCC_OscConfig+0x830>)
 8001ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001efc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d1ed      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x5d0>
 8001f04:	e037      	b.n	8001f76 <HAL_RCC_OscConfig+0x666>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f06:	f7ff f975 	bl	80011f4 <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f0c:	e00a      	b.n	8001f24 <HAL_RCC_OscConfig+0x614>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f0e:	f7ff f971 	bl	80011f4 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e151      	b.n	80021c8 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f24:	4b86      	ldr	r3, [pc, #536]	; (8002140 <HAL_RCC_OscConfig+0x830>)
 8001f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1ed      	bne.n	8001f0e <HAL_RCC_OscConfig+0x5fe>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001f32:	4b83      	ldr	r3, [pc, #524]	; (8002140 <HAL_RCC_OscConfig+0x830>)
 8001f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d01a      	beq.n	8001f76 <HAL_RCC_OscConfig+0x666>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001f40:	4b7f      	ldr	r3, [pc, #508]	; (8002140 <HAL_RCC_OscConfig+0x830>)
 8001f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f46:	4a7e      	ldr	r2, [pc, #504]	; (8002140 <HAL_RCC_OscConfig+0x830>)
 8001f48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001f50:	e00a      	b.n	8001f68 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f52:	f7ff f94f 	bl	80011f4 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e12f      	b.n	80021c8 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001f68:	4b75      	ldr	r3, [pc, #468]	; (8002140 <HAL_RCC_OscConfig+0x830>)
 8001f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1ed      	bne.n	8001f52 <HAL_RCC_OscConfig+0x642>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f76:	7ffb      	ldrb	r3, [r7, #31]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d105      	bne.n	8001f88 <HAL_RCC_OscConfig+0x678>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f7c:	4b70      	ldr	r3, [pc, #448]	; (8002140 <HAL_RCC_OscConfig+0x830>)
 8001f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f80:	4a6f      	ldr	r2, [pc, #444]	; (8002140 <HAL_RCC_OscConfig+0x830>)
 8001f82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f86:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0320 	and.w	r3, r3, #32
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d03c      	beq.n	800200e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d01c      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x6c6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f9c:	4b68      	ldr	r3, [pc, #416]	; (8002140 <HAL_RCC_OscConfig+0x830>)
 8001f9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fa2:	4a67      	ldr	r2, [pc, #412]	; (8002140 <HAL_RCC_OscConfig+0x830>)
 8001fa4:	f043 0301 	orr.w	r3, r3, #1
 8001fa8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fac:	f7ff f922 	bl	80011f4 <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x6b6>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fb4:	f7ff f91e 	bl	80011f4 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e100      	b.n	80021c8 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001fc6:	4b5e      	ldr	r3, [pc, #376]	; (8002140 <HAL_RCC_OscConfig+0x830>)
 8001fc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d0ef      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x6a4>
 8001fd4:	e01b      	b.n	800200e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001fd6:	4b5a      	ldr	r3, [pc, #360]	; (8002140 <HAL_RCC_OscConfig+0x830>)
 8001fd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fdc:	4a58      	ldr	r2, [pc, #352]	; (8002140 <HAL_RCC_OscConfig+0x830>)
 8001fde:	f023 0301 	bic.w	r3, r3, #1
 8001fe2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe6:	f7ff f905 	bl	80011f4 <HAL_GetTick>
 8001fea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x6f0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fee:	f7ff f901 	bl	80011f4 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e0e3      	b.n	80021c8 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002000:	4b4f      	ldr	r3, [pc, #316]	; (8002140 <HAL_RCC_OscConfig+0x830>)
 8002002:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1ef      	bne.n	8001fee <HAL_RCC_OscConfig+0x6de>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002012:	2b00      	cmp	r3, #0
 8002014:	f000 80d7 	beq.w	80021c6 <HAL_RCC_OscConfig+0x8b6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002018:	4b49      	ldr	r3, [pc, #292]	; (8002140 <HAL_RCC_OscConfig+0x830>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f003 030c 	and.w	r3, r3, #12
 8002020:	2b0c      	cmp	r3, #12
 8002022:	f000 8091 	beq.w	8002148 <HAL_RCC_OscConfig+0x838>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202a:	2b02      	cmp	r3, #2
 800202c:	d15a      	bne.n	80020e4 <HAL_RCC_OscConfig+0x7d4>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800202e:	4b44      	ldr	r3, [pc, #272]	; (8002140 <HAL_RCC_OscConfig+0x830>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a43      	ldr	r2, [pc, #268]	; (8002140 <HAL_RCC_OscConfig+0x830>)
 8002034:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002038:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203a:	f7ff f8db 	bl	80011f4 <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002040:	e008      	b.n	8002054 <HAL_RCC_OscConfig+0x744>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002042:	f7ff f8d7 	bl	80011f4 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x744>
          {
            return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e0b9      	b.n	80021c8 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002054:	4b3a      	ldr	r3, [pc, #232]	; (8002140 <HAL_RCC_OscConfig+0x830>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1f0      	bne.n	8002042 <HAL_RCC_OscConfig+0x732>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002060:	4b37      	ldr	r3, [pc, #220]	; (8002140 <HAL_RCC_OscConfig+0x830>)
 8002062:	68da      	ldr	r2, [r3, #12]
 8002064:	4b37      	ldr	r3, [pc, #220]	; (8002144 <HAL_RCC_OscConfig+0x834>)
 8002066:	4013      	ands	r3, r2
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002070:	3a01      	subs	r2, #1
 8002072:	0112      	lsls	r2, r2, #4
 8002074:	4311      	orrs	r1, r2
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800207a:	0212      	lsls	r2, r2, #8
 800207c:	4311      	orrs	r1, r2
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002082:	0852      	lsrs	r2, r2, #1
 8002084:	3a01      	subs	r2, #1
 8002086:	0552      	lsls	r2, r2, #21
 8002088:	4311      	orrs	r1, r2
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800208e:	0852      	lsrs	r2, r2, #1
 8002090:	3a01      	subs	r2, #1
 8002092:	0652      	lsls	r2, r2, #25
 8002094:	4311      	orrs	r1, r2
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800209a:	06d2      	lsls	r2, r2, #27
 800209c:	430a      	orrs	r2, r1
 800209e:	4928      	ldr	r1, [pc, #160]	; (8002140 <HAL_RCC_OscConfig+0x830>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020a4:	4b26      	ldr	r3, [pc, #152]	; (8002140 <HAL_RCC_OscConfig+0x830>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a25      	ldr	r2, [pc, #148]	; (8002140 <HAL_RCC_OscConfig+0x830>)
 80020aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020b0:	4b23      	ldr	r3, [pc, #140]	; (8002140 <HAL_RCC_OscConfig+0x830>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	4a22      	ldr	r2, [pc, #136]	; (8002140 <HAL_RCC_OscConfig+0x830>)
 80020b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020bc:	f7ff f89a 	bl	80011f4 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0x7c6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c4:	f7ff f896 	bl	80011f4 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x7c6>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e078      	b.n	80021c8 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020d6:	4b1a      	ldr	r3, [pc, #104]	; (8002140 <HAL_RCC_OscConfig+0x830>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d0f0      	beq.n	80020c4 <HAL_RCC_OscConfig+0x7b4>
 80020e2:	e070      	b.n	80021c6 <HAL_RCC_OscConfig+0x8b6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020e4:	4b16      	ldr	r3, [pc, #88]	; (8002140 <HAL_RCC_OscConfig+0x830>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a15      	ldr	r2, [pc, #84]	; (8002140 <HAL_RCC_OscConfig+0x830>)
 80020ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020ee:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80020f0:	4b13      	ldr	r3, [pc, #76]	; (8002140 <HAL_RCC_OscConfig+0x830>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d105      	bne.n	8002108 <HAL_RCC_OscConfig+0x7f8>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80020fc:	4b10      	ldr	r3, [pc, #64]	; (8002140 <HAL_RCC_OscConfig+0x830>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	4a0f      	ldr	r2, [pc, #60]	; (8002140 <HAL_RCC_OscConfig+0x830>)
 8002102:	f023 0303 	bic.w	r3, r3, #3
 8002106:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002108:	4b0d      	ldr	r3, [pc, #52]	; (8002140 <HAL_RCC_OscConfig+0x830>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	4a0c      	ldr	r2, [pc, #48]	; (8002140 <HAL_RCC_OscConfig+0x830>)
 800210e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002112:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002116:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002118:	f7ff f86c 	bl	80011f4 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0x822>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002120:	f7ff f868 	bl	80011f4 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x822>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e04a      	b.n	80021c8 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002132:	4b03      	ldr	r3, [pc, #12]	; (8002140 <HAL_RCC_OscConfig+0x830>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1f0      	bne.n	8002120 <HAL_RCC_OscConfig+0x810>
 800213e:	e042      	b.n	80021c6 <HAL_RCC_OscConfig+0x8b6>
 8002140:	40021000 	.word	0x40021000
 8002144:	019f800c 	.word	0x019f800c
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214c:	2b01      	cmp	r3, #1
 800214e:	d101      	bne.n	8002154 <HAL_RCC_OscConfig+0x844>
      {
        return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e039      	b.n	80021c8 <HAL_RCC_OscConfig+0x8b8>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8002154:	4b1e      	ldr	r3, [pc, #120]	; (80021d0 <HAL_RCC_OscConfig+0x8c0>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	f003 0203 	and.w	r2, r3, #3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002164:	429a      	cmp	r2, r3
 8002166:	d12c      	bne.n	80021c2 <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002172:	3b01      	subs	r3, #1
 8002174:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002176:	429a      	cmp	r2, r3
 8002178:	d123      	bne.n	80021c2 <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002184:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002186:	429a      	cmp	r2, r3
 8002188:	d11b      	bne.n	80021c2 <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002194:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002196:	429a      	cmp	r2, r3
 8002198:	d113      	bne.n	80021c2 <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	085b      	lsrs	r3, r3, #1
 80021a6:	3b01      	subs	r3, #1
 80021a8:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d109      	bne.n	80021c2 <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b8:	085b      	lsrs	r3, r3, #1
 80021ba:	3b01      	subs	r3, #1
 80021bc:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021be:	429a      	cmp	r2, r3
 80021c0:	d001      	beq.n	80021c6 <HAL_RCC_OscConfig+0x8b6>
        {
          return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e000      	b.n	80021c8 <HAL_RCC_OscConfig+0x8b8>
        }
      }
    }
  }

  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3720      	adds	r7, #32
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40021000 	.word	0x40021000

080021d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e104      	b.n	80023f6 <HAL_RCC_ClockConfig+0x222>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021ec:	4b84      	ldr	r3, [pc, #528]	; (8002400 <HAL_RCC_ClockConfig+0x22c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 030f 	and.w	r3, r3, #15
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d910      	bls.n	800221c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021fa:	4b81      	ldr	r3, [pc, #516]	; (8002400 <HAL_RCC_ClockConfig+0x22c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f023 020f 	bic.w	r2, r3, #15
 8002202:	497f      	ldr	r1, [pc, #508]	; (8002400 <HAL_RCC_ClockConfig+0x22c>)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	4313      	orrs	r3, r2
 8002208:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800220a:	4b7d      	ldr	r3, [pc, #500]	; (8002400 <HAL_RCC_ClockConfig+0x22c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	429a      	cmp	r2, r3
 8002216:	d001      	beq.n	800221c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e0ec      	b.n	80023f6 <HAL_RCC_ClockConfig+0x222>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b00      	cmp	r3, #0
 8002226:	f000 808b 	beq.w	8002340 <HAL_RCC_ClockConfig+0x16c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b03      	cmp	r3, #3
 8002230:	d134      	bne.n	800229c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002232:	4b74      	ldr	r3, [pc, #464]	; (8002404 <HAL_RCC_ClockConfig+0x230>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e0d9      	b.n	80023f6 <HAL_RCC_ClockConfig+0x222>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002242:	f000 fa21 	bl	8002688 <RCC_GetSysClockFreqFromPLLSource>
 8002246:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	4a6f      	ldr	r2, [pc, #444]	; (8002408 <HAL_RCC_ClockConfig+0x234>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d956      	bls.n	80022fe <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002250:	4b6c      	ldr	r3, [pc, #432]	; (8002404 <HAL_RCC_ClockConfig+0x230>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d10a      	bne.n	8002272 <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800225c:	4b69      	ldr	r3, [pc, #420]	; (8002404 <HAL_RCC_ClockConfig+0x230>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002264:	4a67      	ldr	r2, [pc, #412]	; (8002404 <HAL_RCC_ClockConfig+0x230>)
 8002266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800226a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800226c:	2380      	movs	r3, #128	; 0x80
 800226e:	617b      	str	r3, [r7, #20]
 8002270:	e045      	b.n	80022fe <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d03f      	beq.n	80022fe <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002282:	2b00      	cmp	r3, #0
 8002284:	d13b      	bne.n	80022fe <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002286:	4b5f      	ldr	r3, [pc, #380]	; (8002404 <HAL_RCC_ClockConfig+0x230>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800228e:	4a5d      	ldr	r2, [pc, #372]	; (8002404 <HAL_RCC_ClockConfig+0x230>)
 8002290:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002294:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002296:	2380      	movs	r3, #128	; 0x80
 8002298:	617b      	str	r3, [r7, #20]
 800229a:	e030      	b.n	80022fe <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d107      	bne.n	80022b4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022a4:	4b57      	ldr	r3, [pc, #348]	; (8002404 <HAL_RCC_ClockConfig+0x230>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d115      	bne.n	80022dc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e0a0      	b.n	80023f6 <HAL_RCC_ClockConfig+0x222>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d107      	bne.n	80022cc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022bc:	4b51      	ldr	r3, [pc, #324]	; (8002404 <HAL_RCC_ClockConfig+0x230>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d109      	bne.n	80022dc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e094      	b.n	80023f6 <HAL_RCC_ClockConfig+0x222>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022cc:	4b4d      	ldr	r3, [pc, #308]	; (8002404 <HAL_RCC_ClockConfig+0x230>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e08c      	b.n	80023f6 <HAL_RCC_ClockConfig+0x222>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80022dc:	f000 f89a 	bl	8002414 <HAL_RCC_GetSysClockFreq>
 80022e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	4a48      	ldr	r2, [pc, #288]	; (8002408 <HAL_RCC_ClockConfig+0x234>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d909      	bls.n	80022fe <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80022ea:	4b46      	ldr	r3, [pc, #280]	; (8002404 <HAL_RCC_ClockConfig+0x230>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022f2:	4a44      	ldr	r2, [pc, #272]	; (8002404 <HAL_RCC_ClockConfig+0x230>)
 80022f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022f8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80022fa:	2380      	movs	r3, #128	; 0x80
 80022fc:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022fe:	4b41      	ldr	r3, [pc, #260]	; (8002404 <HAL_RCC_ClockConfig+0x230>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f023 0203 	bic.w	r2, r3, #3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	493e      	ldr	r1, [pc, #248]	; (8002404 <HAL_RCC_ClockConfig+0x230>)
 800230c:	4313      	orrs	r3, r2
 800230e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002310:	f7fe ff70 	bl	80011f4 <HAL_GetTick>
 8002314:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002316:	e00a      	b.n	800232e <HAL_RCC_ClockConfig+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002318:	f7fe ff6c 	bl	80011f4 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	f241 3288 	movw	r2, #5000	; 0x1388
 8002326:	4293      	cmp	r3, r2
 8002328:	d901      	bls.n	800232e <HAL_RCC_ClockConfig+0x15a>
      {
        return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e063      	b.n	80023f6 <HAL_RCC_ClockConfig+0x222>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800232e:	4b35      	ldr	r3, [pc, #212]	; (8002404 <HAL_RCC_ClockConfig+0x230>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 020c 	and.w	r2, r3, #12
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	429a      	cmp	r2, r3
 800233e:	d1eb      	bne.n	8002318 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d009      	beq.n	8002360 <HAL_RCC_ClockConfig+0x18c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800234c:	4b2d      	ldr	r3, [pc, #180]	; (8002404 <HAL_RCC_ClockConfig+0x230>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	492a      	ldr	r1, [pc, #168]	; (8002404 <HAL_RCC_ClockConfig+0x230>)
 800235a:	4313      	orrs	r3, r2
 800235c:	608b      	str	r3, [r1, #8]
 800235e:	e008      	b.n	8002372 <HAL_RCC_ClockConfig+0x19e>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	2b80      	cmp	r3, #128	; 0x80
 8002364:	d105      	bne.n	8002372 <HAL_RCC_ClockConfig+0x19e>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002366:	4b27      	ldr	r3, [pc, #156]	; (8002404 <HAL_RCC_ClockConfig+0x230>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	4a26      	ldr	r2, [pc, #152]	; (8002404 <HAL_RCC_ClockConfig+0x230>)
 800236c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002370:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002372:	4b23      	ldr	r3, [pc, #140]	; (8002400 <HAL_RCC_ClockConfig+0x22c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 030f 	and.w	r3, r3, #15
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	429a      	cmp	r2, r3
 800237e:	d210      	bcs.n	80023a2 <HAL_RCC_ClockConfig+0x1ce>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002380:	4b1f      	ldr	r3, [pc, #124]	; (8002400 <HAL_RCC_ClockConfig+0x22c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f023 020f 	bic.w	r2, r3, #15
 8002388:	491d      	ldr	r1, [pc, #116]	; (8002400 <HAL_RCC_ClockConfig+0x22c>)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	4313      	orrs	r3, r2
 800238e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002390:	4b1b      	ldr	r3, [pc, #108]	; (8002400 <HAL_RCC_ClockConfig+0x22c>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 030f 	and.w	r3, r3, #15
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	429a      	cmp	r2, r3
 800239c:	d001      	beq.n	80023a2 <HAL_RCC_ClockConfig+0x1ce>
    {
      return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e029      	b.n	80023f6 <HAL_RCC_ClockConfig+0x222>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0304 	and.w	r3, r3, #4
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d008      	beq.n	80023c0 <HAL_RCC_ClockConfig+0x1ec>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023ae:	4b15      	ldr	r3, [pc, #84]	; (8002404 <HAL_RCC_ClockConfig+0x230>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	4912      	ldr	r1, [pc, #72]	; (8002404 <HAL_RCC_ClockConfig+0x230>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0308 	and.w	r3, r3, #8
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d009      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x20c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023cc:	4b0d      	ldr	r3, [pc, #52]	; (8002404 <HAL_RCC_ClockConfig+0x230>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	490a      	ldr	r1, [pc, #40]	; (8002404 <HAL_RCC_ClockConfig+0x230>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80023e0:	f000 f8b2 	bl	8002548 <HAL_RCC_GetHCLKFreq>
 80023e4:	4602      	mov	r2, r0
 80023e6:	4b09      	ldr	r3, [pc, #36]	; (800240c <HAL_RCC_ClockConfig+0x238>)
 80023e8:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80023ea:	4b09      	ldr	r3, [pc, #36]	; (8002410 <HAL_RCC_ClockConfig+0x23c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7fe feb0 	bl	8001154 <HAL_InitTick>
 80023f4:	4603      	mov	r3, r0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3718      	adds	r7, #24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40022000 	.word	0x40022000
 8002404:	40021000 	.word	0x40021000
 8002408:	04c4b400 	.word	0x04c4b400
 800240c:	20000000 	.word	0x20000000
 8002410:	20000004 	.word	0x20000004

08002414 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002414:	b480      	push	{r7}
 8002416:	b089      	sub	sp, #36	; 0x24
 8002418:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800241a:	2300      	movs	r3, #0
 800241c:	61fb      	str	r3, [r7, #28]
 800241e:	2300      	movs	r3, #0
 8002420:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002422:	4b46      	ldr	r3, [pc, #280]	; (800253c <HAL_RCC_GetSysClockFreq+0x128>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 030c 	and.w	r3, r3, #12
 800242a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800242c:	4b43      	ldr	r3, [pc, #268]	; (800253c <HAL_RCC_GetSysClockFreq+0x128>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	f003 0303 	and.w	r3, r3, #3
 8002434:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d005      	beq.n	8002448 <HAL_RCC_GetSysClockFreq+0x34>
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	2b0c      	cmp	r3, #12
 8002440:	d121      	bne.n	8002486 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d11e      	bne.n	8002486 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002448:	4b3c      	ldr	r3, [pc, #240]	; (800253c <HAL_RCC_GetSysClockFreq+0x128>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0308 	and.w	r3, r3, #8
 8002450:	2b00      	cmp	r3, #0
 8002452:	d107      	bne.n	8002464 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002454:	4b39      	ldr	r3, [pc, #228]	; (800253c <HAL_RCC_GetSysClockFreq+0x128>)
 8002456:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800245a:	0a1b      	lsrs	r3, r3, #8
 800245c:	f003 030f 	and.w	r3, r3, #15
 8002460:	61fb      	str	r3, [r7, #28]
 8002462:	e005      	b.n	8002470 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002464:	4b35      	ldr	r3, [pc, #212]	; (800253c <HAL_RCC_GetSysClockFreq+0x128>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	091b      	lsrs	r3, r3, #4
 800246a:	f003 030f 	and.w	r3, r3, #15
 800246e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8002470:	4a33      	ldr	r2, [pc, #204]	; (8002540 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002478:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d10d      	bne.n	800249c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002484:	e00a      	b.n	800249c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	2b04      	cmp	r3, #4
 800248a:	d102      	bne.n	8002492 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800248c:	4b2d      	ldr	r3, [pc, #180]	; (8002544 <HAL_RCC_GetSysClockFreq+0x130>)
 800248e:	61bb      	str	r3, [r7, #24]
 8002490:	e004      	b.n	800249c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	2b08      	cmp	r3, #8
 8002496:	d101      	bne.n	800249c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002498:	4b2a      	ldr	r3, [pc, #168]	; (8002544 <HAL_RCC_GetSysClockFreq+0x130>)
 800249a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	2b0c      	cmp	r3, #12
 80024a0:	d145      	bne.n	800252e <HAL_RCC_GetSysClockFreq+0x11a>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80024a2:	4b26      	ldr	r3, [pc, #152]	; (800253c <HAL_RCC_GetSysClockFreq+0x128>)
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	f003 0303 	and.w	r3, r3, #3
 80024aa:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024ac:	4b23      	ldr	r3, [pc, #140]	; (800253c <HAL_RCC_GetSysClockFreq+0x128>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	091b      	lsrs	r3, r3, #4
 80024b2:	f003 030f 	and.w	r3, r3, #15
 80024b6:	3301      	adds	r3, #1
 80024b8:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d002      	beq.n	80024c6 <HAL_RCC_GetSysClockFreq+0xb2>
 80024c0:	2b03      	cmp	r3, #3
 80024c2:	d00d      	beq.n	80024e0 <HAL_RCC_GetSysClockFreq+0xcc>
 80024c4:	e019      	b.n	80024fa <HAL_RCC_GetSysClockFreq+0xe6>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024c6:	4a1f      	ldr	r2, [pc, #124]	; (8002544 <HAL_RCC_GetSysClockFreq+0x130>)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ce:	4a1b      	ldr	r2, [pc, #108]	; (800253c <HAL_RCC_GetSysClockFreq+0x128>)
 80024d0:	68d2      	ldr	r2, [r2, #12]
 80024d2:	0a12      	lsrs	r2, r2, #8
 80024d4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80024d8:	fb02 f303 	mul.w	r3, r2, r3
 80024dc:	617b      	str	r3, [r7, #20]
        break;
 80024de:	e019      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0x100>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024e0:	4a18      	ldr	r2, [pc, #96]	; (8002544 <HAL_RCC_GetSysClockFreq+0x130>)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e8:	4a14      	ldr	r2, [pc, #80]	; (800253c <HAL_RCC_GetSysClockFreq+0x128>)
 80024ea:	68d2      	ldr	r2, [r2, #12]
 80024ec:	0a12      	lsrs	r2, r2, #8
 80024ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80024f2:	fb02 f303 	mul.w	r3, r2, r3
 80024f6:	617b      	str	r3, [r7, #20]
        break;
 80024f8:	e00c      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0x100>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024fa:	69fa      	ldr	r2, [r7, #28]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002502:	4a0e      	ldr	r2, [pc, #56]	; (800253c <HAL_RCC_GetSysClockFreq+0x128>)
 8002504:	68d2      	ldr	r2, [r2, #12]
 8002506:	0a12      	lsrs	r2, r2, #8
 8002508:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800250c:	fb02 f303 	mul.w	r3, r2, r3
 8002510:	617b      	str	r3, [r7, #20]
        break;
 8002512:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8002514:	4b09      	ldr	r3, [pc, #36]	; (800253c <HAL_RCC_GetSysClockFreq+0x128>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	0e5b      	lsrs	r3, r3, #25
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	3301      	adds	r3, #1
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002524:	697a      	ldr	r2, [r7, #20]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	fbb2 f3f3 	udiv	r3, r2, r3
 800252c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800252e:	69bb      	ldr	r3, [r7, #24]
}
 8002530:	4618      	mov	r0, r3
 8002532:	3724      	adds	r7, #36	; 0x24
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	40021000 	.word	0x40021000
 8002540:	080054a4 	.word	0x080054a4
 8002544:	00f42400 	.word	0x00f42400

08002548 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 800254c:	f7ff ff62 	bl	8002414 <HAL_RCC_GetSysClockFreq>
 8002550:	4601      	mov	r1, r0
 8002552:	4b05      	ldr	r3, [pc, #20]	; (8002568 <HAL_RCC_GetHCLKFreq+0x20>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	091b      	lsrs	r3, r3, #4
 8002558:	f003 030f 	and.w	r3, r3, #15
 800255c:	4a03      	ldr	r2, [pc, #12]	; (800256c <HAL_RCC_GetHCLKFreq+0x24>)
 800255e:	5cd3      	ldrb	r3, [r2, r3]
 8002560:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002564:	4618      	mov	r0, r3
 8002566:	bd80      	pop	{r7, pc}
 8002568:	40021000 	.word	0x40021000
 800256c:	0800548c 	.word	0x0800548c

08002570 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002574:	f7ff ffe8 	bl	8002548 <HAL_RCC_GetHCLKFreq>
 8002578:	4601      	mov	r1, r0
 800257a:	4b05      	ldr	r3, [pc, #20]	; (8002590 <HAL_RCC_GetPCLK1Freq+0x20>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	0a1b      	lsrs	r3, r3, #8
 8002580:	f003 0307 	and.w	r3, r3, #7
 8002584:	4a03      	ldr	r2, [pc, #12]	; (8002594 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002586:	5cd3      	ldrb	r3, [r2, r3]
 8002588:	fa21 f303 	lsr.w	r3, r1, r3
}
 800258c:	4618      	mov	r0, r3
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40021000 	.word	0x40021000
 8002594:	0800549c 	.word	0x0800549c

08002598 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800259c:	f7ff ffd4 	bl	8002548 <HAL_RCC_GetHCLKFreq>
 80025a0:	4601      	mov	r1, r0
 80025a2:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	0adb      	lsrs	r3, r3, #11
 80025a8:	f003 0307 	and.w	r3, r3, #7
 80025ac:	4a03      	ldr	r2, [pc, #12]	; (80025bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80025ae:	5cd3      	ldrb	r3, [r2, r3]
 80025b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40021000 	.word	0x40021000
 80025bc:	0800549c 	.word	0x0800549c

080025c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025c8:	2300      	movs	r3, #0
 80025ca:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025cc:	4b2c      	ldr	r3, [pc, #176]	; (8002680 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80025ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80025d8:	f7ff f8fc 	bl	80017d4 <HAL_PWREx_GetVoltageRange>
 80025dc:	6138      	str	r0, [r7, #16]
 80025de:	e014      	b.n	800260a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80025e0:	4b27      	ldr	r3, [pc, #156]	; (8002680 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80025e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e4:	4a26      	ldr	r2, [pc, #152]	; (8002680 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80025e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ea:	6593      	str	r3, [r2, #88]	; 0x58
 80025ec:	4b24      	ldr	r3, [pc, #144]	; (8002680 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80025ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f4:	60fb      	str	r3, [r7, #12]
 80025f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80025f8:	f7ff f8ec 	bl	80017d4 <HAL_PWREx_GetVoltageRange>
 80025fc:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 80025fe:	4b20      	ldr	r3, [pc, #128]	; (8002680 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002602:	4a1f      	ldr	r2, [pc, #124]	; (8002680 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002604:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002608:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002616:	d10b      	bne.n	8002630 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b80      	cmp	r3, #128	; 0x80
 800261c:	d919      	bls.n	8002652 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2ba0      	cmp	r3, #160	; 0xa0
 8002622:	d902      	bls.n	800262a <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002624:	2302      	movs	r3, #2
 8002626:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8002628:	e013      	b.n	8002652 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800262a:	2301      	movs	r3, #1
 800262c:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 800262e:	e010      	b.n	8002652 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b80      	cmp	r3, #128	; 0x80
 8002634:	d902      	bls.n	800263c <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002636:	2303      	movs	r3, #3
 8002638:	617b      	str	r3, [r7, #20]
 800263a:	e00a      	b.n	8002652 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b80      	cmp	r3, #128	; 0x80
 8002640:	d102      	bne.n	8002648 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002642:	2302      	movs	r3, #2
 8002644:	617b      	str	r3, [r7, #20]
 8002646:	e004      	b.n	8002652 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b70      	cmp	r3, #112	; 0x70
 800264c:	d101      	bne.n	8002652 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800264e:	2301      	movs	r3, #1
 8002650:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002652:	4b0c      	ldr	r3, [pc, #48]	; (8002684 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f023 020f 	bic.w	r2, r3, #15
 800265a:	490a      	ldr	r1, [pc, #40]	; (8002684 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	4313      	orrs	r3, r2
 8002660:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002662:	4b08      	ldr	r3, [pc, #32]	; (8002684 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	697a      	ldr	r2, [r7, #20]
 800266c:	429a      	cmp	r2, r3
 800266e:	d001      	beq.n	8002674 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e000      	b.n	8002676 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	40021000 	.word	0x40021000
 8002684:	40022000 	.word	0x40022000

08002688 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002688:	b480      	push	{r7}
 800268a:	b087      	sub	sp, #28
 800268c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800268e:	2300      	movs	r3, #0
 8002690:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8002692:	4b36      	ldr	r3, [pc, #216]	; (800276c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	f003 0303 	and.w	r3, r3, #3
 800269a:	2b01      	cmp	r3, #1
 800269c:	d118      	bne.n	80026d0 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800269e:	4b33      	ldr	r3, [pc, #204]	; (800276c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0308 	and.w	r3, r3, #8
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d107      	bne.n	80026ba <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80026aa:	4b30      	ldr	r3, [pc, #192]	; (800276c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80026ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026b0:	0a1b      	lsrs	r3, r3, #8
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	617b      	str	r3, [r7, #20]
 80026b8:	e005      	b.n	80026c6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80026ba:	4b2c      	ldr	r3, [pc, #176]	; (800276c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	091b      	lsrs	r3, r3, #4
 80026c0:	f003 030f 	and.w	r3, r3, #15
 80026c4:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 80026c6:	4a2a      	ldr	r2, [pc, #168]	; (8002770 <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ce:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026d0:	4b26      	ldr	r3, [pc, #152]	; (800276c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	f003 0303 	and.w	r3, r3, #3
 80026d8:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026da:	4b24      	ldr	r3, [pc, #144]	; (800276c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	091b      	lsrs	r3, r3, #4
 80026e0:	f003 030f 	and.w	r3, r3, #15
 80026e4:	3301      	adds	r3, #1
 80026e6:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d002      	beq.n	80026f4 <RCC_GetSysClockFreqFromPLLSource+0x6c>
 80026ee:	2b03      	cmp	r3, #3
 80026f0:	d00d      	beq.n	800270e <RCC_GetSysClockFreqFromPLLSource+0x86>
 80026f2:	e019      	b.n	8002728 <RCC_GetSysClockFreqFromPLLSource+0xa0>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026f4:	4a1f      	ldr	r2, [pc, #124]	; (8002774 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026fc:	4a1b      	ldr	r2, [pc, #108]	; (800276c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80026fe:	68d2      	ldr	r2, [r2, #12]
 8002700:	0a12      	lsrs	r2, r2, #8
 8002702:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002706:	fb02 f303 	mul.w	r3, r2, r3
 800270a:	613b      	str	r3, [r7, #16]
      break;
 800270c:	e019      	b.n	8002742 <RCC_GetSysClockFreqFromPLLSource+0xba>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800270e:	4a19      	ldr	r2, [pc, #100]	; (8002774 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	fbb2 f3f3 	udiv	r3, r2, r3
 8002716:	4a15      	ldr	r2, [pc, #84]	; (800276c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8002718:	68d2      	ldr	r2, [r2, #12]
 800271a:	0a12      	lsrs	r2, r2, #8
 800271c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002720:	fb02 f303 	mul.w	r3, r2, r3
 8002724:	613b      	str	r3, [r7, #16]
      break;
 8002726:	e00c      	b.n	8002742 <RCC_GetSysClockFreqFromPLLSource+0xba>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002728:	697a      	ldr	r2, [r7, #20]
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002730:	4a0e      	ldr	r2, [pc, #56]	; (800276c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8002732:	68d2      	ldr	r2, [r2, #12]
 8002734:	0a12      	lsrs	r2, r2, #8
 8002736:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800273a:	fb02 f303 	mul.w	r3, r2, r3
 800273e:	613b      	str	r3, [r7, #16]
      break;
 8002740:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8002742:	4b0a      	ldr	r3, [pc, #40]	; (800276c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	0e5b      	lsrs	r3, r3, #25
 8002748:	f003 0303 	and.w	r3, r3, #3
 800274c:	3301      	adds	r3, #1
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	fbb2 f3f3 	udiv	r3, r2, r3
 800275a:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800275c:	683b      	ldr	r3, [r7, #0]
}
 800275e:	4618      	mov	r0, r3
 8002760:	371c      	adds	r7, #28
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	40021000 	.word	0x40021000
 8002770:	080054a4 	.word	0x080054a4
 8002774:	00f42400 	.word	0x00f42400

08002778 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b088      	sub	sp, #32
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002780:	2300      	movs	r3, #0
 8002782:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002784:	2300      	movs	r3, #0
 8002786:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002790:	2b00      	cmp	r3, #0
 8002792:	d03d      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002798:	2b40      	cmp	r3, #64	; 0x40
 800279a:	d00b      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800279c:	2b40      	cmp	r3, #64	; 0x40
 800279e:	d804      	bhi.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x32>
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00e      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 80027a4:	2b20      	cmp	r3, #32
 80027a6:	d015      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80027a8:	e01d      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80027aa:	2b60      	cmp	r3, #96	; 0x60
 80027ac:	d01e      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x74>
 80027ae:	2b80      	cmp	r3, #128	; 0x80
 80027b0:	d01c      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x74>
 80027b2:	e018      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80027b4:	4b84      	ldr	r3, [pc, #528]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	4a83      	ldr	r2, [pc, #524]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80027ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027be:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80027c0:	e015      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x76>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	3304      	adds	r3, #4
 80027c6:	2100      	movs	r1, #0
 80027c8:	4618      	mov	r0, r3
 80027ca:	f000 fb3f 	bl	8002e4c <RCCEx_PLLSAI1_Config>
 80027ce:	4603      	mov	r3, r0
 80027d0:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80027d2:	e00c      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x76>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3320      	adds	r3, #32
 80027d8:	2100      	movs	r1, #0
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 fc08 	bl	8002ff0 <RCCEx_PLLSAI2_Config>
 80027e0:	4603      	mov	r3, r0
 80027e2:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80027e4:	e003      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x76>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	77fb      	strb	r3, [r7, #31]
        break;
 80027ea:	e000      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x76>
        break;
 80027ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027ee:	7ffb      	ldrb	r3, [r7, #31]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10b      	bne.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027f4:	4b74      	ldr	r3, [pc, #464]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80027f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027fa:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002802:	4971      	ldr	r1, [pc, #452]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002804:	4313      	orrs	r3, r2
 8002806:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800280a:	e001      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800280c:	7ffb      	ldrb	r3, [r7, #31]
 800280e:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d042      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002824:	d00f      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8002826:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800282a:	d805      	bhi.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 800282c:	2b00      	cmp	r3, #0
 800282e:	d011      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8002830:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002834:	d017      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0xee>
 8002836:	e01f      	b.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8002838:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800283c:	d01f      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x106>
 800283e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002842:	d01c      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002844:	e018      	b.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002846:	4b60      	ldr	r3, [pc, #384]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	4a5f      	ldr	r2, [pc, #380]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800284c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002850:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8002852:	e015      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x108>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3304      	adds	r3, #4
 8002858:	2100      	movs	r1, #0
 800285a:	4618      	mov	r0, r3
 800285c:	f000 faf6 	bl	8002e4c <RCCEx_PLLSAI1_Config>
 8002860:	4603      	mov	r3, r0
 8002862:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8002864:	e00c      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x108>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	3320      	adds	r3, #32
 800286a:	2100      	movs	r1, #0
 800286c:	4618      	mov	r0, r3
 800286e:	f000 fbbf 	bl	8002ff0 <RCCEx_PLLSAI2_Config>
 8002872:	4603      	mov	r3, r0
 8002874:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8002876:	e003      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x108>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	77fb      	strb	r3, [r7, #31]
        break;
 800287c:	e000      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x108>
        break;
 800287e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002880:	7ffb      	ldrb	r3, [r7, #31]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d10b      	bne.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002886:	4b50      	ldr	r3, [pc, #320]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002888:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800288c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002894:	494c      	ldr	r1, [pc, #304]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002896:	4313      	orrs	r3, r2
 8002898:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800289c:	e001      	b.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800289e:	7ffb      	ldrb	r3, [r7, #31]
 80028a0:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f000 809b 	beq.w	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028b0:	2300      	movs	r3, #0
 80028b2:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028b4:	4b44      	ldr	r3, [pc, #272]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80028b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10d      	bne.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028c0:	4b41      	ldr	r3, [pc, #260]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80028c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c4:	4a40      	ldr	r2, [pc, #256]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80028c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ca:	6593      	str	r3, [r2, #88]	; 0x58
 80028cc:	4b3e      	ldr	r3, [pc, #248]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80028ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80028d8:	2301      	movs	r3, #1
 80028da:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028dc:	4b3b      	ldr	r3, [pc, #236]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a3a      	ldr	r2, [pc, #232]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80028e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028e8:	f7fe fc84 	bl	80011f4 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028ee:	e009      	b.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f0:	f7fe fc80 	bl	80011f4 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d902      	bls.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      {
        ret = HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	77fb      	strb	r3, [r7, #31]
        break;
 8002902:	e005      	b.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x198>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002904:	4b31      	ldr	r3, [pc, #196]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290c:	2b00      	cmp	r3, #0
 800290e:	d0ef      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x178>
      }
    }

    if (ret == HAL_OK)
 8002910:	7ffb      	ldrb	r3, [r7, #31]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d15c      	bne.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002916:	4b2c      	ldr	r3, [pc, #176]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800291c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002920:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d01f      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	429a      	cmp	r2, r3
 8002932:	d019      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002934:	4b24      	ldr	r3, [pc, #144]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800293a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800293e:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002940:	4b21      	ldr	r3, [pc, #132]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002946:	4a20      	ldr	r2, [pc, #128]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800294c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002950:	4b1d      	ldr	r3, [pc, #116]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002956:	4a1c      	ldr	r2, [pc, #112]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002958:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800295c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002960:	4a19      	ldr	r2, [pc, #100]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d016      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x228>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002972:	f7fe fc3f 	bl	80011f4 <HAL_GetTick>
 8002976:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002978:	e00b      	b.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x21a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800297a:	f7fe fc3b 	bl	80011f4 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	f241 3288 	movw	r2, #5000	; 0x1388
 8002988:	4293      	cmp	r3, r2
 800298a:	d902      	bls.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x21a>
          {
            ret = HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	77fb      	strb	r3, [r7, #31]
            break;
 8002990:	e006      	b.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x228>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002992:	4b0d      	ldr	r3, [pc, #52]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0ec      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x202>
          }
        }
      }

      if (ret == HAL_OK)
 80029a0:	7ffb      	ldrb	r3, [r7, #31]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10c      	bne.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x248>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029a6:	4b08      	ldr	r3, [pc, #32]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80029a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b6:	4904      	ldr	r1, [pc, #16]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80029be:	e009      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x25c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029c0:	7ffb      	ldrb	r3, [r7, #31]
 80029c2:	77bb      	strb	r3, [r7, #30]
 80029c4:	e006      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x25c>
 80029c6:	bf00      	nop
 80029c8:	40021000 	.word	0x40021000
 80029cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029d0:	7ffb      	ldrb	r3, [r7, #31]
 80029d2:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029d4:	7dfb      	ldrb	r3, [r7, #23]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d105      	bne.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029da:	4bae      	ldr	r3, [pc, #696]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80029dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029de:	4aad      	ldr	r2, [pc, #692]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80029e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00a      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029f2:	4ba8      	ldr	r3, [pc, #672]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80029f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f8:	f023 0203 	bic.w	r2, r3, #3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a00:	49a4      	ldr	r1, [pc, #656]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00a      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a14:	4b9f      	ldr	r3, [pc, #636]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a1a:	f023 020c 	bic.w	r2, r3, #12
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a22:	499c      	ldr	r1, [pc, #624]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0304 	and.w	r3, r3, #4
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00a      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a36:	4b97      	ldr	r3, [pc, #604]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a44:	4993      	ldr	r1, [pc, #588]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0308 	and.w	r3, r3, #8
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00a      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a58:	4b8e      	ldr	r3, [pc, #568]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	498b      	ldr	r1, [pc, #556]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0310 	and.w	r3, r3, #16
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00a      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x318>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a7a:	4b86      	ldr	r3, [pc, #536]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a88:	4982      	ldr	r1, [pc, #520]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0320 	and.w	r3, r3, #32
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00a      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x33a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a9c:	4b7d      	ldr	r3, [pc, #500]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aaa:	497a      	ldr	r1, [pc, #488]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00a      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002abe:	4b75      	ldr	r3, [pc, #468]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002acc:	4971      	ldr	r1, [pc, #452]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00a      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ae0:	4b6c      	ldr	r3, [pc, #432]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aee:	4969      	ldr	r1, [pc, #420]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00a      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002b02:	4b64      	ldr	r3, [pc, #400]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b08:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b10:	4960      	ldr	r1, [pc, #384]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d02f      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x40c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b2c:	d005      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8002b2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b32:	d009      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d013      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002b38:	e00f      	b.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b3a:	4b56      	ldr	r3, [pc, #344]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	4a55      	ldr	r2, [pc, #340]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002b40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b44:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8002b46:	e00c      	b.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3304      	adds	r3, #4
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f000 f97c 	bl	8002e4c <RCCEx_PLLSAI1_Config>
 8002b54:	4603      	mov	r3, r0
 8002b56:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8002b58:	e003      	b.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

      default:
        ret = HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	77fb      	strb	r3, [r7, #31]
        break;
 8002b5e:	e000      	b.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
        break;
 8002b60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b62:	7ffb      	ldrb	r3, [r7, #31]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10b      	bne.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002b68:	4b4a      	ldr	r3, [pc, #296]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b6e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b76:	4947      	ldr	r1, [pc, #284]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b7e:	e001      	b.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x40c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b80:	7ffb      	ldrb	r3, [r7, #31]
 8002b82:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00a      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b90:	4b40      	ldr	r3, [pc, #256]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b96:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b9e:	493d      	ldr	r1, [pc, #244]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00a      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x450>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002bb2:	4b38      	ldr	r3, [pc, #224]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bc0:	4934      	ldr	r1, [pc, #208]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00a      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bd4:	4b2f      	ldr	r3, [pc, #188]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bda:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be2:	492c      	ldr	r1, [pc, #176]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00a      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002bf6:	4b27      	ldr	r3, [pc, #156]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002bf8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002bfc:	f023 0203 	bic.w	r2, r3, #3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c04:	4923      	ldr	r1, [pc, #140]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d028      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c18:	4b1e      	ldr	r3, [pc, #120]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c1e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c26:	491b      	ldr	r1, [pc, #108]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c36:	d106      	bne.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c38:	4b16      	ldr	r3, [pc, #88]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	4a15      	ldr	r2, [pc, #84]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002c3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c42:	60d3      	str	r3, [r2, #12]
 8002c44:	e011      	b.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c4e:	d10c      	bne.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3304      	adds	r3, #4
 8002c54:	2101      	movs	r1, #1
 8002c56:	4618      	mov	r0, r3
 8002c58:	f000 f8f8 	bl	8002e4c <RCCEx_PLLSAI1_Config>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8002c60:	7ffb      	ldrb	r3, [r7, #31]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
        {
          /* set overall return value */
          status = ret;
 8002c66:	7ffb      	ldrb	r3, [r7, #31]
 8002c68:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d04d      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c7e:	d10b      	bne.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8002c80:	4b04      	ldr	r3, [pc, #16]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002c82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c86:	4a03      	ldr	r2, [pc, #12]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002c88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c8c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002c90:	e015      	b.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x546>
 8002c92:	bf00      	nop
 8002c94:	40021000 	.word	0x40021000
 8002c98:	4b6b      	ldr	r3, [pc, #428]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8002c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ca6:	4968      	ldr	r1, [pc, #416]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002cae:	4b66      	ldr	r3, [pc, #408]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8002cb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002cb4:	4a64      	ldr	r2, [pc, #400]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8002cb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cba:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cc2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cc6:	d10d      	bne.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	3304      	adds	r3, #4
 8002ccc:	2101      	movs	r1, #1
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f000 f8bc 	bl	8002e4c <RCCEx_PLLSAI1_Config>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002cd8:	7ffb      	ldrb	r3, [r7, #31]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d019      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x59a>
      {
        /* set overall return value */
        status = ret;
 8002cde:	7ffb      	ldrb	r3, [r7, #31]
 8002ce0:	77bb      	strb	r3, [r7, #30]
 8002ce2:	e016      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x59a>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ce8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cec:	d106      	bne.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x584>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cee:	4b56      	ldr	r3, [pc, #344]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	4a55      	ldr	r2, [pc, #340]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8002cf4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cf8:	60d3      	str	r3, [r2, #12]
 8002cfa:	e00a      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x59a>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d04:	d105      	bne.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x59a>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d06:	4b50      	ldr	r3, [pc, #320]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	4a4f      	ldr	r2, [pc, #316]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8002d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d10:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d028      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d1e:	4b4a      	ldr	r3, [pc, #296]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8002d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d24:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d2c:	4946      	ldr	r1, [pc, #280]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d3c:	d106      	bne.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d3e:	4b42      	ldr	r3, [pc, #264]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	4a41      	ldr	r2, [pc, #260]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8002d44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d48:	60d3      	str	r3, [r2, #12]
 8002d4a:	e011      	b.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d54:	d10c      	bne.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	3304      	adds	r3, #4
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f000 f875 	bl	8002e4c <RCCEx_PLLSAI1_Config>
 8002d62:	4603      	mov	r3, r0
 8002d64:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002d66:	7ffb      	ldrb	r3, [r7, #31]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        /* set overall return value */
        status = ret;
 8002d6c:	7ffb      	ldrb	r3, [r7, #31]
 8002d6e:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d01e      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x642>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d7c:	4b32      	ldr	r3, [pc, #200]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8002d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d82:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d8c:	492e      	ldr	r1, [pc, #184]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d9e:	d10c      	bne.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x642>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	3304      	adds	r3, #4
 8002da4:	2102      	movs	r1, #2
 8002da6:	4618      	mov	r0, r3
 8002da8:	f000 f850 	bl	8002e4c <RCCEx_PLLSAI1_Config>
 8002dac:	4603      	mov	r3, r0
 8002dae:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002db0:	7ffb      	ldrb	r3, [r7, #31]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* set overall return value */
        status = ret;
 8002db6:	7ffb      	ldrb	r3, [r7, #31]
 8002db8:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00b      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x666>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002dc6:	4b20      	ldr	r3, [pc, #128]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8002dc8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002dcc:	f023 0204 	bic.w	r2, r3, #4
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dd6:	491c      	ldr	r1, [pc, #112]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00b      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x68a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002dea:	4b17      	ldr	r3, [pc, #92]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8002dec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002df0:	f023 0218 	bic.w	r2, r3, #24
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfa:	4913      	ldr	r1, [pc, #76]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d017      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002e0e:	4b0e      	ldr	r3, [pc, #56]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8002e10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e1e:	490a      	ldr	r1, [pc, #40]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
    
    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e30:	d105      	bne.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e32:	4b05      	ldr	r3, [pc, #20]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	4a04      	ldr	r2, [pc, #16]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8002e38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e3c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002e3e:	7fbb      	ldrb	r3, [r7, #30]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3720      	adds	r7, #32
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	40021000 	.word	0x40021000

08002e4c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e56:	2300      	movs	r3, #0
 8002e58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d00c      	beq.n	8002e7c <RCCEx_PLLSAI1_Config+0x30>
 8002e62:	2b03      	cmp	r3, #3
 8002e64:	d013      	beq.n	8002e8e <RCCEx_PLLSAI1_Config+0x42>
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d11a      	bne.n	8002ea0 <RCCEx_PLLSAI1_Config+0x54>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e6a:	4b5d      	ldr	r3, [pc, #372]	; (8002fe0 <RCCEx_PLLSAI1_Config+0x194>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d117      	bne.n	8002ea6 <RCCEx_PLLSAI1_Config+0x5a>
      {
        status = HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e7a:	e014      	b.n	8002ea6 <RCCEx_PLLSAI1_Config+0x5a>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e7c:	4b58      	ldr	r3, [pc, #352]	; (8002fe0 <RCCEx_PLLSAI1_Config+0x194>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d110      	bne.n	8002eaa <RCCEx_PLLSAI1_Config+0x5e>
      {
        status = HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e8c:	e00d      	b.n	8002eaa <RCCEx_PLLSAI1_Config+0x5e>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8002e8e:	4b54      	ldr	r3, [pc, #336]	; (8002fe0 <RCCEx_PLLSAI1_Config+0x194>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d109      	bne.n	8002eae <RCCEx_PLLSAI1_Config+0x62>
      {
        status = HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e9e:	e006      	b.n	8002eae <RCCEx_PLLSAI1_Config+0x62>
    default:
      status = HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ea4:	e004      	b.n	8002eb0 <RCCEx_PLLSAI1_Config+0x64>
      break;
 8002ea6:	bf00      	nop
 8002ea8:	e002      	b.n	8002eb0 <RCCEx_PLLSAI1_Config+0x64>
      break;
 8002eaa:	bf00      	nop
 8002eac:	e000      	b.n	8002eb0 <RCCEx_PLLSAI1_Config+0x64>
      break;
 8002eae:	bf00      	nop
  }

  if (status == HAL_OK)
 8002eb0:	7bfb      	ldrb	r3, [r7, #15]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f040 808f 	bne.w	8002fd6 <RCCEx_PLLSAI1_Config+0x18a>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002eb8:	4b49      	ldr	r3, [pc, #292]	; (8002fe0 <RCCEx_PLLSAI1_Config+0x194>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a48      	ldr	r2, [pc, #288]	; (8002fe0 <RCCEx_PLLSAI1_Config+0x194>)
 8002ebe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ec2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ec4:	f7fe f996 	bl	80011f4 <HAL_GetTick>
 8002ec8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002eca:	e009      	b.n	8002ee0 <RCCEx_PLLSAI1_Config+0x94>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ecc:	f7fe f992 	bl	80011f4 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d902      	bls.n	8002ee0 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	73fb      	strb	r3, [r7, #15]
        break;
 8002ede:	e005      	b.n	8002eec <RCCEx_PLLSAI1_Config+0xa0>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ee0:	4b3f      	ldr	r3, [pc, #252]	; (8002fe0 <RCCEx_PLLSAI1_Config+0x194>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1ef      	bne.n	8002ecc <RCCEx_PLLSAI1_Config+0x80>
      }
    }

    if (status == HAL_OK)
 8002eec:	7bfb      	ldrb	r3, [r7, #15]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d171      	bne.n	8002fd6 <RCCEx_PLLSAI1_Config+0x18a>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d116      	bne.n	8002f26 <RCCEx_PLLSAI1_Config+0xda>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ef8:	4b39      	ldr	r3, [pc, #228]	; (8002fe0 <RCCEx_PLLSAI1_Config+0x194>)
 8002efa:	691a      	ldr	r2, [r3, #16]
 8002efc:	4b39      	ldr	r3, [pc, #228]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x198>)
 8002efe:	4013      	ands	r3, r2
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	6892      	ldr	r2, [r2, #8]
 8002f04:	0211      	lsls	r1, r2, #8
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	68d2      	ldr	r2, [r2, #12]
 8002f0a:	06d2      	lsls	r2, r2, #27
 8002f0c:	4311      	orrs	r1, r2
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	6852      	ldr	r2, [r2, #4]
 8002f12:	3a01      	subs	r2, #1
 8002f14:	0112      	lsls	r2, r2, #4
 8002f16:	4311      	orrs	r1, r2
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	6812      	ldr	r2, [r2, #0]
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	4930      	ldr	r1, [pc, #192]	; (8002fe0 <RCCEx_PLLSAI1_Config+0x194>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	610b      	str	r3, [r1, #16]
 8002f24:	e033      	b.n	8002f8e <RCCEx_PLLSAI1_Config+0x142>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d118      	bne.n	8002f5e <RCCEx_PLLSAI1_Config+0x112>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f2c:	4b2c      	ldr	r3, [pc, #176]	; (8002fe0 <RCCEx_PLLSAI1_Config+0x194>)
 8002f2e:	691a      	ldr	r2, [r3, #16]
 8002f30:	4b2d      	ldr	r3, [pc, #180]	; (8002fe8 <RCCEx_PLLSAI1_Config+0x19c>)
 8002f32:	4013      	ands	r3, r2
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	6892      	ldr	r2, [r2, #8]
 8002f38:	0211      	lsls	r1, r2, #8
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	6912      	ldr	r2, [r2, #16]
 8002f3e:	0852      	lsrs	r2, r2, #1
 8002f40:	3a01      	subs	r2, #1
 8002f42:	0552      	lsls	r2, r2, #21
 8002f44:	4311      	orrs	r1, r2
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	6852      	ldr	r2, [r2, #4]
 8002f4a:	3a01      	subs	r2, #1
 8002f4c:	0112      	lsls	r2, r2, #4
 8002f4e:	4311      	orrs	r1, r2
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	6812      	ldr	r2, [r2, #0]
 8002f54:	430a      	orrs	r2, r1
 8002f56:	4922      	ldr	r1, [pc, #136]	; (8002fe0 <RCCEx_PLLSAI1_Config+0x194>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	610b      	str	r3, [r1, #16]
 8002f5c:	e017      	b.n	8002f8e <RCCEx_PLLSAI1_Config+0x142>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f5e:	4b20      	ldr	r3, [pc, #128]	; (8002fe0 <RCCEx_PLLSAI1_Config+0x194>)
 8002f60:	691a      	ldr	r2, [r3, #16]
 8002f62:	4b22      	ldr	r3, [pc, #136]	; (8002fec <RCCEx_PLLSAI1_Config+0x1a0>)
 8002f64:	4013      	ands	r3, r2
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	6892      	ldr	r2, [r2, #8]
 8002f6a:	0211      	lsls	r1, r2, #8
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	6952      	ldr	r2, [r2, #20]
 8002f70:	0852      	lsrs	r2, r2, #1
 8002f72:	3a01      	subs	r2, #1
 8002f74:	0652      	lsls	r2, r2, #25
 8002f76:	4311      	orrs	r1, r2
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	6852      	ldr	r2, [r2, #4]
 8002f7c:	3a01      	subs	r2, #1
 8002f7e:	0112      	lsls	r2, r2, #4
 8002f80:	4311      	orrs	r1, r2
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	6812      	ldr	r2, [r2, #0]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	4915      	ldr	r1, [pc, #84]	; (8002fe0 <RCCEx_PLLSAI1_Config+0x194>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002f8e:	4b14      	ldr	r3, [pc, #80]	; (8002fe0 <RCCEx_PLLSAI1_Config+0x194>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a13      	ldr	r2, [pc, #76]	; (8002fe0 <RCCEx_PLLSAI1_Config+0x194>)
 8002f94:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f98:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f9a:	f7fe f92b 	bl	80011f4 <HAL_GetTick>
 8002f9e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002fa0:	e009      	b.n	8002fb6 <RCCEx_PLLSAI1_Config+0x16a>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fa2:	f7fe f927 	bl	80011f4 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d902      	bls.n	8002fb6 <RCCEx_PLLSAI1_Config+0x16a>
        {
          status = HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	73fb      	strb	r3, [r7, #15]
          break;
 8002fb4:	e005      	b.n	8002fc2 <RCCEx_PLLSAI1_Config+0x176>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002fb6:	4b0a      	ldr	r3, [pc, #40]	; (8002fe0 <RCCEx_PLLSAI1_Config+0x194>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0ef      	beq.n	8002fa2 <RCCEx_PLLSAI1_Config+0x156>
        }
      }

      if (status == HAL_OK)
 8002fc2:	7bfb      	ldrb	r3, [r7, #15]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d106      	bne.n	8002fd6 <RCCEx_PLLSAI1_Config+0x18a>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8002fc8:	4b05      	ldr	r3, [pc, #20]	; (8002fe0 <RCCEx_PLLSAI1_Config+0x194>)
 8002fca:	691a      	ldr	r2, [r3, #16]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	4903      	ldr	r1, [pc, #12]	; (8002fe0 <RCCEx_PLLSAI1_Config+0x194>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3710      	adds	r7, #16
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	07ff800c 	.word	0x07ff800c
 8002fe8:	ff9f800c 	.word	0xff9f800c
 8002fec:	f9ff800c 	.word	0xf9ff800c

08002ff0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2b02      	cmp	r3, #2
 8003004:	d00c      	beq.n	8003020 <RCCEx_PLLSAI2_Config+0x30>
 8003006:	2b03      	cmp	r3, #3
 8003008:	d013      	beq.n	8003032 <RCCEx_PLLSAI2_Config+0x42>
 800300a:	2b01      	cmp	r3, #1
 800300c:	d11a      	bne.n	8003044 <RCCEx_PLLSAI2_Config+0x54>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800300e:	4b42      	ldr	r3, [pc, #264]	; (8003118 <RCCEx_PLLSAI2_Config+0x128>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d117      	bne.n	800304a <RCCEx_PLLSAI2_Config+0x5a>
      {
        status = HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800301e:	e014      	b.n	800304a <RCCEx_PLLSAI2_Config+0x5a>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003020:	4b3d      	ldr	r3, [pc, #244]	; (8003118 <RCCEx_PLLSAI2_Config+0x128>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003028:	2b00      	cmp	r3, #0
 800302a:	d110      	bne.n	800304e <RCCEx_PLLSAI2_Config+0x5e>
      {
        status = HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003030:	e00d      	b.n	800304e <RCCEx_PLLSAI2_Config+0x5e>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8003032:	4b39      	ldr	r3, [pc, #228]	; (8003118 <RCCEx_PLLSAI2_Config+0x128>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d109      	bne.n	8003052 <RCCEx_PLLSAI2_Config+0x62>
      {
        status = HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003042:	e006      	b.n	8003052 <RCCEx_PLLSAI2_Config+0x62>
    default:
      status = HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	73fb      	strb	r3, [r7, #15]
      break;
 8003048:	e004      	b.n	8003054 <RCCEx_PLLSAI2_Config+0x64>
      break;
 800304a:	bf00      	nop
 800304c:	e002      	b.n	8003054 <RCCEx_PLLSAI2_Config+0x64>
      break;
 800304e:	bf00      	nop
 8003050:	e000      	b.n	8003054 <RCCEx_PLLSAI2_Config+0x64>
      break;
 8003052:	bf00      	nop
  }

  if (status == HAL_OK)
 8003054:	7bfb      	ldrb	r3, [r7, #15]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d159      	bne.n	800310e <RCCEx_PLLSAI2_Config+0x11e>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800305a:	4b2f      	ldr	r3, [pc, #188]	; (8003118 <RCCEx_PLLSAI2_Config+0x128>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a2e      	ldr	r2, [pc, #184]	; (8003118 <RCCEx_PLLSAI2_Config+0x128>)
 8003060:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003064:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003066:	f7fe f8c5 	bl	80011f4 <HAL_GetTick>
 800306a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800306c:	e009      	b.n	8003082 <RCCEx_PLLSAI2_Config+0x92>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800306e:	f7fe f8c1 	bl	80011f4 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d902      	bls.n	8003082 <RCCEx_PLLSAI2_Config+0x92>
      {
        status = HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	73fb      	strb	r3, [r7, #15]
        break;
 8003080:	e005      	b.n	800308e <RCCEx_PLLSAI2_Config+0x9e>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003082:	4b25      	ldr	r3, [pc, #148]	; (8003118 <RCCEx_PLLSAI2_Config+0x128>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1ef      	bne.n	800306e <RCCEx_PLLSAI2_Config+0x7e>
      }
    }

    if (status == HAL_OK)
 800308e:	7bfb      	ldrb	r3, [r7, #15]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d13c      	bne.n	800310e <RCCEx_PLLSAI2_Config+0x11e>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d115      	bne.n	80030c6 <RCCEx_PLLSAI2_Config+0xd6>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800309a:	4b1f      	ldr	r3, [pc, #124]	; (8003118 <RCCEx_PLLSAI2_Config+0x128>)
 800309c:	695a      	ldr	r2, [r3, #20]
 800309e:	4b1f      	ldr	r3, [pc, #124]	; (800311c <RCCEx_PLLSAI2_Config+0x12c>)
 80030a0:	4013      	ands	r3, r2
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	6892      	ldr	r2, [r2, #8]
 80030a6:	0211      	lsls	r1, r2, #8
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	68d2      	ldr	r2, [r2, #12]
 80030ac:	06d2      	lsls	r2, r2, #27
 80030ae:	4311      	orrs	r1, r2
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6852      	ldr	r2, [r2, #4]
 80030b4:	3a01      	subs	r2, #1
 80030b6:	0112      	lsls	r2, r2, #4
 80030b8:	4311      	orrs	r1, r2
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	6812      	ldr	r2, [r2, #0]
 80030be:	430a      	orrs	r2, r1
 80030c0:	4915      	ldr	r1, [pc, #84]	; (8003118 <RCCEx_PLLSAI2_Config+0x128>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80030c6:	4b14      	ldr	r3, [pc, #80]	; (8003118 <RCCEx_PLLSAI2_Config+0x128>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a13      	ldr	r2, [pc, #76]	; (8003118 <RCCEx_PLLSAI2_Config+0x128>)
 80030cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030d0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d2:	f7fe f88f 	bl	80011f4 <HAL_GetTick>
 80030d6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80030d8:	e009      	b.n	80030ee <RCCEx_PLLSAI2_Config+0xfe>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80030da:	f7fe f88b 	bl	80011f4 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d902      	bls.n	80030ee <RCCEx_PLLSAI2_Config+0xfe>
        {
          status = HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	73fb      	strb	r3, [r7, #15]
          break;
 80030ec:	e005      	b.n	80030fa <RCCEx_PLLSAI2_Config+0x10a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80030ee:	4b0a      	ldr	r3, [pc, #40]	; (8003118 <RCCEx_PLLSAI2_Config+0x128>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d0ef      	beq.n	80030da <RCCEx_PLLSAI2_Config+0xea>
        }
      }

      if (status == HAL_OK)
 80030fa:	7bfb      	ldrb	r3, [r7, #15]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d106      	bne.n	800310e <RCCEx_PLLSAI2_Config+0x11e>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8003100:	4b05      	ldr	r3, [pc, #20]	; (8003118 <RCCEx_PLLSAI2_Config+0x128>)
 8003102:	695a      	ldr	r2, [r3, #20]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	4903      	ldr	r1, [pc, #12]	; (8003118 <RCCEx_PLLSAI2_Config+0x128>)
 800310a:	4313      	orrs	r3, r2
 800310c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800310e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003110:	4618      	mov	r0, r3
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40021000 	.word	0x40021000
 800311c:	07ff800c 	.word	0x07ff800c

08003120 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e042      	b.n	80031b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003138:	2b00      	cmp	r3, #0
 800313a:	d106      	bne.n	800314a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f7fd fc39 	bl	80009bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2224      	movs	r2, #36	; 0x24
 800314e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 0201 	bic.w	r2, r2, #1
 8003160:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f82c 	bl	80031c0 <UART_SetConfig>
 8003168:	4603      	mov	r3, r0
 800316a:	2b01      	cmp	r3, #1
 800316c:	d101      	bne.n	8003172 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e022      	b.n	80031b8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003176:	2b00      	cmp	r3, #0
 8003178:	d002      	beq.n	8003180 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 faf6 	bl	800376c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800318e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800319e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f042 0201 	orr.w	r2, r2, #1
 80031ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 fb7d 	bl	80038b0 <UART_CheckIdleState>
 80031b6:	4603      	mov	r3, r0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3708      	adds	r7, #8
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031c0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80031c4:	b088      	sub	sp, #32
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031ca:	2300      	movs	r3, #0
 80031cc:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689a      	ldr	r2, [r3, #8]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	431a      	orrs	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	431a      	orrs	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031ea:	69fa      	ldr	r2, [r7, #28]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	4bb1      	ldr	r3, [pc, #708]	; (80034bc <UART_SetConfig+0x2fc>)
 80031f8:	4013      	ands	r3, r2
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	6812      	ldr	r2, [r2, #0]
 80031fe:	69f9      	ldr	r1, [r7, #28]
 8003200:	430b      	orrs	r3, r1
 8003202:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	430a      	orrs	r2, r1
 8003218:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4aa6      	ldr	r2, [pc, #664]	; (80034c0 <UART_SetConfig+0x300>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d004      	beq.n	8003234 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	69fa      	ldr	r2, [r7, #28]
 8003230:	4313      	orrs	r3, r2
 8003232:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800323e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	6812      	ldr	r2, [r2, #0]
 8003246:	69f9      	ldr	r1, [r7, #28]
 8003248:	430b      	orrs	r3, r1
 800324a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003252:	f023 010f 	bic.w	r1, r3, #15
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	430a      	orrs	r2, r1
 8003260:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a97      	ldr	r2, [pc, #604]	; (80034c4 <UART_SetConfig+0x304>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d121      	bne.n	80032b0 <UART_SetConfig+0xf0>
 800326c:	4b96      	ldr	r3, [pc, #600]	; (80034c8 <UART_SetConfig+0x308>)
 800326e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003272:	f003 0303 	and.w	r3, r3, #3
 8003276:	2b03      	cmp	r3, #3
 8003278:	d816      	bhi.n	80032a8 <UART_SetConfig+0xe8>
 800327a:	a201      	add	r2, pc, #4	; (adr r2, 8003280 <UART_SetConfig+0xc0>)
 800327c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003280:	08003291 	.word	0x08003291
 8003284:	0800329d 	.word	0x0800329d
 8003288:	08003297 	.word	0x08003297
 800328c:	080032a3 	.word	0x080032a3
 8003290:	2301      	movs	r3, #1
 8003292:	76fb      	strb	r3, [r7, #27]
 8003294:	e0e8      	b.n	8003468 <UART_SetConfig+0x2a8>
 8003296:	2302      	movs	r3, #2
 8003298:	76fb      	strb	r3, [r7, #27]
 800329a:	e0e5      	b.n	8003468 <UART_SetConfig+0x2a8>
 800329c:	2304      	movs	r3, #4
 800329e:	76fb      	strb	r3, [r7, #27]
 80032a0:	e0e2      	b.n	8003468 <UART_SetConfig+0x2a8>
 80032a2:	2308      	movs	r3, #8
 80032a4:	76fb      	strb	r3, [r7, #27]
 80032a6:	e0df      	b.n	8003468 <UART_SetConfig+0x2a8>
 80032a8:	2310      	movs	r3, #16
 80032aa:	76fb      	strb	r3, [r7, #27]
 80032ac:	bf00      	nop
 80032ae:	e0db      	b.n	8003468 <UART_SetConfig+0x2a8>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a85      	ldr	r2, [pc, #532]	; (80034cc <UART_SetConfig+0x30c>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d134      	bne.n	8003324 <UART_SetConfig+0x164>
 80032ba:	4b83      	ldr	r3, [pc, #524]	; (80034c8 <UART_SetConfig+0x308>)
 80032bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c0:	f003 030c 	and.w	r3, r3, #12
 80032c4:	2b0c      	cmp	r3, #12
 80032c6:	d829      	bhi.n	800331c <UART_SetConfig+0x15c>
 80032c8:	a201      	add	r2, pc, #4	; (adr r2, 80032d0 <UART_SetConfig+0x110>)
 80032ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ce:	bf00      	nop
 80032d0:	08003305 	.word	0x08003305
 80032d4:	0800331d 	.word	0x0800331d
 80032d8:	0800331d 	.word	0x0800331d
 80032dc:	0800331d 	.word	0x0800331d
 80032e0:	08003311 	.word	0x08003311
 80032e4:	0800331d 	.word	0x0800331d
 80032e8:	0800331d 	.word	0x0800331d
 80032ec:	0800331d 	.word	0x0800331d
 80032f0:	0800330b 	.word	0x0800330b
 80032f4:	0800331d 	.word	0x0800331d
 80032f8:	0800331d 	.word	0x0800331d
 80032fc:	0800331d 	.word	0x0800331d
 8003300:	08003317 	.word	0x08003317
 8003304:	2300      	movs	r3, #0
 8003306:	76fb      	strb	r3, [r7, #27]
 8003308:	e0ae      	b.n	8003468 <UART_SetConfig+0x2a8>
 800330a:	2302      	movs	r3, #2
 800330c:	76fb      	strb	r3, [r7, #27]
 800330e:	e0ab      	b.n	8003468 <UART_SetConfig+0x2a8>
 8003310:	2304      	movs	r3, #4
 8003312:	76fb      	strb	r3, [r7, #27]
 8003314:	e0a8      	b.n	8003468 <UART_SetConfig+0x2a8>
 8003316:	2308      	movs	r3, #8
 8003318:	76fb      	strb	r3, [r7, #27]
 800331a:	e0a5      	b.n	8003468 <UART_SetConfig+0x2a8>
 800331c:	2310      	movs	r3, #16
 800331e:	76fb      	strb	r3, [r7, #27]
 8003320:	bf00      	nop
 8003322:	e0a1      	b.n	8003468 <UART_SetConfig+0x2a8>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a69      	ldr	r2, [pc, #420]	; (80034d0 <UART_SetConfig+0x310>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d120      	bne.n	8003370 <UART_SetConfig+0x1b0>
 800332e:	4b66      	ldr	r3, [pc, #408]	; (80034c8 <UART_SetConfig+0x308>)
 8003330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003334:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003338:	2b10      	cmp	r3, #16
 800333a:	d00f      	beq.n	800335c <UART_SetConfig+0x19c>
 800333c:	2b10      	cmp	r3, #16
 800333e:	d802      	bhi.n	8003346 <UART_SetConfig+0x186>
 8003340:	2b00      	cmp	r3, #0
 8003342:	d005      	beq.n	8003350 <UART_SetConfig+0x190>
 8003344:	e010      	b.n	8003368 <UART_SetConfig+0x1a8>
 8003346:	2b20      	cmp	r3, #32
 8003348:	d005      	beq.n	8003356 <UART_SetConfig+0x196>
 800334a:	2b30      	cmp	r3, #48	; 0x30
 800334c:	d009      	beq.n	8003362 <UART_SetConfig+0x1a2>
 800334e:	e00b      	b.n	8003368 <UART_SetConfig+0x1a8>
 8003350:	2300      	movs	r3, #0
 8003352:	76fb      	strb	r3, [r7, #27]
 8003354:	e088      	b.n	8003468 <UART_SetConfig+0x2a8>
 8003356:	2302      	movs	r3, #2
 8003358:	76fb      	strb	r3, [r7, #27]
 800335a:	e085      	b.n	8003468 <UART_SetConfig+0x2a8>
 800335c:	2304      	movs	r3, #4
 800335e:	76fb      	strb	r3, [r7, #27]
 8003360:	e082      	b.n	8003468 <UART_SetConfig+0x2a8>
 8003362:	2308      	movs	r3, #8
 8003364:	76fb      	strb	r3, [r7, #27]
 8003366:	e07f      	b.n	8003468 <UART_SetConfig+0x2a8>
 8003368:	2310      	movs	r3, #16
 800336a:	76fb      	strb	r3, [r7, #27]
 800336c:	bf00      	nop
 800336e:	e07b      	b.n	8003468 <UART_SetConfig+0x2a8>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a57      	ldr	r2, [pc, #348]	; (80034d4 <UART_SetConfig+0x314>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d120      	bne.n	80033bc <UART_SetConfig+0x1fc>
 800337a:	4b53      	ldr	r3, [pc, #332]	; (80034c8 <UART_SetConfig+0x308>)
 800337c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003380:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003384:	2b40      	cmp	r3, #64	; 0x40
 8003386:	d00f      	beq.n	80033a8 <UART_SetConfig+0x1e8>
 8003388:	2b40      	cmp	r3, #64	; 0x40
 800338a:	d802      	bhi.n	8003392 <UART_SetConfig+0x1d2>
 800338c:	2b00      	cmp	r3, #0
 800338e:	d005      	beq.n	800339c <UART_SetConfig+0x1dc>
 8003390:	e010      	b.n	80033b4 <UART_SetConfig+0x1f4>
 8003392:	2b80      	cmp	r3, #128	; 0x80
 8003394:	d005      	beq.n	80033a2 <UART_SetConfig+0x1e2>
 8003396:	2bc0      	cmp	r3, #192	; 0xc0
 8003398:	d009      	beq.n	80033ae <UART_SetConfig+0x1ee>
 800339a:	e00b      	b.n	80033b4 <UART_SetConfig+0x1f4>
 800339c:	2300      	movs	r3, #0
 800339e:	76fb      	strb	r3, [r7, #27]
 80033a0:	e062      	b.n	8003468 <UART_SetConfig+0x2a8>
 80033a2:	2302      	movs	r3, #2
 80033a4:	76fb      	strb	r3, [r7, #27]
 80033a6:	e05f      	b.n	8003468 <UART_SetConfig+0x2a8>
 80033a8:	2304      	movs	r3, #4
 80033aa:	76fb      	strb	r3, [r7, #27]
 80033ac:	e05c      	b.n	8003468 <UART_SetConfig+0x2a8>
 80033ae:	2308      	movs	r3, #8
 80033b0:	76fb      	strb	r3, [r7, #27]
 80033b2:	e059      	b.n	8003468 <UART_SetConfig+0x2a8>
 80033b4:	2310      	movs	r3, #16
 80033b6:	76fb      	strb	r3, [r7, #27]
 80033b8:	bf00      	nop
 80033ba:	e055      	b.n	8003468 <UART_SetConfig+0x2a8>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a45      	ldr	r2, [pc, #276]	; (80034d8 <UART_SetConfig+0x318>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d124      	bne.n	8003410 <UART_SetConfig+0x250>
 80033c6:	4b40      	ldr	r3, [pc, #256]	; (80034c8 <UART_SetConfig+0x308>)
 80033c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033d4:	d012      	beq.n	80033fc <UART_SetConfig+0x23c>
 80033d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033da:	d802      	bhi.n	80033e2 <UART_SetConfig+0x222>
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d007      	beq.n	80033f0 <UART_SetConfig+0x230>
 80033e0:	e012      	b.n	8003408 <UART_SetConfig+0x248>
 80033e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033e6:	d006      	beq.n	80033f6 <UART_SetConfig+0x236>
 80033e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033ec:	d009      	beq.n	8003402 <UART_SetConfig+0x242>
 80033ee:	e00b      	b.n	8003408 <UART_SetConfig+0x248>
 80033f0:	2300      	movs	r3, #0
 80033f2:	76fb      	strb	r3, [r7, #27]
 80033f4:	e038      	b.n	8003468 <UART_SetConfig+0x2a8>
 80033f6:	2302      	movs	r3, #2
 80033f8:	76fb      	strb	r3, [r7, #27]
 80033fa:	e035      	b.n	8003468 <UART_SetConfig+0x2a8>
 80033fc:	2304      	movs	r3, #4
 80033fe:	76fb      	strb	r3, [r7, #27]
 8003400:	e032      	b.n	8003468 <UART_SetConfig+0x2a8>
 8003402:	2308      	movs	r3, #8
 8003404:	76fb      	strb	r3, [r7, #27]
 8003406:	e02f      	b.n	8003468 <UART_SetConfig+0x2a8>
 8003408:	2310      	movs	r3, #16
 800340a:	76fb      	strb	r3, [r7, #27]
 800340c:	bf00      	nop
 800340e:	e02b      	b.n	8003468 <UART_SetConfig+0x2a8>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a2a      	ldr	r2, [pc, #168]	; (80034c0 <UART_SetConfig+0x300>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d124      	bne.n	8003464 <UART_SetConfig+0x2a4>
 800341a:	4b2b      	ldr	r3, [pc, #172]	; (80034c8 <UART_SetConfig+0x308>)
 800341c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003420:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003424:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003428:	d012      	beq.n	8003450 <UART_SetConfig+0x290>
 800342a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800342e:	d802      	bhi.n	8003436 <UART_SetConfig+0x276>
 8003430:	2b00      	cmp	r3, #0
 8003432:	d007      	beq.n	8003444 <UART_SetConfig+0x284>
 8003434:	e012      	b.n	800345c <UART_SetConfig+0x29c>
 8003436:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800343a:	d006      	beq.n	800344a <UART_SetConfig+0x28a>
 800343c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003440:	d009      	beq.n	8003456 <UART_SetConfig+0x296>
 8003442:	e00b      	b.n	800345c <UART_SetConfig+0x29c>
 8003444:	2300      	movs	r3, #0
 8003446:	76fb      	strb	r3, [r7, #27]
 8003448:	e00e      	b.n	8003468 <UART_SetConfig+0x2a8>
 800344a:	2302      	movs	r3, #2
 800344c:	76fb      	strb	r3, [r7, #27]
 800344e:	e00b      	b.n	8003468 <UART_SetConfig+0x2a8>
 8003450:	2304      	movs	r3, #4
 8003452:	76fb      	strb	r3, [r7, #27]
 8003454:	e008      	b.n	8003468 <UART_SetConfig+0x2a8>
 8003456:	2308      	movs	r3, #8
 8003458:	76fb      	strb	r3, [r7, #27]
 800345a:	e005      	b.n	8003468 <UART_SetConfig+0x2a8>
 800345c:	2310      	movs	r3, #16
 800345e:	76fb      	strb	r3, [r7, #27]
 8003460:	bf00      	nop
 8003462:	e001      	b.n	8003468 <UART_SetConfig+0x2a8>
 8003464:	2310      	movs	r3, #16
 8003466:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a14      	ldr	r2, [pc, #80]	; (80034c0 <UART_SetConfig+0x300>)
 800346e:	4293      	cmp	r3, r2
 8003470:	f040 80a5 	bne.w	80035be <UART_SetConfig+0x3fe>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003474:	7efb      	ldrb	r3, [r7, #27]
 8003476:	2b08      	cmp	r3, #8
 8003478:	d83a      	bhi.n	80034f0 <UART_SetConfig+0x330>
 800347a:	a201      	add	r2, pc, #4	; (adr r2, 8003480 <UART_SetConfig+0x2c0>)
 800347c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003480:	080034a5 	.word	0x080034a5
 8003484:	080034ad 	.word	0x080034ad
 8003488:	080034b5 	.word	0x080034b5
 800348c:	080034f1 	.word	0x080034f1
 8003490:	080034e1 	.word	0x080034e1
 8003494:	080034f1 	.word	0x080034f1
 8003498:	080034f1 	.word	0x080034f1
 800349c:	080034f1 	.word	0x080034f1
 80034a0:	080034e9 	.word	0x080034e9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034a4:	f7ff f864 	bl	8002570 <HAL_RCC_GetPCLK1Freq>
 80034a8:	6178      	str	r0, [r7, #20]
        break;
 80034aa:	e026      	b.n	80034fa <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034ac:	f7ff f874 	bl	8002598 <HAL_RCC_GetPCLK2Freq>
 80034b0:	6178      	str	r0, [r7, #20]
        break;
 80034b2:	e022      	b.n	80034fa <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034b4:	4b09      	ldr	r3, [pc, #36]	; (80034dc <UART_SetConfig+0x31c>)
 80034b6:	617b      	str	r3, [r7, #20]
        break;
 80034b8:	e01f      	b.n	80034fa <UART_SetConfig+0x33a>
 80034ba:	bf00      	nop
 80034bc:	cfff69f3 	.word	0xcfff69f3
 80034c0:	40008000 	.word	0x40008000
 80034c4:	40013800 	.word	0x40013800
 80034c8:	40021000 	.word	0x40021000
 80034cc:	40004400 	.word	0x40004400
 80034d0:	40004800 	.word	0x40004800
 80034d4:	40004c00 	.word	0x40004c00
 80034d8:	40005000 	.word	0x40005000
 80034dc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034e0:	f7fe ff98 	bl	8002414 <HAL_RCC_GetSysClockFreq>
 80034e4:	6178      	str	r0, [r7, #20]
        break;
 80034e6:	e008      	b.n	80034fa <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034ec:	617b      	str	r3, [r7, #20]
        break;
 80034ee:	e004      	b.n	80034fa <UART_SetConfig+0x33a>
      default:
        pclk = 0U;
 80034f0:	2300      	movs	r3, #0
 80034f2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	76bb      	strb	r3, [r7, #26]
        break;
 80034f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 811d 	beq.w	800373c <UART_SetConfig+0x57c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003506:	4a97      	ldr	r2, [pc, #604]	; (8003764 <UART_SetConfig+0x5a4>)
 8003508:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800350c:	461a      	mov	r2, r3
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	fbb3 f3f2 	udiv	r3, r3, r2
 8003514:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685a      	ldr	r2, [r3, #4]
 800351a:	4613      	mov	r3, r2
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	4413      	add	r3, r2
 8003520:	68ba      	ldr	r2, [r7, #8]
 8003522:	429a      	cmp	r2, r3
 8003524:	d305      	bcc.n	8003532 <UART_SetConfig+0x372>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800352c:	68ba      	ldr	r2, [r7, #8]
 800352e:	429a      	cmp	r2, r3
 8003530:	d902      	bls.n	8003538 <UART_SetConfig+0x378>
      {
        ret = HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	76bb      	strb	r3, [r7, #26]
 8003536:	e101      	b.n	800373c <UART_SetConfig+0x57c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	4618      	mov	r0, r3
 800353c:	f04f 0100 	mov.w	r1, #0
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003544:	4a87      	ldr	r2, [pc, #540]	; (8003764 <UART_SetConfig+0x5a4>)
 8003546:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800354a:	b29b      	uxth	r3, r3
 800354c:	f04f 0400 	mov.w	r4, #0
 8003550:	461a      	mov	r2, r3
 8003552:	4623      	mov	r3, r4
 8003554:	f7fc fe76 	bl	8000244 <__aeabi_uldivmod>
 8003558:	4603      	mov	r3, r0
 800355a:	460c      	mov	r4, r1
 800355c:	4619      	mov	r1, r3
 800355e:	4622      	mov	r2, r4
 8003560:	f04f 0300 	mov.w	r3, #0
 8003564:	f04f 0400 	mov.w	r4, #0
 8003568:	0214      	lsls	r4, r2, #8
 800356a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800356e:	020b      	lsls	r3, r1, #8
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	6852      	ldr	r2, [r2, #4]
 8003574:	0852      	lsrs	r2, r2, #1
 8003576:	4611      	mov	r1, r2
 8003578:	f04f 0200 	mov.w	r2, #0
 800357c:	eb13 0b01 	adds.w	fp, r3, r1
 8003580:	eb44 0c02 	adc.w	ip, r4, r2
 8003584:	4658      	mov	r0, fp
 8003586:	4661      	mov	r1, ip
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f04f 0400 	mov.w	r4, #0
 8003590:	461a      	mov	r2, r3
 8003592:	4623      	mov	r3, r4
 8003594:	f7fc fe56 	bl	8000244 <__aeabi_uldivmod>
 8003598:	4603      	mov	r3, r0
 800359a:	460c      	mov	r4, r1
 800359c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035a4:	d308      	bcc.n	80035b8 <UART_SetConfig+0x3f8>
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035ac:	d204      	bcs.n	80035b8 <UART_SetConfig+0x3f8>
        {
          huart->Instance->BRR = usartdiv;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	60da      	str	r2, [r3, #12]
 80035b6:	e0c1      	b.n	800373c <UART_SetConfig+0x57c>
        }
        else
        {
          ret = HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	76bb      	strb	r3, [r7, #26]
 80035bc:	e0be      	b.n	800373c <UART_SetConfig+0x57c>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035c6:	d164      	bne.n	8003692 <UART_SetConfig+0x4d2>
  {
    switch (clocksource)
 80035c8:	7efb      	ldrb	r3, [r7, #27]
 80035ca:	2b08      	cmp	r3, #8
 80035cc:	d827      	bhi.n	800361e <UART_SetConfig+0x45e>
 80035ce:	a201      	add	r2, pc, #4	; (adr r2, 80035d4 <UART_SetConfig+0x414>)
 80035d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d4:	080035f9 	.word	0x080035f9
 80035d8:	08003601 	.word	0x08003601
 80035dc:	08003609 	.word	0x08003609
 80035e0:	0800361f 	.word	0x0800361f
 80035e4:	0800360f 	.word	0x0800360f
 80035e8:	0800361f 	.word	0x0800361f
 80035ec:	0800361f 	.word	0x0800361f
 80035f0:	0800361f 	.word	0x0800361f
 80035f4:	08003617 	.word	0x08003617
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035f8:	f7fe ffba 	bl	8002570 <HAL_RCC_GetPCLK1Freq>
 80035fc:	6178      	str	r0, [r7, #20]
        break;
 80035fe:	e013      	b.n	8003628 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003600:	f7fe ffca 	bl	8002598 <HAL_RCC_GetPCLK2Freq>
 8003604:	6178      	str	r0, [r7, #20]
        break;
 8003606:	e00f      	b.n	8003628 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003608:	4b57      	ldr	r3, [pc, #348]	; (8003768 <UART_SetConfig+0x5a8>)
 800360a:	617b      	str	r3, [r7, #20]
        break;
 800360c:	e00c      	b.n	8003628 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800360e:	f7fe ff01 	bl	8002414 <HAL_RCC_GetSysClockFreq>
 8003612:	6178      	str	r0, [r7, #20]
        break;
 8003614:	e008      	b.n	8003628 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003616:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800361a:	617b      	str	r3, [r7, #20]
        break;
 800361c:	e004      	b.n	8003628 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800361e:	2300      	movs	r3, #0
 8003620:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	76bb      	strb	r3, [r7, #26]
        break;
 8003626:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	2b00      	cmp	r3, #0
 800362c:	f000 8086 	beq.w	800373c <UART_SetConfig+0x57c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003634:	4a4b      	ldr	r2, [pc, #300]	; (8003764 <UART_SetConfig+0x5a4>)
 8003636:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800363a:	461a      	mov	r2, r3
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003642:	005a      	lsls	r2, r3, #1
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	085b      	lsrs	r3, r3, #1
 800364a:	441a      	add	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	fbb2 f3f3 	udiv	r3, r2, r3
 8003654:	b29b      	uxth	r3, r3
 8003656:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	2b0f      	cmp	r3, #15
 800365c:	d916      	bls.n	800368c <UART_SetConfig+0x4cc>
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003664:	d212      	bcs.n	800368c <UART_SetConfig+0x4cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	b29b      	uxth	r3, r3
 800366a:	f023 030f 	bic.w	r3, r3, #15
 800366e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	085b      	lsrs	r3, r3, #1
 8003674:	b29b      	uxth	r3, r3
 8003676:	f003 0307 	and.w	r3, r3, #7
 800367a:	b29a      	uxth	r2, r3
 800367c:	89fb      	ldrh	r3, [r7, #14]
 800367e:	4313      	orrs	r3, r2
 8003680:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	89fa      	ldrh	r2, [r7, #14]
 8003688:	60da      	str	r2, [r3, #12]
 800368a:	e057      	b.n	800373c <UART_SetConfig+0x57c>
      }
      else
      {
        ret = HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	76bb      	strb	r3, [r7, #26]
 8003690:	e054      	b.n	800373c <UART_SetConfig+0x57c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003692:	7efb      	ldrb	r3, [r7, #27]
 8003694:	2b08      	cmp	r3, #8
 8003696:	d828      	bhi.n	80036ea <UART_SetConfig+0x52a>
 8003698:	a201      	add	r2, pc, #4	; (adr r2, 80036a0 <UART_SetConfig+0x4e0>)
 800369a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800369e:	bf00      	nop
 80036a0:	080036c5 	.word	0x080036c5
 80036a4:	080036cd 	.word	0x080036cd
 80036a8:	080036d5 	.word	0x080036d5
 80036ac:	080036eb 	.word	0x080036eb
 80036b0:	080036db 	.word	0x080036db
 80036b4:	080036eb 	.word	0x080036eb
 80036b8:	080036eb 	.word	0x080036eb
 80036bc:	080036eb 	.word	0x080036eb
 80036c0:	080036e3 	.word	0x080036e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036c4:	f7fe ff54 	bl	8002570 <HAL_RCC_GetPCLK1Freq>
 80036c8:	6178      	str	r0, [r7, #20]
        break;
 80036ca:	e013      	b.n	80036f4 <UART_SetConfig+0x534>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036cc:	f7fe ff64 	bl	8002598 <HAL_RCC_GetPCLK2Freq>
 80036d0:	6178      	str	r0, [r7, #20]
        break;
 80036d2:	e00f      	b.n	80036f4 <UART_SetConfig+0x534>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036d4:	4b24      	ldr	r3, [pc, #144]	; (8003768 <UART_SetConfig+0x5a8>)
 80036d6:	617b      	str	r3, [r7, #20]
        break;
 80036d8:	e00c      	b.n	80036f4 <UART_SetConfig+0x534>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036da:	f7fe fe9b 	bl	8002414 <HAL_RCC_GetSysClockFreq>
 80036de:	6178      	str	r0, [r7, #20]
        break;
 80036e0:	e008      	b.n	80036f4 <UART_SetConfig+0x534>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036e6:	617b      	str	r3, [r7, #20]
        break;
 80036e8:	e004      	b.n	80036f4 <UART_SetConfig+0x534>
      default:
        pclk = 0U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	76bb      	strb	r3, [r7, #26]
        break;
 80036f2:	bf00      	nop
    }

    if (pclk != 0U)
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d020      	beq.n	800373c <UART_SetConfig+0x57c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fe:	4a19      	ldr	r2, [pc, #100]	; (8003764 <UART_SetConfig+0x5a4>)
 8003700:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003704:	461a      	mov	r2, r3
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	fbb3 f2f2 	udiv	r2, r3, r2
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	085b      	lsrs	r3, r3, #1
 8003712:	441a      	add	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	fbb2 f3f3 	udiv	r3, r2, r3
 800371c:	b29b      	uxth	r3, r3
 800371e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	2b0f      	cmp	r3, #15
 8003724:	d908      	bls.n	8003738 <UART_SetConfig+0x578>
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800372c:	d204      	bcs.n	8003738 <UART_SetConfig+0x578>
      {
        huart->Instance->BRR = usartdiv;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	693a      	ldr	r2, [r7, #16]
 8003734:	60da      	str	r2, [r3, #12]
 8003736:	e001      	b.n	800373c <UART_SetConfig+0x57c>
      }
      else
      {
        ret = HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003758:	7ebb      	ldrb	r3, [r7, #26]
}
 800375a:	4618      	mov	r0, r3
 800375c:	3720      	adds	r7, #32
 800375e:	46bd      	mov	sp, r7
 8003760:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003764:	080054e4 	.word	0x080054e4
 8003768:	00f42400 	.word	0x00f42400

0800376c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00a      	beq.n	8003796 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00a      	beq.n	80037b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	430a      	orrs	r2, r1
 80037b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037bc:	f003 0304 	and.w	r3, r3, #4
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00a      	beq.n	80037da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037de:	f003 0308 	and.w	r3, r3, #8
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00a      	beq.n	80037fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003800:	f003 0310 	and.w	r3, r3, #16
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00a      	beq.n	800381e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003822:	f003 0320 	and.w	r3, r3, #32
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00a      	beq.n	8003840 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	430a      	orrs	r2, r1
 800383e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003848:	2b00      	cmp	r3, #0
 800384a:	d01a      	beq.n	8003882 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003866:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800386a:	d10a      	bne.n	8003882 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	430a      	orrs	r2, r1
 8003880:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00a      	beq.n	80038a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	430a      	orrs	r2, r1
 80038a2:	605a      	str	r2, [r3, #4]
  }
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af02      	add	r7, sp, #8
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80038c0:	f7fd fc98 	bl	80011f4 <HAL_GetTick>
 80038c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0308 	and.w	r3, r3, #8
 80038d0:	2b08      	cmp	r3, #8
 80038d2:	d10e      	bne.n	80038f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038d8:	9300      	str	r3, [sp, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f82f 	bl	8003946 <UART_WaitOnFlagUntilTimeout>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e025      	b.n	800393e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0304 	and.w	r3, r3, #4
 80038fc:	2b04      	cmp	r3, #4
 80038fe:	d10e      	bne.n	800391e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003900:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f819 	bl	8003946 <UART_WaitOnFlagUntilTimeout>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e00f      	b.n	800393e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2220      	movs	r2, #32
 8003922:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2220      	movs	r2, #32
 800392a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b084      	sub	sp, #16
 800394a:	af00      	add	r7, sp, #0
 800394c:	60f8      	str	r0, [r7, #12]
 800394e:	60b9      	str	r1, [r7, #8]
 8003950:	603b      	str	r3, [r7, #0]
 8003952:	4613      	mov	r3, r2
 8003954:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003956:	e062      	b.n	8003a1e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800395e:	d05e      	beq.n	8003a1e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003960:	f7fd fc48 	bl	80011f4 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	429a      	cmp	r2, r3
 800396e:	d302      	bcc.n	8003976 <UART_WaitOnFlagUntilTimeout+0x30>
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d11d      	bne.n	80039b2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003984:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	689a      	ldr	r2, [r3, #8]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f022 0201 	bic.w	r2, r2, #1
 8003994:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2220      	movs	r2, #32
 800399a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2220      	movs	r2, #32
 80039a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e045      	b.n	8003a3e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0304 	and.w	r3, r3, #4
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d02e      	beq.n	8003a1e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	69db      	ldr	r3, [r3, #28]
 80039c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039ce:	d126      	bne.n	8003a1e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039d8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80039e8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689a      	ldr	r2, [r3, #8]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 0201 	bic.w	r2, r2, #1
 80039f8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2220      	movs	r2, #32
 80039fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2220      	movs	r2, #32
 8003a06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e00f      	b.n	8003a3e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	69da      	ldr	r2, [r3, #28]
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	4013      	ands	r3, r2
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	bf0c      	ite	eq
 8003a2e:	2301      	moveq	r3, #1
 8003a30:	2300      	movne	r3, #0
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	461a      	mov	r2, r3
 8003a36:	79fb      	ldrb	r3, [r7, #7]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d08d      	beq.n	8003958 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b085      	sub	sp, #20
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d101      	bne.n	8003a5c <HAL_UARTEx_DisableFifoMode+0x16>
 8003a58:	2302      	movs	r3, #2
 8003a5a:	e027      	b.n	8003aac <HAL_UARTEx_DisableFifoMode+0x66>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2224      	movs	r2, #36	; 0x24
 8003a68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f022 0201 	bic.w	r2, r2, #1
 8003a82:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003a8a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3714      	adds	r7, #20
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d101      	bne.n	8003ad0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003acc:	2302      	movs	r3, #2
 8003ace:	e02d      	b.n	8003b2c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2224      	movs	r2, #36	; 0x24
 8003adc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f022 0201 	bic.w	r2, r2, #1
 8003af6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	683a      	ldr	r2, [r7, #0]
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 f84f 	bl	8003bb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2220      	movs	r2, #32
 8003b1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d101      	bne.n	8003b4c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003b48:	2302      	movs	r3, #2
 8003b4a:	e02d      	b.n	8003ba8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2224      	movs	r2, #36	; 0x24
 8003b58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 0201 	bic.w	r2, r2, #1
 8003b72:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 f811 	bl	8003bb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b089      	sub	sp, #36	; 0x24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003bb8:	4a2f      	ldr	r2, [pc, #188]	; (8003c78 <UARTEx_SetNbDataToProcess+0xc8>)
 8003bba:	f107 0314 	add.w	r3, r7, #20
 8003bbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003bc2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8003bc6:	4a2d      	ldr	r2, [pc, #180]	; (8003c7c <UARTEx_SetNbDataToProcess+0xcc>)
 8003bc8:	f107 030c 	add.w	r3, r7, #12
 8003bcc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003bd0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d108      	bne.n	8003bee <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003bec:	e03d      	b.n	8003c6a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003bee:	2308      	movs	r3, #8
 8003bf0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003bf2:	2308      	movs	r3, #8
 8003bf4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	0e5b      	lsrs	r3, r3, #25
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	f003 0307 	and.w	r3, r3, #7
 8003c04:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	0f5b      	lsrs	r3, r3, #29
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	f003 0307 	and.w	r3, r3, #7
 8003c14:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8003c16:	7fbb      	ldrb	r3, [r7, #30]
 8003c18:	7f3a      	ldrb	r2, [r7, #28]
 8003c1a:	f107 0120 	add.w	r1, r7, #32
 8003c1e:	440a      	add	r2, r1
 8003c20:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003c24:	fb02 f303 	mul.w	r3, r2, r3
 8003c28:	7f3a      	ldrb	r2, [r7, #28]
 8003c2a:	f107 0120 	add.w	r1, r7, #32
 8003c2e:	440a      	add	r2, r1
 8003c30:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8003c34:	fb93 f3f2 	sdiv	r3, r3, r2
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8003c40:	7ffb      	ldrb	r3, [r7, #31]
 8003c42:	7f7a      	ldrb	r2, [r7, #29]
 8003c44:	f107 0120 	add.w	r1, r7, #32
 8003c48:	440a      	add	r2, r1
 8003c4a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003c4e:	fb02 f303 	mul.w	r3, r2, r3
 8003c52:	7f7a      	ldrb	r2, [r7, #29]
 8003c54:	f107 0120 	add.w	r1, r7, #32
 8003c58:	440a      	add	r2, r1
 8003c5a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8003c5e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003c6a:	bf00      	nop
 8003c6c:	3724      	adds	r7, #36	; 0x24
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	08005070 	.word	0x08005070
 8003c7c:	08005078 	.word	0x08005078

08003c80 <__errno>:
 8003c80:	4b01      	ldr	r3, [pc, #4]	; (8003c88 <__errno+0x8>)
 8003c82:	6818      	ldr	r0, [r3, #0]
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	2000000c 	.word	0x2000000c

08003c8c <exit>:
 8003c8c:	b508      	push	{r3, lr}
 8003c8e:	4b07      	ldr	r3, [pc, #28]	; (8003cac <exit+0x20>)
 8003c90:	4604      	mov	r4, r0
 8003c92:	b113      	cbz	r3, 8003c9a <exit+0xe>
 8003c94:	2100      	movs	r1, #0
 8003c96:	e000      	b.n	8003c9a <exit+0xe>
 8003c98:	bf00      	nop
 8003c9a:	4b05      	ldr	r3, [pc, #20]	; (8003cb0 <exit+0x24>)
 8003c9c:	6818      	ldr	r0, [r3, #0]
 8003c9e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003ca0:	b103      	cbz	r3, 8003ca4 <exit+0x18>
 8003ca2:	4798      	blx	r3
 8003ca4:	4620      	mov	r0, r4
 8003ca6:	f7fc ff33 	bl	8000b10 <_exit>
 8003caa:	bf00      	nop
 8003cac:	00000000 	.word	0x00000000
 8003cb0:	080054fc 	.word	0x080054fc

08003cb4 <_fwrite_r>:
 8003cb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cb8:	9c08      	ldr	r4, [sp, #32]
 8003cba:	4689      	mov	r9, r1
 8003cbc:	4617      	mov	r7, r2
 8003cbe:	fb02 f803 	mul.w	r8, r2, r3
 8003cc2:	4606      	mov	r6, r0
 8003cc4:	b118      	cbz	r0, 8003cce <_fwrite_r+0x1a>
 8003cc6:	6983      	ldr	r3, [r0, #24]
 8003cc8:	b90b      	cbnz	r3, 8003cce <_fwrite_r+0x1a>
 8003cca:	f000 fb83 	bl	80043d4 <__sinit>
 8003cce:	4b1d      	ldr	r3, [pc, #116]	; (8003d44 <_fwrite_r+0x90>)
 8003cd0:	429c      	cmp	r4, r3
 8003cd2:	d11a      	bne.n	8003d0a <_fwrite_r+0x56>
 8003cd4:	6874      	ldr	r4, [r6, #4]
 8003cd6:	89a3      	ldrh	r3, [r4, #12]
 8003cd8:	071b      	lsls	r3, r3, #28
 8003cda:	d520      	bpl.n	8003d1e <_fwrite_r+0x6a>
 8003cdc:	6923      	ldr	r3, [r4, #16]
 8003cde:	b1f3      	cbz	r3, 8003d1e <_fwrite_r+0x6a>
 8003ce0:	2500      	movs	r5, #0
 8003ce2:	4545      	cmp	r5, r8
 8003ce4:	d029      	beq.n	8003d3a <_fwrite_r+0x86>
 8003ce6:	68a3      	ldr	r3, [r4, #8]
 8003ce8:	f819 1005 	ldrb.w	r1, [r9, r5]
 8003cec:	3b01      	subs	r3, #1
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	60a3      	str	r3, [r4, #8]
 8003cf2:	da04      	bge.n	8003cfe <_fwrite_r+0x4a>
 8003cf4:	69a2      	ldr	r2, [r4, #24]
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	db19      	blt.n	8003d2e <_fwrite_r+0x7a>
 8003cfa:	290a      	cmp	r1, #10
 8003cfc:	d017      	beq.n	8003d2e <_fwrite_r+0x7a>
 8003cfe:	6823      	ldr	r3, [r4, #0]
 8003d00:	1c5a      	adds	r2, r3, #1
 8003d02:	6022      	str	r2, [r4, #0]
 8003d04:	7019      	strb	r1, [r3, #0]
 8003d06:	3501      	adds	r5, #1
 8003d08:	e7eb      	b.n	8003ce2 <_fwrite_r+0x2e>
 8003d0a:	4b0f      	ldr	r3, [pc, #60]	; (8003d48 <_fwrite_r+0x94>)
 8003d0c:	429c      	cmp	r4, r3
 8003d0e:	d101      	bne.n	8003d14 <_fwrite_r+0x60>
 8003d10:	68b4      	ldr	r4, [r6, #8]
 8003d12:	e7e0      	b.n	8003cd6 <_fwrite_r+0x22>
 8003d14:	4b0d      	ldr	r3, [pc, #52]	; (8003d4c <_fwrite_r+0x98>)
 8003d16:	429c      	cmp	r4, r3
 8003d18:	bf08      	it	eq
 8003d1a:	68f4      	ldreq	r4, [r6, #12]
 8003d1c:	e7db      	b.n	8003cd6 <_fwrite_r+0x22>
 8003d1e:	4621      	mov	r1, r4
 8003d20:	4630      	mov	r0, r6
 8003d22:	f000 f9eb 	bl	80040fc <__swsetup_r>
 8003d26:	2800      	cmp	r0, #0
 8003d28:	d0da      	beq.n	8003ce0 <_fwrite_r+0x2c>
 8003d2a:	2500      	movs	r5, #0
 8003d2c:	e005      	b.n	8003d3a <_fwrite_r+0x86>
 8003d2e:	4622      	mov	r2, r4
 8003d30:	4630      	mov	r0, r6
 8003d32:	f000 f97f 	bl	8004034 <__swbuf_r>
 8003d36:	3001      	adds	r0, #1
 8003d38:	d1e5      	bne.n	8003d06 <_fwrite_r+0x52>
 8003d3a:	fbb5 f0f7 	udiv	r0, r5, r7
 8003d3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d42:	bf00      	nop
 8003d44:	08005520 	.word	0x08005520
 8003d48:	08005540 	.word	0x08005540
 8003d4c:	08005500 	.word	0x08005500

08003d50 <fwrite>:
 8003d50:	b507      	push	{r0, r1, r2, lr}
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	4613      	mov	r3, r2
 8003d56:	460a      	mov	r2, r1
 8003d58:	4601      	mov	r1, r0
 8003d5a:	4803      	ldr	r0, [pc, #12]	; (8003d68 <fwrite+0x18>)
 8003d5c:	6800      	ldr	r0, [r0, #0]
 8003d5e:	f7ff ffa9 	bl	8003cb4 <_fwrite_r>
 8003d62:	b003      	add	sp, #12
 8003d64:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d68:	2000000c 	.word	0x2000000c

08003d6c <__libc_init_array>:
 8003d6c:	b570      	push	{r4, r5, r6, lr}
 8003d6e:	4e0d      	ldr	r6, [pc, #52]	; (8003da4 <__libc_init_array+0x38>)
 8003d70:	2500      	movs	r5, #0
 8003d72:	4c0d      	ldr	r4, [pc, #52]	; (8003da8 <__libc_init_array+0x3c>)
 8003d74:	1ba4      	subs	r4, r4, r6
 8003d76:	10a4      	asrs	r4, r4, #2
 8003d78:	42a5      	cmp	r5, r4
 8003d7a:	d109      	bne.n	8003d90 <__libc_init_array+0x24>
 8003d7c:	4e0b      	ldr	r6, [pc, #44]	; (8003dac <__libc_init_array+0x40>)
 8003d7e:	2500      	movs	r5, #0
 8003d80:	4c0b      	ldr	r4, [pc, #44]	; (8003db0 <__libc_init_array+0x44>)
 8003d82:	f001 f955 	bl	8005030 <_init>
 8003d86:	1ba4      	subs	r4, r4, r6
 8003d88:	10a4      	asrs	r4, r4, #2
 8003d8a:	42a5      	cmp	r5, r4
 8003d8c:	d105      	bne.n	8003d9a <__libc_init_array+0x2e>
 8003d8e:	bd70      	pop	{r4, r5, r6, pc}
 8003d90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d94:	3501      	adds	r5, #1
 8003d96:	4798      	blx	r3
 8003d98:	e7ee      	b.n	8003d78 <__libc_init_array+0xc>
 8003d9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d9e:	3501      	adds	r5, #1
 8003da0:	4798      	blx	r3
 8003da2:	e7f2      	b.n	8003d8a <__libc_init_array+0x1e>
 8003da4:	08005694 	.word	0x08005694
 8003da8:	08005694 	.word	0x08005694
 8003dac:	08005694 	.word	0x08005694
 8003db0:	08005698 	.word	0x08005698

08003db4 <malloc>:
 8003db4:	4b02      	ldr	r3, [pc, #8]	; (8003dc0 <malloc+0xc>)
 8003db6:	4601      	mov	r1, r0
 8003db8:	6818      	ldr	r0, [r3, #0]
 8003dba:	f000 b859 	b.w	8003e70 <_malloc_r>
 8003dbe:	bf00      	nop
 8003dc0:	2000000c 	.word	0x2000000c

08003dc4 <memset>:
 8003dc4:	4402      	add	r2, r0
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d100      	bne.n	8003dce <memset+0xa>
 8003dcc:	4770      	bx	lr
 8003dce:	f803 1b01 	strb.w	r1, [r3], #1
 8003dd2:	e7f9      	b.n	8003dc8 <memset+0x4>

08003dd4 <_free_r>:
 8003dd4:	b538      	push	{r3, r4, r5, lr}
 8003dd6:	4605      	mov	r5, r0
 8003dd8:	2900      	cmp	r1, #0
 8003dda:	d045      	beq.n	8003e68 <_free_r+0x94>
 8003ddc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003de0:	1f0c      	subs	r4, r1, #4
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	bfb8      	it	lt
 8003de6:	18e4      	addlt	r4, r4, r3
 8003de8:	f000 fbf4 	bl	80045d4 <__malloc_lock>
 8003dec:	4a1f      	ldr	r2, [pc, #124]	; (8003e6c <_free_r+0x98>)
 8003dee:	6813      	ldr	r3, [r2, #0]
 8003df0:	4610      	mov	r0, r2
 8003df2:	b933      	cbnz	r3, 8003e02 <_free_r+0x2e>
 8003df4:	6063      	str	r3, [r4, #4]
 8003df6:	6014      	str	r4, [r2, #0]
 8003df8:	4628      	mov	r0, r5
 8003dfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003dfe:	f000 bbea 	b.w	80045d6 <__malloc_unlock>
 8003e02:	42a3      	cmp	r3, r4
 8003e04:	d90c      	bls.n	8003e20 <_free_r+0x4c>
 8003e06:	6821      	ldr	r1, [r4, #0]
 8003e08:	1862      	adds	r2, r4, r1
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	bf02      	ittt	eq
 8003e0e:	681a      	ldreq	r2, [r3, #0]
 8003e10:	685b      	ldreq	r3, [r3, #4]
 8003e12:	1852      	addeq	r2, r2, r1
 8003e14:	6063      	str	r3, [r4, #4]
 8003e16:	bf08      	it	eq
 8003e18:	6022      	streq	r2, [r4, #0]
 8003e1a:	6004      	str	r4, [r0, #0]
 8003e1c:	e7ec      	b.n	8003df8 <_free_r+0x24>
 8003e1e:	4613      	mov	r3, r2
 8003e20:	685a      	ldr	r2, [r3, #4]
 8003e22:	b10a      	cbz	r2, 8003e28 <_free_r+0x54>
 8003e24:	42a2      	cmp	r2, r4
 8003e26:	d9fa      	bls.n	8003e1e <_free_r+0x4a>
 8003e28:	6819      	ldr	r1, [r3, #0]
 8003e2a:	1858      	adds	r0, r3, r1
 8003e2c:	42a0      	cmp	r0, r4
 8003e2e:	d10b      	bne.n	8003e48 <_free_r+0x74>
 8003e30:	6820      	ldr	r0, [r4, #0]
 8003e32:	4401      	add	r1, r0
 8003e34:	1858      	adds	r0, r3, r1
 8003e36:	6019      	str	r1, [r3, #0]
 8003e38:	4282      	cmp	r2, r0
 8003e3a:	d1dd      	bne.n	8003df8 <_free_r+0x24>
 8003e3c:	6810      	ldr	r0, [r2, #0]
 8003e3e:	6852      	ldr	r2, [r2, #4]
 8003e40:	4401      	add	r1, r0
 8003e42:	605a      	str	r2, [r3, #4]
 8003e44:	6019      	str	r1, [r3, #0]
 8003e46:	e7d7      	b.n	8003df8 <_free_r+0x24>
 8003e48:	d902      	bls.n	8003e50 <_free_r+0x7c>
 8003e4a:	230c      	movs	r3, #12
 8003e4c:	602b      	str	r3, [r5, #0]
 8003e4e:	e7d3      	b.n	8003df8 <_free_r+0x24>
 8003e50:	6820      	ldr	r0, [r4, #0]
 8003e52:	1821      	adds	r1, r4, r0
 8003e54:	428a      	cmp	r2, r1
 8003e56:	bf02      	ittt	eq
 8003e58:	6811      	ldreq	r1, [r2, #0]
 8003e5a:	6852      	ldreq	r2, [r2, #4]
 8003e5c:	1809      	addeq	r1, r1, r0
 8003e5e:	6062      	str	r2, [r4, #4]
 8003e60:	bf08      	it	eq
 8003e62:	6021      	streq	r1, [r4, #0]
 8003e64:	605c      	str	r4, [r3, #4]
 8003e66:	e7c7      	b.n	8003df8 <_free_r+0x24>
 8003e68:	bd38      	pop	{r3, r4, r5, pc}
 8003e6a:	bf00      	nop
 8003e6c:	2000197c 	.word	0x2000197c

08003e70 <_malloc_r>:
 8003e70:	b570      	push	{r4, r5, r6, lr}
 8003e72:	1ccd      	adds	r5, r1, #3
 8003e74:	4606      	mov	r6, r0
 8003e76:	f025 0503 	bic.w	r5, r5, #3
 8003e7a:	3508      	adds	r5, #8
 8003e7c:	2d0c      	cmp	r5, #12
 8003e7e:	bf38      	it	cc
 8003e80:	250c      	movcc	r5, #12
 8003e82:	2d00      	cmp	r5, #0
 8003e84:	db01      	blt.n	8003e8a <_malloc_r+0x1a>
 8003e86:	42a9      	cmp	r1, r5
 8003e88:	d903      	bls.n	8003e92 <_malloc_r+0x22>
 8003e8a:	230c      	movs	r3, #12
 8003e8c:	6033      	str	r3, [r6, #0]
 8003e8e:	2000      	movs	r0, #0
 8003e90:	bd70      	pop	{r4, r5, r6, pc}
 8003e92:	f000 fb9f 	bl	80045d4 <__malloc_lock>
 8003e96:	4a21      	ldr	r2, [pc, #132]	; (8003f1c <_malloc_r+0xac>)
 8003e98:	6814      	ldr	r4, [r2, #0]
 8003e9a:	4621      	mov	r1, r4
 8003e9c:	b991      	cbnz	r1, 8003ec4 <_malloc_r+0x54>
 8003e9e:	4c20      	ldr	r4, [pc, #128]	; (8003f20 <_malloc_r+0xb0>)
 8003ea0:	6823      	ldr	r3, [r4, #0]
 8003ea2:	b91b      	cbnz	r3, 8003eac <_malloc_r+0x3c>
 8003ea4:	4630      	mov	r0, r6
 8003ea6:	f000 f83d 	bl	8003f24 <_sbrk_r>
 8003eaa:	6020      	str	r0, [r4, #0]
 8003eac:	4629      	mov	r1, r5
 8003eae:	4630      	mov	r0, r6
 8003eb0:	f000 f838 	bl	8003f24 <_sbrk_r>
 8003eb4:	1c43      	adds	r3, r0, #1
 8003eb6:	d124      	bne.n	8003f02 <_malloc_r+0x92>
 8003eb8:	230c      	movs	r3, #12
 8003eba:	4630      	mov	r0, r6
 8003ebc:	6033      	str	r3, [r6, #0]
 8003ebe:	f000 fb8a 	bl	80045d6 <__malloc_unlock>
 8003ec2:	e7e4      	b.n	8003e8e <_malloc_r+0x1e>
 8003ec4:	680b      	ldr	r3, [r1, #0]
 8003ec6:	1b5b      	subs	r3, r3, r5
 8003ec8:	d418      	bmi.n	8003efc <_malloc_r+0x8c>
 8003eca:	2b0b      	cmp	r3, #11
 8003ecc:	d90f      	bls.n	8003eee <_malloc_r+0x7e>
 8003ece:	18cc      	adds	r4, r1, r3
 8003ed0:	600b      	str	r3, [r1, #0]
 8003ed2:	50cd      	str	r5, [r1, r3]
 8003ed4:	4630      	mov	r0, r6
 8003ed6:	f000 fb7e 	bl	80045d6 <__malloc_unlock>
 8003eda:	f104 000b 	add.w	r0, r4, #11
 8003ede:	1d23      	adds	r3, r4, #4
 8003ee0:	f020 0007 	bic.w	r0, r0, #7
 8003ee4:	1ac3      	subs	r3, r0, r3
 8003ee6:	d0d3      	beq.n	8003e90 <_malloc_r+0x20>
 8003ee8:	425a      	negs	r2, r3
 8003eea:	50e2      	str	r2, [r4, r3]
 8003eec:	e7d0      	b.n	8003e90 <_malloc_r+0x20>
 8003eee:	428c      	cmp	r4, r1
 8003ef0:	684b      	ldr	r3, [r1, #4]
 8003ef2:	bf1a      	itte	ne
 8003ef4:	6063      	strne	r3, [r4, #4]
 8003ef6:	460c      	movne	r4, r1
 8003ef8:	6013      	streq	r3, [r2, #0]
 8003efa:	e7eb      	b.n	8003ed4 <_malloc_r+0x64>
 8003efc:	460c      	mov	r4, r1
 8003efe:	6849      	ldr	r1, [r1, #4]
 8003f00:	e7cc      	b.n	8003e9c <_malloc_r+0x2c>
 8003f02:	1cc4      	adds	r4, r0, #3
 8003f04:	f024 0403 	bic.w	r4, r4, #3
 8003f08:	42a0      	cmp	r0, r4
 8003f0a:	d005      	beq.n	8003f18 <_malloc_r+0xa8>
 8003f0c:	1a21      	subs	r1, r4, r0
 8003f0e:	4630      	mov	r0, r6
 8003f10:	f000 f808 	bl	8003f24 <_sbrk_r>
 8003f14:	3001      	adds	r0, #1
 8003f16:	d0cf      	beq.n	8003eb8 <_malloc_r+0x48>
 8003f18:	6025      	str	r5, [r4, #0]
 8003f1a:	e7db      	b.n	8003ed4 <_malloc_r+0x64>
 8003f1c:	2000197c 	.word	0x2000197c
 8003f20:	20001980 	.word	0x20001980

08003f24 <_sbrk_r>:
 8003f24:	b538      	push	{r3, r4, r5, lr}
 8003f26:	2300      	movs	r3, #0
 8003f28:	4c05      	ldr	r4, [pc, #20]	; (8003f40 <_sbrk_r+0x1c>)
 8003f2a:	4605      	mov	r5, r0
 8003f2c:	4608      	mov	r0, r1
 8003f2e:	6023      	str	r3, [r4, #0]
 8003f30:	f7fc fe66 	bl	8000c00 <_sbrk>
 8003f34:	1c43      	adds	r3, r0, #1
 8003f36:	d102      	bne.n	8003f3e <_sbrk_r+0x1a>
 8003f38:	6823      	ldr	r3, [r4, #0]
 8003f3a:	b103      	cbz	r3, 8003f3e <_sbrk_r+0x1a>
 8003f3c:	602b      	str	r3, [r5, #0]
 8003f3e:	bd38      	pop	{r3, r4, r5, pc}
 8003f40:	20001a24 	.word	0x20001a24

08003f44 <siscanf>:
 8003f44:	b40e      	push	{r1, r2, r3}
 8003f46:	b530      	push	{r4, r5, lr}
 8003f48:	b09c      	sub	sp, #112	; 0x70
 8003f4a:	f44f 7201 	mov.w	r2, #516	; 0x204
 8003f4e:	ac1f      	add	r4, sp, #124	; 0x7c
 8003f50:	f8ad 2014 	strh.w	r2, [sp, #20]
 8003f54:	9002      	str	r0, [sp, #8]
 8003f56:	f854 5b04 	ldr.w	r5, [r4], #4
 8003f5a:	9006      	str	r0, [sp, #24]
 8003f5c:	f7fc f96a 	bl	8000234 <strlen>
 8003f60:	4b0b      	ldr	r3, [pc, #44]	; (8003f90 <siscanf+0x4c>)
 8003f62:	462a      	mov	r2, r5
 8003f64:	9003      	str	r0, [sp, #12]
 8003f66:	a902      	add	r1, sp, #8
 8003f68:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	9007      	str	r0, [sp, #28]
 8003f6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8003f70:	9314      	str	r3, [sp, #80]	; 0x50
 8003f72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f76:	4807      	ldr	r0, [pc, #28]	; (8003f94 <siscanf+0x50>)
 8003f78:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003f7c:	4623      	mov	r3, r4
 8003f7e:	6800      	ldr	r0, [r0, #0]
 8003f80:	9401      	str	r4, [sp, #4]
 8003f82:	f000 fb83 	bl	800468c <__ssvfiscanf_r>
 8003f86:	b01c      	add	sp, #112	; 0x70
 8003f88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f8c:	b003      	add	sp, #12
 8003f8e:	4770      	bx	lr
 8003f90:	08003fbb 	.word	0x08003fbb
 8003f94:	2000000c 	.word	0x2000000c

08003f98 <__sread>:
 8003f98:	b510      	push	{r4, lr}
 8003f9a:	460c      	mov	r4, r1
 8003f9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fa0:	f000 fe16 	bl	8004bd0 <_read_r>
 8003fa4:	2800      	cmp	r0, #0
 8003fa6:	bfab      	itete	ge
 8003fa8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003faa:	89a3      	ldrhlt	r3, [r4, #12]
 8003fac:	181b      	addge	r3, r3, r0
 8003fae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003fb2:	bfac      	ite	ge
 8003fb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8003fb6:	81a3      	strhlt	r3, [r4, #12]
 8003fb8:	bd10      	pop	{r4, pc}

08003fba <__seofread>:
 8003fba:	2000      	movs	r0, #0
 8003fbc:	4770      	bx	lr

08003fbe <__swrite>:
 8003fbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fc2:	461f      	mov	r7, r3
 8003fc4:	898b      	ldrh	r3, [r1, #12]
 8003fc6:	4605      	mov	r5, r0
 8003fc8:	460c      	mov	r4, r1
 8003fca:	05db      	lsls	r3, r3, #23
 8003fcc:	4616      	mov	r6, r2
 8003fce:	d505      	bpl.n	8003fdc <__swrite+0x1e>
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fd8:	f000 fa86 	bl	80044e8 <_lseek_r>
 8003fdc:	89a3      	ldrh	r3, [r4, #12]
 8003fde:	4632      	mov	r2, r6
 8003fe0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fe4:	4628      	mov	r0, r5
 8003fe6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fea:	81a3      	strh	r3, [r4, #12]
 8003fec:	463b      	mov	r3, r7
 8003fee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ff2:	f000 b871 	b.w	80040d8 <_write_r>

08003ff6 <__sseek>:
 8003ff6:	b510      	push	{r4, lr}
 8003ff8:	460c      	mov	r4, r1
 8003ffa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ffe:	f000 fa73 	bl	80044e8 <_lseek_r>
 8004002:	1c43      	adds	r3, r0, #1
 8004004:	89a3      	ldrh	r3, [r4, #12]
 8004006:	bf15      	itete	ne
 8004008:	6560      	strne	r0, [r4, #84]	; 0x54
 800400a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800400e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004012:	81a3      	strheq	r3, [r4, #12]
 8004014:	bf18      	it	ne
 8004016:	81a3      	strhne	r3, [r4, #12]
 8004018:	bd10      	pop	{r4, pc}

0800401a <__sclose>:
 800401a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800401e:	f000 b8db 	b.w	80041d8 <_close_r>

08004022 <strcpy>:
 8004022:	4603      	mov	r3, r0
 8004024:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004028:	f803 2b01 	strb.w	r2, [r3], #1
 800402c:	2a00      	cmp	r2, #0
 800402e:	d1f9      	bne.n	8004024 <strcpy+0x2>
 8004030:	4770      	bx	lr
	...

08004034 <__swbuf_r>:
 8004034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004036:	460e      	mov	r6, r1
 8004038:	4614      	mov	r4, r2
 800403a:	4605      	mov	r5, r0
 800403c:	b118      	cbz	r0, 8004046 <__swbuf_r+0x12>
 800403e:	6983      	ldr	r3, [r0, #24]
 8004040:	b90b      	cbnz	r3, 8004046 <__swbuf_r+0x12>
 8004042:	f000 f9c7 	bl	80043d4 <__sinit>
 8004046:	4b21      	ldr	r3, [pc, #132]	; (80040cc <__swbuf_r+0x98>)
 8004048:	429c      	cmp	r4, r3
 800404a:	d12a      	bne.n	80040a2 <__swbuf_r+0x6e>
 800404c:	686c      	ldr	r4, [r5, #4]
 800404e:	69a3      	ldr	r3, [r4, #24]
 8004050:	60a3      	str	r3, [r4, #8]
 8004052:	89a3      	ldrh	r3, [r4, #12]
 8004054:	071a      	lsls	r2, r3, #28
 8004056:	d52e      	bpl.n	80040b6 <__swbuf_r+0x82>
 8004058:	6923      	ldr	r3, [r4, #16]
 800405a:	b363      	cbz	r3, 80040b6 <__swbuf_r+0x82>
 800405c:	6923      	ldr	r3, [r4, #16]
 800405e:	b2f6      	uxtb	r6, r6
 8004060:	6820      	ldr	r0, [r4, #0]
 8004062:	4637      	mov	r7, r6
 8004064:	1ac0      	subs	r0, r0, r3
 8004066:	6963      	ldr	r3, [r4, #20]
 8004068:	4283      	cmp	r3, r0
 800406a:	dc04      	bgt.n	8004076 <__swbuf_r+0x42>
 800406c:	4621      	mov	r1, r4
 800406e:	4628      	mov	r0, r5
 8004070:	f000 f946 	bl	8004300 <_fflush_r>
 8004074:	bb28      	cbnz	r0, 80040c2 <__swbuf_r+0x8e>
 8004076:	68a3      	ldr	r3, [r4, #8]
 8004078:	3001      	adds	r0, #1
 800407a:	3b01      	subs	r3, #1
 800407c:	60a3      	str	r3, [r4, #8]
 800407e:	6823      	ldr	r3, [r4, #0]
 8004080:	1c5a      	adds	r2, r3, #1
 8004082:	6022      	str	r2, [r4, #0]
 8004084:	701e      	strb	r6, [r3, #0]
 8004086:	6963      	ldr	r3, [r4, #20]
 8004088:	4283      	cmp	r3, r0
 800408a:	d004      	beq.n	8004096 <__swbuf_r+0x62>
 800408c:	89a3      	ldrh	r3, [r4, #12]
 800408e:	07db      	lsls	r3, r3, #31
 8004090:	d519      	bpl.n	80040c6 <__swbuf_r+0x92>
 8004092:	2e0a      	cmp	r6, #10
 8004094:	d117      	bne.n	80040c6 <__swbuf_r+0x92>
 8004096:	4621      	mov	r1, r4
 8004098:	4628      	mov	r0, r5
 800409a:	f000 f931 	bl	8004300 <_fflush_r>
 800409e:	b190      	cbz	r0, 80040c6 <__swbuf_r+0x92>
 80040a0:	e00f      	b.n	80040c2 <__swbuf_r+0x8e>
 80040a2:	4b0b      	ldr	r3, [pc, #44]	; (80040d0 <__swbuf_r+0x9c>)
 80040a4:	429c      	cmp	r4, r3
 80040a6:	d101      	bne.n	80040ac <__swbuf_r+0x78>
 80040a8:	68ac      	ldr	r4, [r5, #8]
 80040aa:	e7d0      	b.n	800404e <__swbuf_r+0x1a>
 80040ac:	4b09      	ldr	r3, [pc, #36]	; (80040d4 <__swbuf_r+0xa0>)
 80040ae:	429c      	cmp	r4, r3
 80040b0:	bf08      	it	eq
 80040b2:	68ec      	ldreq	r4, [r5, #12]
 80040b4:	e7cb      	b.n	800404e <__swbuf_r+0x1a>
 80040b6:	4621      	mov	r1, r4
 80040b8:	4628      	mov	r0, r5
 80040ba:	f000 f81f 	bl	80040fc <__swsetup_r>
 80040be:	2800      	cmp	r0, #0
 80040c0:	d0cc      	beq.n	800405c <__swbuf_r+0x28>
 80040c2:	f04f 37ff 	mov.w	r7, #4294967295
 80040c6:	4638      	mov	r0, r7
 80040c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040ca:	bf00      	nop
 80040cc:	08005520 	.word	0x08005520
 80040d0:	08005540 	.word	0x08005540
 80040d4:	08005500 	.word	0x08005500

080040d8 <_write_r>:
 80040d8:	b538      	push	{r3, r4, r5, lr}
 80040da:	4605      	mov	r5, r0
 80040dc:	4c06      	ldr	r4, [pc, #24]	; (80040f8 <_write_r+0x20>)
 80040de:	4608      	mov	r0, r1
 80040e0:	4611      	mov	r1, r2
 80040e2:	2200      	movs	r2, #0
 80040e4:	6022      	str	r2, [r4, #0]
 80040e6:	461a      	mov	r2, r3
 80040e8:	f7fc fd39 	bl	8000b5e <_write>
 80040ec:	1c43      	adds	r3, r0, #1
 80040ee:	d102      	bne.n	80040f6 <_write_r+0x1e>
 80040f0:	6823      	ldr	r3, [r4, #0]
 80040f2:	b103      	cbz	r3, 80040f6 <_write_r+0x1e>
 80040f4:	602b      	str	r3, [r5, #0]
 80040f6:	bd38      	pop	{r3, r4, r5, pc}
 80040f8:	20001a24 	.word	0x20001a24

080040fc <__swsetup_r>:
 80040fc:	4b32      	ldr	r3, [pc, #200]	; (80041c8 <__swsetup_r+0xcc>)
 80040fe:	b570      	push	{r4, r5, r6, lr}
 8004100:	681d      	ldr	r5, [r3, #0]
 8004102:	4606      	mov	r6, r0
 8004104:	460c      	mov	r4, r1
 8004106:	b125      	cbz	r5, 8004112 <__swsetup_r+0x16>
 8004108:	69ab      	ldr	r3, [r5, #24]
 800410a:	b913      	cbnz	r3, 8004112 <__swsetup_r+0x16>
 800410c:	4628      	mov	r0, r5
 800410e:	f000 f961 	bl	80043d4 <__sinit>
 8004112:	4b2e      	ldr	r3, [pc, #184]	; (80041cc <__swsetup_r+0xd0>)
 8004114:	429c      	cmp	r4, r3
 8004116:	d10f      	bne.n	8004138 <__swsetup_r+0x3c>
 8004118:	686c      	ldr	r4, [r5, #4]
 800411a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800411e:	b29a      	uxth	r2, r3
 8004120:	0715      	lsls	r5, r2, #28
 8004122:	d42c      	bmi.n	800417e <__swsetup_r+0x82>
 8004124:	06d0      	lsls	r0, r2, #27
 8004126:	d411      	bmi.n	800414c <__swsetup_r+0x50>
 8004128:	2209      	movs	r2, #9
 800412a:	6032      	str	r2, [r6, #0]
 800412c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004130:	f04f 30ff 	mov.w	r0, #4294967295
 8004134:	81a3      	strh	r3, [r4, #12]
 8004136:	e03e      	b.n	80041b6 <__swsetup_r+0xba>
 8004138:	4b25      	ldr	r3, [pc, #148]	; (80041d0 <__swsetup_r+0xd4>)
 800413a:	429c      	cmp	r4, r3
 800413c:	d101      	bne.n	8004142 <__swsetup_r+0x46>
 800413e:	68ac      	ldr	r4, [r5, #8]
 8004140:	e7eb      	b.n	800411a <__swsetup_r+0x1e>
 8004142:	4b24      	ldr	r3, [pc, #144]	; (80041d4 <__swsetup_r+0xd8>)
 8004144:	429c      	cmp	r4, r3
 8004146:	bf08      	it	eq
 8004148:	68ec      	ldreq	r4, [r5, #12]
 800414a:	e7e6      	b.n	800411a <__swsetup_r+0x1e>
 800414c:	0751      	lsls	r1, r2, #29
 800414e:	d512      	bpl.n	8004176 <__swsetup_r+0x7a>
 8004150:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004152:	b141      	cbz	r1, 8004166 <__swsetup_r+0x6a>
 8004154:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004158:	4299      	cmp	r1, r3
 800415a:	d002      	beq.n	8004162 <__swsetup_r+0x66>
 800415c:	4630      	mov	r0, r6
 800415e:	f7ff fe39 	bl	8003dd4 <_free_r>
 8004162:	2300      	movs	r3, #0
 8004164:	6363      	str	r3, [r4, #52]	; 0x34
 8004166:	89a3      	ldrh	r3, [r4, #12]
 8004168:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800416c:	81a3      	strh	r3, [r4, #12]
 800416e:	2300      	movs	r3, #0
 8004170:	6063      	str	r3, [r4, #4]
 8004172:	6923      	ldr	r3, [r4, #16]
 8004174:	6023      	str	r3, [r4, #0]
 8004176:	89a3      	ldrh	r3, [r4, #12]
 8004178:	f043 0308 	orr.w	r3, r3, #8
 800417c:	81a3      	strh	r3, [r4, #12]
 800417e:	6923      	ldr	r3, [r4, #16]
 8004180:	b94b      	cbnz	r3, 8004196 <__swsetup_r+0x9a>
 8004182:	89a3      	ldrh	r3, [r4, #12]
 8004184:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004188:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800418c:	d003      	beq.n	8004196 <__swsetup_r+0x9a>
 800418e:	4621      	mov	r1, r4
 8004190:	4630      	mov	r0, r6
 8004192:	f000 f9df 	bl	8004554 <__smakebuf_r>
 8004196:	89a2      	ldrh	r2, [r4, #12]
 8004198:	f012 0301 	ands.w	r3, r2, #1
 800419c:	d00c      	beq.n	80041b8 <__swsetup_r+0xbc>
 800419e:	2300      	movs	r3, #0
 80041a0:	60a3      	str	r3, [r4, #8]
 80041a2:	6963      	ldr	r3, [r4, #20]
 80041a4:	425b      	negs	r3, r3
 80041a6:	61a3      	str	r3, [r4, #24]
 80041a8:	6923      	ldr	r3, [r4, #16]
 80041aa:	b953      	cbnz	r3, 80041c2 <__swsetup_r+0xc6>
 80041ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041b0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80041b4:	d1ba      	bne.n	800412c <__swsetup_r+0x30>
 80041b6:	bd70      	pop	{r4, r5, r6, pc}
 80041b8:	0792      	lsls	r2, r2, #30
 80041ba:	bf58      	it	pl
 80041bc:	6963      	ldrpl	r3, [r4, #20]
 80041be:	60a3      	str	r3, [r4, #8]
 80041c0:	e7f2      	b.n	80041a8 <__swsetup_r+0xac>
 80041c2:	2000      	movs	r0, #0
 80041c4:	e7f7      	b.n	80041b6 <__swsetup_r+0xba>
 80041c6:	bf00      	nop
 80041c8:	2000000c 	.word	0x2000000c
 80041cc:	08005520 	.word	0x08005520
 80041d0:	08005540 	.word	0x08005540
 80041d4:	08005500 	.word	0x08005500

080041d8 <_close_r>:
 80041d8:	b538      	push	{r3, r4, r5, lr}
 80041da:	2300      	movs	r3, #0
 80041dc:	4c05      	ldr	r4, [pc, #20]	; (80041f4 <_close_r+0x1c>)
 80041de:	4605      	mov	r5, r0
 80041e0:	4608      	mov	r0, r1
 80041e2:	6023      	str	r3, [r4, #0]
 80041e4:	f7fc fcd7 	bl	8000b96 <_close>
 80041e8:	1c43      	adds	r3, r0, #1
 80041ea:	d102      	bne.n	80041f2 <_close_r+0x1a>
 80041ec:	6823      	ldr	r3, [r4, #0]
 80041ee:	b103      	cbz	r3, 80041f2 <_close_r+0x1a>
 80041f0:	602b      	str	r3, [r5, #0]
 80041f2:	bd38      	pop	{r3, r4, r5, pc}
 80041f4:	20001a24 	.word	0x20001a24

080041f8 <__sflush_r>:
 80041f8:	898a      	ldrh	r2, [r1, #12]
 80041fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041fe:	4605      	mov	r5, r0
 8004200:	0710      	lsls	r0, r2, #28
 8004202:	460c      	mov	r4, r1
 8004204:	d458      	bmi.n	80042b8 <__sflush_r+0xc0>
 8004206:	684b      	ldr	r3, [r1, #4]
 8004208:	2b00      	cmp	r3, #0
 800420a:	dc05      	bgt.n	8004218 <__sflush_r+0x20>
 800420c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800420e:	2b00      	cmp	r3, #0
 8004210:	dc02      	bgt.n	8004218 <__sflush_r+0x20>
 8004212:	2000      	movs	r0, #0
 8004214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004218:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800421a:	2e00      	cmp	r6, #0
 800421c:	d0f9      	beq.n	8004212 <__sflush_r+0x1a>
 800421e:	2300      	movs	r3, #0
 8004220:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004224:	682f      	ldr	r7, [r5, #0]
 8004226:	6a21      	ldr	r1, [r4, #32]
 8004228:	602b      	str	r3, [r5, #0]
 800422a:	d032      	beq.n	8004292 <__sflush_r+0x9a>
 800422c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800422e:	89a3      	ldrh	r3, [r4, #12]
 8004230:	075a      	lsls	r2, r3, #29
 8004232:	d505      	bpl.n	8004240 <__sflush_r+0x48>
 8004234:	6863      	ldr	r3, [r4, #4]
 8004236:	1ac0      	subs	r0, r0, r3
 8004238:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800423a:	b10b      	cbz	r3, 8004240 <__sflush_r+0x48>
 800423c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800423e:	1ac0      	subs	r0, r0, r3
 8004240:	2300      	movs	r3, #0
 8004242:	4602      	mov	r2, r0
 8004244:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004246:	4628      	mov	r0, r5
 8004248:	6a21      	ldr	r1, [r4, #32]
 800424a:	47b0      	blx	r6
 800424c:	1c43      	adds	r3, r0, #1
 800424e:	89a3      	ldrh	r3, [r4, #12]
 8004250:	d106      	bne.n	8004260 <__sflush_r+0x68>
 8004252:	6829      	ldr	r1, [r5, #0]
 8004254:	291d      	cmp	r1, #29
 8004256:	d847      	bhi.n	80042e8 <__sflush_r+0xf0>
 8004258:	4a28      	ldr	r2, [pc, #160]	; (80042fc <__sflush_r+0x104>)
 800425a:	40ca      	lsrs	r2, r1
 800425c:	07d6      	lsls	r6, r2, #31
 800425e:	d543      	bpl.n	80042e8 <__sflush_r+0xf0>
 8004260:	2200      	movs	r2, #0
 8004262:	04d9      	lsls	r1, r3, #19
 8004264:	6062      	str	r2, [r4, #4]
 8004266:	6922      	ldr	r2, [r4, #16]
 8004268:	6022      	str	r2, [r4, #0]
 800426a:	d504      	bpl.n	8004276 <__sflush_r+0x7e>
 800426c:	1c42      	adds	r2, r0, #1
 800426e:	d101      	bne.n	8004274 <__sflush_r+0x7c>
 8004270:	682b      	ldr	r3, [r5, #0]
 8004272:	b903      	cbnz	r3, 8004276 <__sflush_r+0x7e>
 8004274:	6560      	str	r0, [r4, #84]	; 0x54
 8004276:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004278:	602f      	str	r7, [r5, #0]
 800427a:	2900      	cmp	r1, #0
 800427c:	d0c9      	beq.n	8004212 <__sflush_r+0x1a>
 800427e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004282:	4299      	cmp	r1, r3
 8004284:	d002      	beq.n	800428c <__sflush_r+0x94>
 8004286:	4628      	mov	r0, r5
 8004288:	f7ff fda4 	bl	8003dd4 <_free_r>
 800428c:	2000      	movs	r0, #0
 800428e:	6360      	str	r0, [r4, #52]	; 0x34
 8004290:	e7c0      	b.n	8004214 <__sflush_r+0x1c>
 8004292:	2301      	movs	r3, #1
 8004294:	4628      	mov	r0, r5
 8004296:	47b0      	blx	r6
 8004298:	1c41      	adds	r1, r0, #1
 800429a:	d1c8      	bne.n	800422e <__sflush_r+0x36>
 800429c:	682b      	ldr	r3, [r5, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d0c5      	beq.n	800422e <__sflush_r+0x36>
 80042a2:	2b1d      	cmp	r3, #29
 80042a4:	d001      	beq.n	80042aa <__sflush_r+0xb2>
 80042a6:	2b16      	cmp	r3, #22
 80042a8:	d101      	bne.n	80042ae <__sflush_r+0xb6>
 80042aa:	602f      	str	r7, [r5, #0]
 80042ac:	e7b1      	b.n	8004212 <__sflush_r+0x1a>
 80042ae:	89a3      	ldrh	r3, [r4, #12]
 80042b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042b4:	81a3      	strh	r3, [r4, #12]
 80042b6:	e7ad      	b.n	8004214 <__sflush_r+0x1c>
 80042b8:	690f      	ldr	r7, [r1, #16]
 80042ba:	2f00      	cmp	r7, #0
 80042bc:	d0a9      	beq.n	8004212 <__sflush_r+0x1a>
 80042be:	0793      	lsls	r3, r2, #30
 80042c0:	680e      	ldr	r6, [r1, #0]
 80042c2:	600f      	str	r7, [r1, #0]
 80042c4:	bf0c      	ite	eq
 80042c6:	694b      	ldreq	r3, [r1, #20]
 80042c8:	2300      	movne	r3, #0
 80042ca:	eba6 0807 	sub.w	r8, r6, r7
 80042ce:	608b      	str	r3, [r1, #8]
 80042d0:	f1b8 0f00 	cmp.w	r8, #0
 80042d4:	dd9d      	ble.n	8004212 <__sflush_r+0x1a>
 80042d6:	4643      	mov	r3, r8
 80042d8:	463a      	mov	r2, r7
 80042da:	6a21      	ldr	r1, [r4, #32]
 80042dc:	4628      	mov	r0, r5
 80042de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80042e0:	47b0      	blx	r6
 80042e2:	2800      	cmp	r0, #0
 80042e4:	dc06      	bgt.n	80042f4 <__sflush_r+0xfc>
 80042e6:	89a3      	ldrh	r3, [r4, #12]
 80042e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042ec:	f04f 30ff 	mov.w	r0, #4294967295
 80042f0:	81a3      	strh	r3, [r4, #12]
 80042f2:	e78f      	b.n	8004214 <__sflush_r+0x1c>
 80042f4:	4407      	add	r7, r0
 80042f6:	eba8 0800 	sub.w	r8, r8, r0
 80042fa:	e7e9      	b.n	80042d0 <__sflush_r+0xd8>
 80042fc:	20400001 	.word	0x20400001

08004300 <_fflush_r>:
 8004300:	b538      	push	{r3, r4, r5, lr}
 8004302:	690b      	ldr	r3, [r1, #16]
 8004304:	4605      	mov	r5, r0
 8004306:	460c      	mov	r4, r1
 8004308:	b1db      	cbz	r3, 8004342 <_fflush_r+0x42>
 800430a:	b118      	cbz	r0, 8004314 <_fflush_r+0x14>
 800430c:	6983      	ldr	r3, [r0, #24]
 800430e:	b90b      	cbnz	r3, 8004314 <_fflush_r+0x14>
 8004310:	f000 f860 	bl	80043d4 <__sinit>
 8004314:	4b0c      	ldr	r3, [pc, #48]	; (8004348 <_fflush_r+0x48>)
 8004316:	429c      	cmp	r4, r3
 8004318:	d109      	bne.n	800432e <_fflush_r+0x2e>
 800431a:	686c      	ldr	r4, [r5, #4]
 800431c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004320:	b17b      	cbz	r3, 8004342 <_fflush_r+0x42>
 8004322:	4621      	mov	r1, r4
 8004324:	4628      	mov	r0, r5
 8004326:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800432a:	f7ff bf65 	b.w	80041f8 <__sflush_r>
 800432e:	4b07      	ldr	r3, [pc, #28]	; (800434c <_fflush_r+0x4c>)
 8004330:	429c      	cmp	r4, r3
 8004332:	d101      	bne.n	8004338 <_fflush_r+0x38>
 8004334:	68ac      	ldr	r4, [r5, #8]
 8004336:	e7f1      	b.n	800431c <_fflush_r+0x1c>
 8004338:	4b05      	ldr	r3, [pc, #20]	; (8004350 <_fflush_r+0x50>)
 800433a:	429c      	cmp	r4, r3
 800433c:	bf08      	it	eq
 800433e:	68ec      	ldreq	r4, [r5, #12]
 8004340:	e7ec      	b.n	800431c <_fflush_r+0x1c>
 8004342:	2000      	movs	r0, #0
 8004344:	bd38      	pop	{r3, r4, r5, pc}
 8004346:	bf00      	nop
 8004348:	08005520 	.word	0x08005520
 800434c:	08005540 	.word	0x08005540
 8004350:	08005500 	.word	0x08005500

08004354 <std>:
 8004354:	2300      	movs	r3, #0
 8004356:	b510      	push	{r4, lr}
 8004358:	4604      	mov	r4, r0
 800435a:	6083      	str	r3, [r0, #8]
 800435c:	8181      	strh	r1, [r0, #12]
 800435e:	4619      	mov	r1, r3
 8004360:	6643      	str	r3, [r0, #100]	; 0x64
 8004362:	81c2      	strh	r2, [r0, #14]
 8004364:	2208      	movs	r2, #8
 8004366:	6183      	str	r3, [r0, #24]
 8004368:	e9c0 3300 	strd	r3, r3, [r0]
 800436c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004370:	305c      	adds	r0, #92	; 0x5c
 8004372:	f7ff fd27 	bl	8003dc4 <memset>
 8004376:	4b05      	ldr	r3, [pc, #20]	; (800438c <std+0x38>)
 8004378:	6224      	str	r4, [r4, #32]
 800437a:	6263      	str	r3, [r4, #36]	; 0x24
 800437c:	4b04      	ldr	r3, [pc, #16]	; (8004390 <std+0x3c>)
 800437e:	62a3      	str	r3, [r4, #40]	; 0x28
 8004380:	4b04      	ldr	r3, [pc, #16]	; (8004394 <std+0x40>)
 8004382:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004384:	4b04      	ldr	r3, [pc, #16]	; (8004398 <std+0x44>)
 8004386:	6323      	str	r3, [r4, #48]	; 0x30
 8004388:	bd10      	pop	{r4, pc}
 800438a:	bf00      	nop
 800438c:	08003f99 	.word	0x08003f99
 8004390:	08003fbf 	.word	0x08003fbf
 8004394:	08003ff7 	.word	0x08003ff7
 8004398:	0800401b 	.word	0x0800401b

0800439c <_cleanup_r>:
 800439c:	4901      	ldr	r1, [pc, #4]	; (80043a4 <_cleanup_r+0x8>)
 800439e:	f000 b885 	b.w	80044ac <_fwalk_reent>
 80043a2:	bf00      	nop
 80043a4:	08004301 	.word	0x08004301

080043a8 <__sfmoreglue>:
 80043a8:	b570      	push	{r4, r5, r6, lr}
 80043aa:	1e4a      	subs	r2, r1, #1
 80043ac:	2568      	movs	r5, #104	; 0x68
 80043ae:	460e      	mov	r6, r1
 80043b0:	4355      	muls	r5, r2
 80043b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80043b6:	f7ff fd5b 	bl	8003e70 <_malloc_r>
 80043ba:	4604      	mov	r4, r0
 80043bc:	b140      	cbz	r0, 80043d0 <__sfmoreglue+0x28>
 80043be:	2100      	movs	r1, #0
 80043c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80043c4:	e9c0 1600 	strd	r1, r6, [r0]
 80043c8:	300c      	adds	r0, #12
 80043ca:	60a0      	str	r0, [r4, #8]
 80043cc:	f7ff fcfa 	bl	8003dc4 <memset>
 80043d0:	4620      	mov	r0, r4
 80043d2:	bd70      	pop	{r4, r5, r6, pc}

080043d4 <__sinit>:
 80043d4:	6983      	ldr	r3, [r0, #24]
 80043d6:	b510      	push	{r4, lr}
 80043d8:	4604      	mov	r4, r0
 80043da:	bb33      	cbnz	r3, 800442a <__sinit+0x56>
 80043dc:	6503      	str	r3, [r0, #80]	; 0x50
 80043de:	4a13      	ldr	r2, [pc, #76]	; (800442c <__sinit+0x58>)
 80043e0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80043e4:	4b12      	ldr	r3, [pc, #72]	; (8004430 <__sinit+0x5c>)
 80043e6:	6282      	str	r2, [r0, #40]	; 0x28
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4298      	cmp	r0, r3
 80043ec:	bf04      	itt	eq
 80043ee:	2301      	moveq	r3, #1
 80043f0:	6183      	streq	r3, [r0, #24]
 80043f2:	f000 f81f 	bl	8004434 <__sfp>
 80043f6:	6060      	str	r0, [r4, #4]
 80043f8:	4620      	mov	r0, r4
 80043fa:	f000 f81b 	bl	8004434 <__sfp>
 80043fe:	60a0      	str	r0, [r4, #8]
 8004400:	4620      	mov	r0, r4
 8004402:	f000 f817 	bl	8004434 <__sfp>
 8004406:	2200      	movs	r2, #0
 8004408:	60e0      	str	r0, [r4, #12]
 800440a:	2104      	movs	r1, #4
 800440c:	6860      	ldr	r0, [r4, #4]
 800440e:	f7ff ffa1 	bl	8004354 <std>
 8004412:	2201      	movs	r2, #1
 8004414:	2109      	movs	r1, #9
 8004416:	68a0      	ldr	r0, [r4, #8]
 8004418:	f7ff ff9c 	bl	8004354 <std>
 800441c:	2202      	movs	r2, #2
 800441e:	2112      	movs	r1, #18
 8004420:	68e0      	ldr	r0, [r4, #12]
 8004422:	f7ff ff97 	bl	8004354 <std>
 8004426:	2301      	movs	r3, #1
 8004428:	61a3      	str	r3, [r4, #24]
 800442a:	bd10      	pop	{r4, pc}
 800442c:	0800439d 	.word	0x0800439d
 8004430:	080054fc 	.word	0x080054fc

08004434 <__sfp>:
 8004434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004436:	4b1b      	ldr	r3, [pc, #108]	; (80044a4 <__sfp+0x70>)
 8004438:	4607      	mov	r7, r0
 800443a:	681e      	ldr	r6, [r3, #0]
 800443c:	69b3      	ldr	r3, [r6, #24]
 800443e:	b913      	cbnz	r3, 8004446 <__sfp+0x12>
 8004440:	4630      	mov	r0, r6
 8004442:	f7ff ffc7 	bl	80043d4 <__sinit>
 8004446:	3648      	adds	r6, #72	; 0x48
 8004448:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800444c:	3b01      	subs	r3, #1
 800444e:	d503      	bpl.n	8004458 <__sfp+0x24>
 8004450:	6833      	ldr	r3, [r6, #0]
 8004452:	b133      	cbz	r3, 8004462 <__sfp+0x2e>
 8004454:	6836      	ldr	r6, [r6, #0]
 8004456:	e7f7      	b.n	8004448 <__sfp+0x14>
 8004458:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800445c:	b16d      	cbz	r5, 800447a <__sfp+0x46>
 800445e:	3468      	adds	r4, #104	; 0x68
 8004460:	e7f4      	b.n	800444c <__sfp+0x18>
 8004462:	2104      	movs	r1, #4
 8004464:	4638      	mov	r0, r7
 8004466:	f7ff ff9f 	bl	80043a8 <__sfmoreglue>
 800446a:	6030      	str	r0, [r6, #0]
 800446c:	2800      	cmp	r0, #0
 800446e:	d1f1      	bne.n	8004454 <__sfp+0x20>
 8004470:	230c      	movs	r3, #12
 8004472:	4604      	mov	r4, r0
 8004474:	603b      	str	r3, [r7, #0]
 8004476:	4620      	mov	r0, r4
 8004478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800447a:	4b0b      	ldr	r3, [pc, #44]	; (80044a8 <__sfp+0x74>)
 800447c:	2208      	movs	r2, #8
 800447e:	6665      	str	r5, [r4, #100]	; 0x64
 8004480:	4629      	mov	r1, r5
 8004482:	60a5      	str	r5, [r4, #8]
 8004484:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004488:	e9c4 5500 	strd	r5, r5, [r4]
 800448c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004490:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004494:	f7ff fc96 	bl	8003dc4 <memset>
 8004498:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800449c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80044a0:	e7e9      	b.n	8004476 <__sfp+0x42>
 80044a2:	bf00      	nop
 80044a4:	080054fc 	.word	0x080054fc
 80044a8:	ffff0001 	.word	0xffff0001

080044ac <_fwalk_reent>:
 80044ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044b0:	4680      	mov	r8, r0
 80044b2:	4689      	mov	r9, r1
 80044b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80044b8:	2600      	movs	r6, #0
 80044ba:	b914      	cbnz	r4, 80044c2 <_fwalk_reent+0x16>
 80044bc:	4630      	mov	r0, r6
 80044be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044c2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80044c6:	3f01      	subs	r7, #1
 80044c8:	d501      	bpl.n	80044ce <_fwalk_reent+0x22>
 80044ca:	6824      	ldr	r4, [r4, #0]
 80044cc:	e7f5      	b.n	80044ba <_fwalk_reent+0xe>
 80044ce:	89ab      	ldrh	r3, [r5, #12]
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d907      	bls.n	80044e4 <_fwalk_reent+0x38>
 80044d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80044d8:	3301      	adds	r3, #1
 80044da:	d003      	beq.n	80044e4 <_fwalk_reent+0x38>
 80044dc:	4629      	mov	r1, r5
 80044de:	4640      	mov	r0, r8
 80044e0:	47c8      	blx	r9
 80044e2:	4306      	orrs	r6, r0
 80044e4:	3568      	adds	r5, #104	; 0x68
 80044e6:	e7ee      	b.n	80044c6 <_fwalk_reent+0x1a>

080044e8 <_lseek_r>:
 80044e8:	b538      	push	{r3, r4, r5, lr}
 80044ea:	4605      	mov	r5, r0
 80044ec:	4c06      	ldr	r4, [pc, #24]	; (8004508 <_lseek_r+0x20>)
 80044ee:	4608      	mov	r0, r1
 80044f0:	4611      	mov	r1, r2
 80044f2:	2200      	movs	r2, #0
 80044f4:	6022      	str	r2, [r4, #0]
 80044f6:	461a      	mov	r2, r3
 80044f8:	f7fc fb74 	bl	8000be4 <_lseek>
 80044fc:	1c43      	adds	r3, r0, #1
 80044fe:	d102      	bne.n	8004506 <_lseek_r+0x1e>
 8004500:	6823      	ldr	r3, [r4, #0]
 8004502:	b103      	cbz	r3, 8004506 <_lseek_r+0x1e>
 8004504:	602b      	str	r3, [r5, #0]
 8004506:	bd38      	pop	{r3, r4, r5, pc}
 8004508:	20001a24 	.word	0x20001a24

0800450c <__swhatbuf_r>:
 800450c:	b570      	push	{r4, r5, r6, lr}
 800450e:	460e      	mov	r6, r1
 8004510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004514:	b096      	sub	sp, #88	; 0x58
 8004516:	4614      	mov	r4, r2
 8004518:	2900      	cmp	r1, #0
 800451a:	461d      	mov	r5, r3
 800451c:	da07      	bge.n	800452e <__swhatbuf_r+0x22>
 800451e:	2300      	movs	r3, #0
 8004520:	602b      	str	r3, [r5, #0]
 8004522:	89b3      	ldrh	r3, [r6, #12]
 8004524:	061a      	lsls	r2, r3, #24
 8004526:	d410      	bmi.n	800454a <__swhatbuf_r+0x3e>
 8004528:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800452c:	e00e      	b.n	800454c <__swhatbuf_r+0x40>
 800452e:	466a      	mov	r2, sp
 8004530:	f000 fce4 	bl	8004efc <_fstat_r>
 8004534:	2800      	cmp	r0, #0
 8004536:	dbf2      	blt.n	800451e <__swhatbuf_r+0x12>
 8004538:	9a01      	ldr	r2, [sp, #4]
 800453a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800453e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004542:	425a      	negs	r2, r3
 8004544:	415a      	adcs	r2, r3
 8004546:	602a      	str	r2, [r5, #0]
 8004548:	e7ee      	b.n	8004528 <__swhatbuf_r+0x1c>
 800454a:	2340      	movs	r3, #64	; 0x40
 800454c:	2000      	movs	r0, #0
 800454e:	6023      	str	r3, [r4, #0]
 8004550:	b016      	add	sp, #88	; 0x58
 8004552:	bd70      	pop	{r4, r5, r6, pc}

08004554 <__smakebuf_r>:
 8004554:	898b      	ldrh	r3, [r1, #12]
 8004556:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004558:	079d      	lsls	r5, r3, #30
 800455a:	4606      	mov	r6, r0
 800455c:	460c      	mov	r4, r1
 800455e:	d507      	bpl.n	8004570 <__smakebuf_r+0x1c>
 8004560:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004564:	6023      	str	r3, [r4, #0]
 8004566:	6123      	str	r3, [r4, #16]
 8004568:	2301      	movs	r3, #1
 800456a:	6163      	str	r3, [r4, #20]
 800456c:	b002      	add	sp, #8
 800456e:	bd70      	pop	{r4, r5, r6, pc}
 8004570:	ab01      	add	r3, sp, #4
 8004572:	466a      	mov	r2, sp
 8004574:	f7ff ffca 	bl	800450c <__swhatbuf_r>
 8004578:	9900      	ldr	r1, [sp, #0]
 800457a:	4605      	mov	r5, r0
 800457c:	4630      	mov	r0, r6
 800457e:	f7ff fc77 	bl	8003e70 <_malloc_r>
 8004582:	b948      	cbnz	r0, 8004598 <__smakebuf_r+0x44>
 8004584:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004588:	059a      	lsls	r2, r3, #22
 800458a:	d4ef      	bmi.n	800456c <__smakebuf_r+0x18>
 800458c:	f023 0303 	bic.w	r3, r3, #3
 8004590:	f043 0302 	orr.w	r3, r3, #2
 8004594:	81a3      	strh	r3, [r4, #12]
 8004596:	e7e3      	b.n	8004560 <__smakebuf_r+0xc>
 8004598:	4b0d      	ldr	r3, [pc, #52]	; (80045d0 <__smakebuf_r+0x7c>)
 800459a:	62b3      	str	r3, [r6, #40]	; 0x28
 800459c:	89a3      	ldrh	r3, [r4, #12]
 800459e:	6020      	str	r0, [r4, #0]
 80045a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045a4:	6120      	str	r0, [r4, #16]
 80045a6:	81a3      	strh	r3, [r4, #12]
 80045a8:	9b00      	ldr	r3, [sp, #0]
 80045aa:	6163      	str	r3, [r4, #20]
 80045ac:	9b01      	ldr	r3, [sp, #4]
 80045ae:	b15b      	cbz	r3, 80045c8 <__smakebuf_r+0x74>
 80045b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045b4:	4630      	mov	r0, r6
 80045b6:	f000 fcb3 	bl	8004f20 <_isatty_r>
 80045ba:	b128      	cbz	r0, 80045c8 <__smakebuf_r+0x74>
 80045bc:	89a3      	ldrh	r3, [r4, #12]
 80045be:	f023 0303 	bic.w	r3, r3, #3
 80045c2:	f043 0301 	orr.w	r3, r3, #1
 80045c6:	81a3      	strh	r3, [r4, #12]
 80045c8:	89a3      	ldrh	r3, [r4, #12]
 80045ca:	431d      	orrs	r5, r3
 80045cc:	81a5      	strh	r5, [r4, #12]
 80045ce:	e7cd      	b.n	800456c <__smakebuf_r+0x18>
 80045d0:	0800439d 	.word	0x0800439d

080045d4 <__malloc_lock>:
 80045d4:	4770      	bx	lr

080045d6 <__malloc_unlock>:
 80045d6:	4770      	bx	lr

080045d8 <_sungetc_r>:
 80045d8:	b538      	push	{r3, r4, r5, lr}
 80045da:	1c4b      	adds	r3, r1, #1
 80045dc:	4614      	mov	r4, r2
 80045de:	d103      	bne.n	80045e8 <_sungetc_r+0x10>
 80045e0:	f04f 35ff 	mov.w	r5, #4294967295
 80045e4:	4628      	mov	r0, r5
 80045e6:	bd38      	pop	{r3, r4, r5, pc}
 80045e8:	8993      	ldrh	r3, [r2, #12]
 80045ea:	b2cd      	uxtb	r5, r1
 80045ec:	f023 0320 	bic.w	r3, r3, #32
 80045f0:	8193      	strh	r3, [r2, #12]
 80045f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80045f4:	6852      	ldr	r2, [r2, #4]
 80045f6:	b18b      	cbz	r3, 800461c <_sungetc_r+0x44>
 80045f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80045fa:	4293      	cmp	r3, r2
 80045fc:	dd08      	ble.n	8004610 <_sungetc_r+0x38>
 80045fe:	6823      	ldr	r3, [r4, #0]
 8004600:	1e5a      	subs	r2, r3, #1
 8004602:	6022      	str	r2, [r4, #0]
 8004604:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004608:	6863      	ldr	r3, [r4, #4]
 800460a:	3301      	adds	r3, #1
 800460c:	6063      	str	r3, [r4, #4]
 800460e:	e7e9      	b.n	80045e4 <_sungetc_r+0xc>
 8004610:	4621      	mov	r1, r4
 8004612:	f000 fc3b 	bl	8004e8c <__submore>
 8004616:	2800      	cmp	r0, #0
 8004618:	d0f1      	beq.n	80045fe <_sungetc_r+0x26>
 800461a:	e7e1      	b.n	80045e0 <_sungetc_r+0x8>
 800461c:	6921      	ldr	r1, [r4, #16]
 800461e:	6823      	ldr	r3, [r4, #0]
 8004620:	b151      	cbz	r1, 8004638 <_sungetc_r+0x60>
 8004622:	4299      	cmp	r1, r3
 8004624:	d208      	bcs.n	8004638 <_sungetc_r+0x60>
 8004626:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800462a:	42a9      	cmp	r1, r5
 800462c:	d104      	bne.n	8004638 <_sungetc_r+0x60>
 800462e:	3b01      	subs	r3, #1
 8004630:	3201      	adds	r2, #1
 8004632:	6023      	str	r3, [r4, #0]
 8004634:	6062      	str	r2, [r4, #4]
 8004636:	e7d5      	b.n	80045e4 <_sungetc_r+0xc>
 8004638:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800463c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004640:	6363      	str	r3, [r4, #52]	; 0x34
 8004642:	2303      	movs	r3, #3
 8004644:	63a3      	str	r3, [r4, #56]	; 0x38
 8004646:	4623      	mov	r3, r4
 8004648:	f803 5f46 	strb.w	r5, [r3, #70]!
 800464c:	6023      	str	r3, [r4, #0]
 800464e:	2301      	movs	r3, #1
 8004650:	e7dc      	b.n	800460c <_sungetc_r+0x34>

08004652 <__ssrefill_r>:
 8004652:	b510      	push	{r4, lr}
 8004654:	460c      	mov	r4, r1
 8004656:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004658:	b169      	cbz	r1, 8004676 <__ssrefill_r+0x24>
 800465a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800465e:	4299      	cmp	r1, r3
 8004660:	d001      	beq.n	8004666 <__ssrefill_r+0x14>
 8004662:	f7ff fbb7 	bl	8003dd4 <_free_r>
 8004666:	2000      	movs	r0, #0
 8004668:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800466a:	6360      	str	r0, [r4, #52]	; 0x34
 800466c:	6063      	str	r3, [r4, #4]
 800466e:	b113      	cbz	r3, 8004676 <__ssrefill_r+0x24>
 8004670:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004672:	6023      	str	r3, [r4, #0]
 8004674:	bd10      	pop	{r4, pc}
 8004676:	6923      	ldr	r3, [r4, #16]
 8004678:	f04f 30ff 	mov.w	r0, #4294967295
 800467c:	6023      	str	r3, [r4, #0]
 800467e:	2300      	movs	r3, #0
 8004680:	6063      	str	r3, [r4, #4]
 8004682:	89a3      	ldrh	r3, [r4, #12]
 8004684:	f043 0320 	orr.w	r3, r3, #32
 8004688:	81a3      	strh	r3, [r4, #12]
 800468a:	e7f3      	b.n	8004674 <__ssrefill_r+0x22>

0800468c <__ssvfiscanf_r>:
 800468c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004690:	460c      	mov	r4, r1
 8004692:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8004696:	2100      	movs	r1, #0
 8004698:	4606      	mov	r6, r0
 800469a:	f10d 0804 	add.w	r8, sp, #4
 800469e:	4692      	mov	sl, r2
 80046a0:	9144      	str	r1, [sp, #272]	; 0x110
 80046a2:	270a      	movs	r7, #10
 80046a4:	9145      	str	r1, [sp, #276]	; 0x114
 80046a6:	499d      	ldr	r1, [pc, #628]	; (800491c <__ssvfiscanf_r+0x290>)
 80046a8:	f8df 9278 	ldr.w	r9, [pc, #632]	; 8004924 <__ssvfiscanf_r+0x298>
 80046ac:	91a0      	str	r1, [sp, #640]	; 0x280
 80046ae:	499c      	ldr	r1, [pc, #624]	; (8004920 <__ssvfiscanf_r+0x294>)
 80046b0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80046b4:	91a1      	str	r1, [sp, #644]	; 0x284
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	f89a 3000 	ldrb.w	r3, [sl]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f000 812b 	beq.w	8004918 <__ssvfiscanf_r+0x28c>
 80046c2:	4655      	mov	r5, sl
 80046c4:	f000 fc40 	bl	8004f48 <__locale_ctype_ptr>
 80046c8:	f815 bb01 	ldrb.w	fp, [r5], #1
 80046cc:	4458      	add	r0, fp
 80046ce:	7843      	ldrb	r3, [r0, #1]
 80046d0:	f013 0308 	ands.w	r3, r3, #8
 80046d4:	d01c      	beq.n	8004710 <__ssvfiscanf_r+0x84>
 80046d6:	6863      	ldr	r3, [r4, #4]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	dd12      	ble.n	8004702 <__ssvfiscanf_r+0x76>
 80046dc:	f000 fc34 	bl	8004f48 <__locale_ctype_ptr>
 80046e0:	6823      	ldr	r3, [r4, #0]
 80046e2:	781a      	ldrb	r2, [r3, #0]
 80046e4:	4410      	add	r0, r2
 80046e6:	7842      	ldrb	r2, [r0, #1]
 80046e8:	0712      	lsls	r2, r2, #28
 80046ea:	d401      	bmi.n	80046f0 <__ssvfiscanf_r+0x64>
 80046ec:	46aa      	mov	sl, r5
 80046ee:	e7e3      	b.n	80046b8 <__ssvfiscanf_r+0x2c>
 80046f0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80046f2:	3301      	adds	r3, #1
 80046f4:	3201      	adds	r2, #1
 80046f6:	6023      	str	r3, [r4, #0]
 80046f8:	9245      	str	r2, [sp, #276]	; 0x114
 80046fa:	6862      	ldr	r2, [r4, #4]
 80046fc:	3a01      	subs	r2, #1
 80046fe:	6062      	str	r2, [r4, #4]
 8004700:	e7e9      	b.n	80046d6 <__ssvfiscanf_r+0x4a>
 8004702:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004704:	4621      	mov	r1, r4
 8004706:	4630      	mov	r0, r6
 8004708:	4798      	blx	r3
 800470a:	2800      	cmp	r0, #0
 800470c:	d0e6      	beq.n	80046dc <__ssvfiscanf_r+0x50>
 800470e:	e7ed      	b.n	80046ec <__ssvfiscanf_r+0x60>
 8004710:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8004714:	f040 8082 	bne.w	800481c <__ssvfiscanf_r+0x190>
 8004718:	9343      	str	r3, [sp, #268]	; 0x10c
 800471a:	9341      	str	r3, [sp, #260]	; 0x104
 800471c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8004720:	2b2a      	cmp	r3, #42	; 0x2a
 8004722:	d103      	bne.n	800472c <__ssvfiscanf_r+0xa0>
 8004724:	2310      	movs	r3, #16
 8004726:	f10a 0502 	add.w	r5, sl, #2
 800472a:	9341      	str	r3, [sp, #260]	; 0x104
 800472c:	46aa      	mov	sl, r5
 800472e:	f815 1b01 	ldrb.w	r1, [r5], #1
 8004732:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8004736:	2a09      	cmp	r2, #9
 8004738:	d922      	bls.n	8004780 <__ssvfiscanf_r+0xf4>
 800473a:	2203      	movs	r2, #3
 800473c:	4879      	ldr	r0, [pc, #484]	; (8004924 <__ssvfiscanf_r+0x298>)
 800473e:	f000 fc23 	bl	8004f88 <memchr>
 8004742:	b138      	cbz	r0, 8004754 <__ssvfiscanf_r+0xc8>
 8004744:	eba0 0309 	sub.w	r3, r0, r9
 8004748:	2001      	movs	r0, #1
 800474a:	46aa      	mov	sl, r5
 800474c:	4098      	lsls	r0, r3
 800474e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004750:	4318      	orrs	r0, r3
 8004752:	9041      	str	r0, [sp, #260]	; 0x104
 8004754:	f89a 3000 	ldrb.w	r3, [sl]
 8004758:	f10a 0501 	add.w	r5, sl, #1
 800475c:	2b67      	cmp	r3, #103	; 0x67
 800475e:	d82b      	bhi.n	80047b8 <__ssvfiscanf_r+0x12c>
 8004760:	2b65      	cmp	r3, #101	; 0x65
 8004762:	f080 80a0 	bcs.w	80048a6 <__ssvfiscanf_r+0x21a>
 8004766:	2b47      	cmp	r3, #71	; 0x47
 8004768:	d810      	bhi.n	800478c <__ssvfiscanf_r+0x100>
 800476a:	2b45      	cmp	r3, #69	; 0x45
 800476c:	f080 809b 	bcs.w	80048a6 <__ssvfiscanf_r+0x21a>
 8004770:	2b00      	cmp	r3, #0
 8004772:	d06c      	beq.n	800484e <__ssvfiscanf_r+0x1c2>
 8004774:	2b25      	cmp	r3, #37	; 0x25
 8004776:	d051      	beq.n	800481c <__ssvfiscanf_r+0x190>
 8004778:	2303      	movs	r3, #3
 800477a:	9742      	str	r7, [sp, #264]	; 0x108
 800477c:	9347      	str	r3, [sp, #284]	; 0x11c
 800477e:	e027      	b.n	80047d0 <__ssvfiscanf_r+0x144>
 8004780:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004782:	fb07 1303 	mla	r3, r7, r3, r1
 8004786:	3b30      	subs	r3, #48	; 0x30
 8004788:	9343      	str	r3, [sp, #268]	; 0x10c
 800478a:	e7cf      	b.n	800472c <__ssvfiscanf_r+0xa0>
 800478c:	2b5b      	cmp	r3, #91	; 0x5b
 800478e:	d06a      	beq.n	8004866 <__ssvfiscanf_r+0x1da>
 8004790:	d80c      	bhi.n	80047ac <__ssvfiscanf_r+0x120>
 8004792:	2b58      	cmp	r3, #88	; 0x58
 8004794:	d1f0      	bne.n	8004778 <__ssvfiscanf_r+0xec>
 8004796:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004798:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800479c:	9241      	str	r2, [sp, #260]	; 0x104
 800479e:	2210      	movs	r2, #16
 80047a0:	9242      	str	r2, [sp, #264]	; 0x108
 80047a2:	2b6e      	cmp	r3, #110	; 0x6e
 80047a4:	bf8c      	ite	hi
 80047a6:	2304      	movhi	r3, #4
 80047a8:	2303      	movls	r3, #3
 80047aa:	e010      	b.n	80047ce <__ssvfiscanf_r+0x142>
 80047ac:	2b63      	cmp	r3, #99	; 0x63
 80047ae:	d065      	beq.n	800487c <__ssvfiscanf_r+0x1f0>
 80047b0:	2b64      	cmp	r3, #100	; 0x64
 80047b2:	d1e1      	bne.n	8004778 <__ssvfiscanf_r+0xec>
 80047b4:	9742      	str	r7, [sp, #264]	; 0x108
 80047b6:	e7f4      	b.n	80047a2 <__ssvfiscanf_r+0x116>
 80047b8:	2b70      	cmp	r3, #112	; 0x70
 80047ba:	d04b      	beq.n	8004854 <__ssvfiscanf_r+0x1c8>
 80047bc:	d826      	bhi.n	800480c <__ssvfiscanf_r+0x180>
 80047be:	2b6e      	cmp	r3, #110	; 0x6e
 80047c0:	d062      	beq.n	8004888 <__ssvfiscanf_r+0x1fc>
 80047c2:	d84c      	bhi.n	800485e <__ssvfiscanf_r+0x1d2>
 80047c4:	2b69      	cmp	r3, #105	; 0x69
 80047c6:	d1d7      	bne.n	8004778 <__ssvfiscanf_r+0xec>
 80047c8:	2300      	movs	r3, #0
 80047ca:	9342      	str	r3, [sp, #264]	; 0x108
 80047cc:	2303      	movs	r3, #3
 80047ce:	9347      	str	r3, [sp, #284]	; 0x11c
 80047d0:	6863      	ldr	r3, [r4, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	dd69      	ble.n	80048aa <__ssvfiscanf_r+0x21e>
 80047d6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80047d8:	0659      	lsls	r1, r3, #25
 80047da:	d407      	bmi.n	80047ec <__ssvfiscanf_r+0x160>
 80047dc:	f000 fbb4 	bl	8004f48 <__locale_ctype_ptr>
 80047e0:	6823      	ldr	r3, [r4, #0]
 80047e2:	781a      	ldrb	r2, [r3, #0]
 80047e4:	4410      	add	r0, r2
 80047e6:	7842      	ldrb	r2, [r0, #1]
 80047e8:	0712      	lsls	r2, r2, #28
 80047ea:	d465      	bmi.n	80048b8 <__ssvfiscanf_r+0x22c>
 80047ec:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	dc74      	bgt.n	80048dc <__ssvfiscanf_r+0x250>
 80047f2:	466b      	mov	r3, sp
 80047f4:	4622      	mov	r2, r4
 80047f6:	a941      	add	r1, sp, #260	; 0x104
 80047f8:	4630      	mov	r0, r6
 80047fa:	f000 f897 	bl	800492c <_scanf_chars>
 80047fe:	2801      	cmp	r0, #1
 8004800:	f000 808a 	beq.w	8004918 <__ssvfiscanf_r+0x28c>
 8004804:	2802      	cmp	r0, #2
 8004806:	f47f af71 	bne.w	80046ec <__ssvfiscanf_r+0x60>
 800480a:	e01d      	b.n	8004848 <__ssvfiscanf_r+0x1bc>
 800480c:	2b75      	cmp	r3, #117	; 0x75
 800480e:	d0d1      	beq.n	80047b4 <__ssvfiscanf_r+0x128>
 8004810:	2b78      	cmp	r3, #120	; 0x78
 8004812:	d0c0      	beq.n	8004796 <__ssvfiscanf_r+0x10a>
 8004814:	2b73      	cmp	r3, #115	; 0x73
 8004816:	d1af      	bne.n	8004778 <__ssvfiscanf_r+0xec>
 8004818:	2302      	movs	r3, #2
 800481a:	e7d8      	b.n	80047ce <__ssvfiscanf_r+0x142>
 800481c:	6863      	ldr	r3, [r4, #4]
 800481e:	2b00      	cmp	r3, #0
 8004820:	dd0c      	ble.n	800483c <__ssvfiscanf_r+0x1b0>
 8004822:	6823      	ldr	r3, [r4, #0]
 8004824:	781a      	ldrb	r2, [r3, #0]
 8004826:	455a      	cmp	r2, fp
 8004828:	d176      	bne.n	8004918 <__ssvfiscanf_r+0x28c>
 800482a:	3301      	adds	r3, #1
 800482c:	6862      	ldr	r2, [r4, #4]
 800482e:	6023      	str	r3, [r4, #0]
 8004830:	3a01      	subs	r2, #1
 8004832:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8004834:	6062      	str	r2, [r4, #4]
 8004836:	3301      	adds	r3, #1
 8004838:	9345      	str	r3, [sp, #276]	; 0x114
 800483a:	e757      	b.n	80046ec <__ssvfiscanf_r+0x60>
 800483c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800483e:	4621      	mov	r1, r4
 8004840:	4630      	mov	r0, r6
 8004842:	4798      	blx	r3
 8004844:	2800      	cmp	r0, #0
 8004846:	d0ec      	beq.n	8004822 <__ssvfiscanf_r+0x196>
 8004848:	9844      	ldr	r0, [sp, #272]	; 0x110
 800484a:	2800      	cmp	r0, #0
 800484c:	d15a      	bne.n	8004904 <__ssvfiscanf_r+0x278>
 800484e:	f04f 30ff 	mov.w	r0, #4294967295
 8004852:	e05d      	b.n	8004910 <__ssvfiscanf_r+0x284>
 8004854:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004856:	f042 0220 	orr.w	r2, r2, #32
 800485a:	9241      	str	r2, [sp, #260]	; 0x104
 800485c:	e79b      	b.n	8004796 <__ssvfiscanf_r+0x10a>
 800485e:	2308      	movs	r3, #8
 8004860:	9342      	str	r3, [sp, #264]	; 0x108
 8004862:	2304      	movs	r3, #4
 8004864:	e7b3      	b.n	80047ce <__ssvfiscanf_r+0x142>
 8004866:	4629      	mov	r1, r5
 8004868:	4640      	mov	r0, r8
 800486a:	f000 f9c3 	bl	8004bf4 <__sccl>
 800486e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004870:	4605      	mov	r5, r0
 8004872:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004876:	9341      	str	r3, [sp, #260]	; 0x104
 8004878:	2301      	movs	r3, #1
 800487a:	e7a8      	b.n	80047ce <__ssvfiscanf_r+0x142>
 800487c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800487e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004882:	9341      	str	r3, [sp, #260]	; 0x104
 8004884:	2300      	movs	r3, #0
 8004886:	e7a2      	b.n	80047ce <__ssvfiscanf_r+0x142>
 8004888:	9841      	ldr	r0, [sp, #260]	; 0x104
 800488a:	06c3      	lsls	r3, r0, #27
 800488c:	f53f af2e 	bmi.w	80046ec <__ssvfiscanf_r+0x60>
 8004890:	9b00      	ldr	r3, [sp, #0]
 8004892:	07c0      	lsls	r0, r0, #31
 8004894:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004896:	f103 0104 	add.w	r1, r3, #4
 800489a:	9100      	str	r1, [sp, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	bf4c      	ite	mi
 80048a0:	801a      	strhmi	r2, [r3, #0]
 80048a2:	601a      	strpl	r2, [r3, #0]
 80048a4:	e722      	b.n	80046ec <__ssvfiscanf_r+0x60>
 80048a6:	2305      	movs	r3, #5
 80048a8:	e791      	b.n	80047ce <__ssvfiscanf_r+0x142>
 80048aa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80048ac:	4621      	mov	r1, r4
 80048ae:	4630      	mov	r0, r6
 80048b0:	4798      	blx	r3
 80048b2:	2800      	cmp	r0, #0
 80048b4:	d08f      	beq.n	80047d6 <__ssvfiscanf_r+0x14a>
 80048b6:	e7c7      	b.n	8004848 <__ssvfiscanf_r+0x1bc>
 80048b8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80048ba:	3201      	adds	r2, #1
 80048bc:	9245      	str	r2, [sp, #276]	; 0x114
 80048be:	6862      	ldr	r2, [r4, #4]
 80048c0:	3a01      	subs	r2, #1
 80048c2:	2a00      	cmp	r2, #0
 80048c4:	6062      	str	r2, [r4, #4]
 80048c6:	dd02      	ble.n	80048ce <__ssvfiscanf_r+0x242>
 80048c8:	3301      	adds	r3, #1
 80048ca:	6023      	str	r3, [r4, #0]
 80048cc:	e786      	b.n	80047dc <__ssvfiscanf_r+0x150>
 80048ce:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80048d0:	4621      	mov	r1, r4
 80048d2:	4630      	mov	r0, r6
 80048d4:	4798      	blx	r3
 80048d6:	2800      	cmp	r0, #0
 80048d8:	d080      	beq.n	80047dc <__ssvfiscanf_r+0x150>
 80048da:	e7b5      	b.n	8004848 <__ssvfiscanf_r+0x1bc>
 80048dc:	2b04      	cmp	r3, #4
 80048de:	dc06      	bgt.n	80048ee <__ssvfiscanf_r+0x262>
 80048e0:	466b      	mov	r3, sp
 80048e2:	4622      	mov	r2, r4
 80048e4:	a941      	add	r1, sp, #260	; 0x104
 80048e6:	4630      	mov	r0, r6
 80048e8:	f000 f87e 	bl	80049e8 <_scanf_i>
 80048ec:	e787      	b.n	80047fe <__ssvfiscanf_r+0x172>
 80048ee:	4b0e      	ldr	r3, [pc, #56]	; (8004928 <__ssvfiscanf_r+0x29c>)
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f43f aefb 	beq.w	80046ec <__ssvfiscanf_r+0x60>
 80048f6:	466b      	mov	r3, sp
 80048f8:	4622      	mov	r2, r4
 80048fa:	a941      	add	r1, sp, #260	; 0x104
 80048fc:	4630      	mov	r0, r6
 80048fe:	e000      	b.n	8004902 <__ssvfiscanf_r+0x276>
 8004900:	bf00      	nop
 8004902:	e77c      	b.n	80047fe <__ssvfiscanf_r+0x172>
 8004904:	89a3      	ldrh	r3, [r4, #12]
 8004906:	f013 0f40 	tst.w	r3, #64	; 0x40
 800490a:	bf18      	it	ne
 800490c:	f04f 30ff 	movne.w	r0, #4294967295
 8004910:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8004914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004918:	9844      	ldr	r0, [sp, #272]	; 0x110
 800491a:	e7f9      	b.n	8004910 <__ssvfiscanf_r+0x284>
 800491c:	080045d9 	.word	0x080045d9
 8004920:	08004653 	.word	0x08004653
 8004924:	08005560 	.word	0x08005560
 8004928:	00000000 	.word	0x00000000

0800492c <_scanf_chars>:
 800492c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004930:	4615      	mov	r5, r2
 8004932:	688a      	ldr	r2, [r1, #8]
 8004934:	4680      	mov	r8, r0
 8004936:	460c      	mov	r4, r1
 8004938:	b932      	cbnz	r2, 8004948 <_scanf_chars+0x1c>
 800493a:	698a      	ldr	r2, [r1, #24]
 800493c:	2a00      	cmp	r2, #0
 800493e:	bf14      	ite	ne
 8004940:	f04f 32ff 	movne.w	r2, #4294967295
 8004944:	2201      	moveq	r2, #1
 8004946:	608a      	str	r2, [r1, #8]
 8004948:	6822      	ldr	r2, [r4, #0]
 800494a:	2600      	movs	r6, #0
 800494c:	06d1      	lsls	r1, r2, #27
 800494e:	bf5f      	itttt	pl
 8004950:	681a      	ldrpl	r2, [r3, #0]
 8004952:	1d11      	addpl	r1, r2, #4
 8004954:	6019      	strpl	r1, [r3, #0]
 8004956:	6817      	ldrpl	r7, [r2, #0]
 8004958:	69a3      	ldr	r3, [r4, #24]
 800495a:	b1d3      	cbz	r3, 8004992 <_scanf_chars+0x66>
 800495c:	2b01      	cmp	r3, #1
 800495e:	d107      	bne.n	8004970 <_scanf_chars+0x44>
 8004960:	682b      	ldr	r3, [r5, #0]
 8004962:	6962      	ldr	r2, [r4, #20]
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	5cd3      	ldrb	r3, [r2, r3]
 8004968:	b99b      	cbnz	r3, 8004992 <_scanf_chars+0x66>
 800496a:	2e00      	cmp	r6, #0
 800496c:	d12c      	bne.n	80049c8 <_scanf_chars+0x9c>
 800496e:	e005      	b.n	800497c <_scanf_chars+0x50>
 8004970:	2b02      	cmp	r3, #2
 8004972:	d006      	beq.n	8004982 <_scanf_chars+0x56>
 8004974:	bb46      	cbnz	r6, 80049c8 <_scanf_chars+0x9c>
 8004976:	69a3      	ldr	r3, [r4, #24]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d125      	bne.n	80049c8 <_scanf_chars+0x9c>
 800497c:	2001      	movs	r0, #1
 800497e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004982:	f000 fae1 	bl	8004f48 <__locale_ctype_ptr>
 8004986:	682b      	ldr	r3, [r5, #0]
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	4418      	add	r0, r3
 800498c:	7843      	ldrb	r3, [r0, #1]
 800498e:	071b      	lsls	r3, r3, #28
 8004990:	d4f0      	bmi.n	8004974 <_scanf_chars+0x48>
 8004992:	6823      	ldr	r3, [r4, #0]
 8004994:	3601      	adds	r6, #1
 8004996:	06da      	lsls	r2, r3, #27
 8004998:	bf5f      	itttt	pl
 800499a:	682b      	ldrpl	r3, [r5, #0]
 800499c:	781b      	ldrbpl	r3, [r3, #0]
 800499e:	703b      	strbpl	r3, [r7, #0]
 80049a0:	3701      	addpl	r7, #1
 80049a2:	682a      	ldr	r2, [r5, #0]
 80049a4:	686b      	ldr	r3, [r5, #4]
 80049a6:	3201      	adds	r2, #1
 80049a8:	3b01      	subs	r3, #1
 80049aa:	602a      	str	r2, [r5, #0]
 80049ac:	68a2      	ldr	r2, [r4, #8]
 80049ae:	606b      	str	r3, [r5, #4]
 80049b0:	3a01      	subs	r2, #1
 80049b2:	60a2      	str	r2, [r4, #8]
 80049b4:	b142      	cbz	r2, 80049c8 <_scanf_chars+0x9c>
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	dcce      	bgt.n	8004958 <_scanf_chars+0x2c>
 80049ba:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80049be:	4629      	mov	r1, r5
 80049c0:	4640      	mov	r0, r8
 80049c2:	4798      	blx	r3
 80049c4:	2800      	cmp	r0, #0
 80049c6:	d0c7      	beq.n	8004958 <_scanf_chars+0x2c>
 80049c8:	6823      	ldr	r3, [r4, #0]
 80049ca:	f013 0310 	ands.w	r3, r3, #16
 80049ce:	d105      	bne.n	80049dc <_scanf_chars+0xb0>
 80049d0:	68e2      	ldr	r2, [r4, #12]
 80049d2:	3201      	adds	r2, #1
 80049d4:	60e2      	str	r2, [r4, #12]
 80049d6:	69a2      	ldr	r2, [r4, #24]
 80049d8:	b102      	cbz	r2, 80049dc <_scanf_chars+0xb0>
 80049da:	703b      	strb	r3, [r7, #0]
 80049dc:	6923      	ldr	r3, [r4, #16]
 80049de:	2000      	movs	r0, #0
 80049e0:	441e      	add	r6, r3
 80049e2:	6126      	str	r6, [r4, #16]
 80049e4:	e7cb      	b.n	800497e <_scanf_chars+0x52>
	...

080049e8 <_scanf_i>:
 80049e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049ec:	469a      	mov	sl, r3
 80049ee:	b087      	sub	sp, #28
 80049f0:	4b73      	ldr	r3, [pc, #460]	; (8004bc0 <_scanf_i+0x1d8>)
 80049f2:	460c      	mov	r4, r1
 80049f4:	4683      	mov	fp, r0
 80049f6:	4616      	mov	r6, r2
 80049f8:	68a7      	ldr	r7, [r4, #8]
 80049fa:	f104 091c 	add.w	r9, r4, #28
 80049fe:	f04f 0800 	mov.w	r8, #0
 8004a02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004a06:	ab03      	add	r3, sp, #12
 8004a08:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004a0c:	4b6d      	ldr	r3, [pc, #436]	; (8004bc4 <_scanf_i+0x1dc>)
 8004a0e:	69a1      	ldr	r1, [r4, #24]
 8004a10:	4a6d      	ldr	r2, [pc, #436]	; (8004bc8 <_scanf_i+0x1e0>)
 8004a12:	2903      	cmp	r1, #3
 8004a14:	bf08      	it	eq
 8004a16:	461a      	moveq	r2, r3
 8004a18:	1e7b      	subs	r3, r7, #1
 8004a1a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8004a1e:	9200      	str	r2, [sp, #0]
 8004a20:	bf85      	ittet	hi
 8004a22:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004a26:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004a2a:	2700      	movls	r7, #0
 8004a2c:	60a3      	strhi	r3, [r4, #8]
 8004a2e:	bf88      	it	hi
 8004a30:	197f      	addhi	r7, r7, r5
 8004a32:	6823      	ldr	r3, [r4, #0]
 8004a34:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8004a38:	6023      	str	r3, [r4, #0]
 8004a3a:	464b      	mov	r3, r9
 8004a3c:	9301      	str	r3, [sp, #4]
 8004a3e:	ab03      	add	r3, sp, #12
 8004a40:	6831      	ldr	r1, [r6, #0]
 8004a42:	2202      	movs	r2, #2
 8004a44:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004a48:	7809      	ldrb	r1, [r1, #0]
 8004a4a:	f000 fa9d 	bl	8004f88 <memchr>
 8004a4e:	9b01      	ldr	r3, [sp, #4]
 8004a50:	b330      	cbz	r0, 8004aa0 <_scanf_i+0xb8>
 8004a52:	f1b8 0f01 	cmp.w	r8, #1
 8004a56:	d15a      	bne.n	8004b0e <_scanf_i+0x126>
 8004a58:	6862      	ldr	r2, [r4, #4]
 8004a5a:	b92a      	cbnz	r2, 8004a68 <_scanf_i+0x80>
 8004a5c:	6822      	ldr	r2, [r4, #0]
 8004a5e:	2108      	movs	r1, #8
 8004a60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a64:	6061      	str	r1, [r4, #4]
 8004a66:	6022      	str	r2, [r4, #0]
 8004a68:	6822      	ldr	r2, [r4, #0]
 8004a6a:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8004a6e:	6022      	str	r2, [r4, #0]
 8004a70:	68a2      	ldr	r2, [r4, #8]
 8004a72:	1e51      	subs	r1, r2, #1
 8004a74:	60a1      	str	r1, [r4, #8]
 8004a76:	b19a      	cbz	r2, 8004aa0 <_scanf_i+0xb8>
 8004a78:	6832      	ldr	r2, [r6, #0]
 8004a7a:	1c5d      	adds	r5, r3, #1
 8004a7c:	1c51      	adds	r1, r2, #1
 8004a7e:	6031      	str	r1, [r6, #0]
 8004a80:	7812      	ldrb	r2, [r2, #0]
 8004a82:	701a      	strb	r2, [r3, #0]
 8004a84:	6873      	ldr	r3, [r6, #4]
 8004a86:	3b01      	subs	r3, #1
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	6073      	str	r3, [r6, #4]
 8004a8c:	dc07      	bgt.n	8004a9e <_scanf_i+0xb6>
 8004a8e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004a92:	4631      	mov	r1, r6
 8004a94:	4658      	mov	r0, fp
 8004a96:	4798      	blx	r3
 8004a98:	2800      	cmp	r0, #0
 8004a9a:	f040 8087 	bne.w	8004bac <_scanf_i+0x1c4>
 8004a9e:	462b      	mov	r3, r5
 8004aa0:	f108 0801 	add.w	r8, r8, #1
 8004aa4:	f1b8 0f03 	cmp.w	r8, #3
 8004aa8:	d1c8      	bne.n	8004a3c <_scanf_i+0x54>
 8004aaa:	6862      	ldr	r2, [r4, #4]
 8004aac:	b90a      	cbnz	r2, 8004ab2 <_scanf_i+0xca>
 8004aae:	220a      	movs	r2, #10
 8004ab0:	6062      	str	r2, [r4, #4]
 8004ab2:	6862      	ldr	r2, [r4, #4]
 8004ab4:	f04f 0800 	mov.w	r8, #0
 8004ab8:	4944      	ldr	r1, [pc, #272]	; (8004bcc <_scanf_i+0x1e4>)
 8004aba:	6960      	ldr	r0, [r4, #20]
 8004abc:	1a89      	subs	r1, r1, r2
 8004abe:	9301      	str	r3, [sp, #4]
 8004ac0:	f000 f898 	bl	8004bf4 <__sccl>
 8004ac4:	9b01      	ldr	r3, [sp, #4]
 8004ac6:	461d      	mov	r5, r3
 8004ac8:	68a3      	ldr	r3, [r4, #8]
 8004aca:	6822      	ldr	r2, [r4, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d03b      	beq.n	8004b48 <_scanf_i+0x160>
 8004ad0:	6831      	ldr	r1, [r6, #0]
 8004ad2:	6960      	ldr	r0, [r4, #20]
 8004ad4:	f891 c000 	ldrb.w	ip, [r1]
 8004ad8:	f810 000c 	ldrb.w	r0, [r0, ip]
 8004adc:	2800      	cmp	r0, #0
 8004ade:	d033      	beq.n	8004b48 <_scanf_i+0x160>
 8004ae0:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8004ae4:	d121      	bne.n	8004b2a <_scanf_i+0x142>
 8004ae6:	0510      	lsls	r0, r2, #20
 8004ae8:	d51f      	bpl.n	8004b2a <_scanf_i+0x142>
 8004aea:	f108 0801 	add.w	r8, r8, #1
 8004aee:	b117      	cbz	r7, 8004af6 <_scanf_i+0x10e>
 8004af0:	3301      	adds	r3, #1
 8004af2:	3f01      	subs	r7, #1
 8004af4:	60a3      	str	r3, [r4, #8]
 8004af6:	6873      	ldr	r3, [r6, #4]
 8004af8:	3b01      	subs	r3, #1
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	6073      	str	r3, [r6, #4]
 8004afe:	dd1c      	ble.n	8004b3a <_scanf_i+0x152>
 8004b00:	6833      	ldr	r3, [r6, #0]
 8004b02:	3301      	adds	r3, #1
 8004b04:	6033      	str	r3, [r6, #0]
 8004b06:	68a3      	ldr	r3, [r4, #8]
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	60a3      	str	r3, [r4, #8]
 8004b0c:	e7dc      	b.n	8004ac8 <_scanf_i+0xe0>
 8004b0e:	f1b8 0f02 	cmp.w	r8, #2
 8004b12:	d1ad      	bne.n	8004a70 <_scanf_i+0x88>
 8004b14:	6822      	ldr	r2, [r4, #0]
 8004b16:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8004b1a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004b1e:	d1bf      	bne.n	8004aa0 <_scanf_i+0xb8>
 8004b20:	2110      	movs	r1, #16
 8004b22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b26:	6061      	str	r1, [r4, #4]
 8004b28:	e7a1      	b.n	8004a6e <_scanf_i+0x86>
 8004b2a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8004b2e:	3501      	adds	r5, #1
 8004b30:	6022      	str	r2, [r4, #0]
 8004b32:	780b      	ldrb	r3, [r1, #0]
 8004b34:	f805 3c01 	strb.w	r3, [r5, #-1]
 8004b38:	e7dd      	b.n	8004af6 <_scanf_i+0x10e>
 8004b3a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004b3e:	4631      	mov	r1, r6
 8004b40:	4658      	mov	r0, fp
 8004b42:	4798      	blx	r3
 8004b44:	2800      	cmp	r0, #0
 8004b46:	d0de      	beq.n	8004b06 <_scanf_i+0x11e>
 8004b48:	6823      	ldr	r3, [r4, #0]
 8004b4a:	05d9      	lsls	r1, r3, #23
 8004b4c:	d50c      	bpl.n	8004b68 <_scanf_i+0x180>
 8004b4e:	454d      	cmp	r5, r9
 8004b50:	d908      	bls.n	8004b64 <_scanf_i+0x17c>
 8004b52:	1e6f      	subs	r7, r5, #1
 8004b54:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004b58:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004b5c:	4632      	mov	r2, r6
 8004b5e:	463d      	mov	r5, r7
 8004b60:	4658      	mov	r0, fp
 8004b62:	4798      	blx	r3
 8004b64:	454d      	cmp	r5, r9
 8004b66:	d029      	beq.n	8004bbc <_scanf_i+0x1d4>
 8004b68:	6822      	ldr	r2, [r4, #0]
 8004b6a:	f012 0210 	ands.w	r2, r2, #16
 8004b6e:	d113      	bne.n	8004b98 <_scanf_i+0x1b0>
 8004b70:	702a      	strb	r2, [r5, #0]
 8004b72:	4649      	mov	r1, r9
 8004b74:	6863      	ldr	r3, [r4, #4]
 8004b76:	4658      	mov	r0, fp
 8004b78:	9e00      	ldr	r6, [sp, #0]
 8004b7a:	47b0      	blx	r6
 8004b7c:	f8da 3000 	ldr.w	r3, [sl]
 8004b80:	6821      	ldr	r1, [r4, #0]
 8004b82:	1d1a      	adds	r2, r3, #4
 8004b84:	f011 0f20 	tst.w	r1, #32
 8004b88:	f8ca 2000 	str.w	r2, [sl]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	d010      	beq.n	8004bb2 <_scanf_i+0x1ca>
 8004b90:	6018      	str	r0, [r3, #0]
 8004b92:	68e3      	ldr	r3, [r4, #12]
 8004b94:	3301      	adds	r3, #1
 8004b96:	60e3      	str	r3, [r4, #12]
 8004b98:	eba5 0509 	sub.w	r5, r5, r9
 8004b9c:	2000      	movs	r0, #0
 8004b9e:	44a8      	add	r8, r5
 8004ba0:	6925      	ldr	r5, [r4, #16]
 8004ba2:	4445      	add	r5, r8
 8004ba4:	6125      	str	r5, [r4, #16]
 8004ba6:	b007      	add	sp, #28
 8004ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bac:	f04f 0800 	mov.w	r8, #0
 8004bb0:	e7ca      	b.n	8004b48 <_scanf_i+0x160>
 8004bb2:	07ca      	lsls	r2, r1, #31
 8004bb4:	bf4c      	ite	mi
 8004bb6:	8018      	strhmi	r0, [r3, #0]
 8004bb8:	6018      	strpl	r0, [r3, #0]
 8004bba:	e7ea      	b.n	8004b92 <_scanf_i+0x1aa>
 8004bbc:	2001      	movs	r0, #1
 8004bbe:	e7f2      	b.n	8004ba6 <_scanf_i+0x1be>
 8004bc0:	08005080 	.word	0x08005080
 8004bc4:	08004d51 	.word	0x08004d51
 8004bc8:	08004e69 	.word	0x08004e69
 8004bcc:	08005574 	.word	0x08005574

08004bd0 <_read_r>:
 8004bd0:	b538      	push	{r3, r4, r5, lr}
 8004bd2:	4605      	mov	r5, r0
 8004bd4:	4c06      	ldr	r4, [pc, #24]	; (8004bf0 <_read_r+0x20>)
 8004bd6:	4608      	mov	r0, r1
 8004bd8:	4611      	mov	r1, r2
 8004bda:	2200      	movs	r2, #0
 8004bdc:	6022      	str	r2, [r4, #0]
 8004bde:	461a      	mov	r2, r3
 8004be0:	f7fb ffa0 	bl	8000b24 <_read>
 8004be4:	1c43      	adds	r3, r0, #1
 8004be6:	d102      	bne.n	8004bee <_read_r+0x1e>
 8004be8:	6823      	ldr	r3, [r4, #0]
 8004bea:	b103      	cbz	r3, 8004bee <_read_r+0x1e>
 8004bec:	602b      	str	r3, [r5, #0]
 8004bee:	bd38      	pop	{r3, r4, r5, pc}
 8004bf0:	20001a24 	.word	0x20001a24

08004bf4 <__sccl>:
 8004bf4:	b570      	push	{r4, r5, r6, lr}
 8004bf6:	780b      	ldrb	r3, [r1, #0]
 8004bf8:	1e44      	subs	r4, r0, #1
 8004bfa:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8004bfe:	2b5e      	cmp	r3, #94	; 0x5e
 8004c00:	bf13      	iteet	ne
 8004c02:	1c4a      	addne	r2, r1, #1
 8004c04:	1c8a      	addeq	r2, r1, #2
 8004c06:	784b      	ldrbeq	r3, [r1, #1]
 8004c08:	2100      	movne	r1, #0
 8004c0a:	bf08      	it	eq
 8004c0c:	2101      	moveq	r1, #1
 8004c0e:	f804 1f01 	strb.w	r1, [r4, #1]!
 8004c12:	42ac      	cmp	r4, r5
 8004c14:	d1fb      	bne.n	8004c0e <__sccl+0x1a>
 8004c16:	b913      	cbnz	r3, 8004c1e <__sccl+0x2a>
 8004c18:	3a01      	subs	r2, #1
 8004c1a:	4610      	mov	r0, r2
 8004c1c:	bd70      	pop	{r4, r5, r6, pc}
 8004c1e:	f081 0401 	eor.w	r4, r1, #1
 8004c22:	1c51      	adds	r1, r2, #1
 8004c24:	54c4      	strb	r4, [r0, r3]
 8004c26:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8004c2a:	1e4e      	subs	r6, r1, #1
 8004c2c:	460a      	mov	r2, r1
 8004c2e:	2d2d      	cmp	r5, #45	; 0x2d
 8004c30:	d006      	beq.n	8004c40 <__sccl+0x4c>
 8004c32:	2d5d      	cmp	r5, #93	; 0x5d
 8004c34:	d0f1      	beq.n	8004c1a <__sccl+0x26>
 8004c36:	b90d      	cbnz	r5, 8004c3c <__sccl+0x48>
 8004c38:	4632      	mov	r2, r6
 8004c3a:	e7ee      	b.n	8004c1a <__sccl+0x26>
 8004c3c:	462b      	mov	r3, r5
 8004c3e:	e7f0      	b.n	8004c22 <__sccl+0x2e>
 8004c40:	780e      	ldrb	r6, [r1, #0]
 8004c42:	2e5d      	cmp	r6, #93	; 0x5d
 8004c44:	d0fa      	beq.n	8004c3c <__sccl+0x48>
 8004c46:	42b3      	cmp	r3, r6
 8004c48:	dcf8      	bgt.n	8004c3c <__sccl+0x48>
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	429e      	cmp	r6, r3
 8004c4e:	54c4      	strb	r4, [r0, r3]
 8004c50:	dcfb      	bgt.n	8004c4a <__sccl+0x56>
 8004c52:	3102      	adds	r1, #2
 8004c54:	e7e7      	b.n	8004c26 <__sccl+0x32>

08004c56 <_strtol_l.isra.0>:
 8004c56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c5a:	4680      	mov	r8, r0
 8004c5c:	4689      	mov	r9, r1
 8004c5e:	4692      	mov	sl, r2
 8004c60:	461e      	mov	r6, r3
 8004c62:	460f      	mov	r7, r1
 8004c64:	463d      	mov	r5, r7
 8004c66:	9808      	ldr	r0, [sp, #32]
 8004c68:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004c6c:	f000 f968 	bl	8004f40 <__locale_ctype_ptr_l>
 8004c70:	4420      	add	r0, r4
 8004c72:	7843      	ldrb	r3, [r0, #1]
 8004c74:	f013 0308 	ands.w	r3, r3, #8
 8004c78:	d133      	bne.n	8004ce2 <_strtol_l.isra.0+0x8c>
 8004c7a:	2c2d      	cmp	r4, #45	; 0x2d
 8004c7c:	d133      	bne.n	8004ce6 <_strtol_l.isra.0+0x90>
 8004c7e:	1cbd      	adds	r5, r7, #2
 8004c80:	787c      	ldrb	r4, [r7, #1]
 8004c82:	2201      	movs	r2, #1
 8004c84:	2e00      	cmp	r6, #0
 8004c86:	d05e      	beq.n	8004d46 <_strtol_l.isra.0+0xf0>
 8004c88:	2e10      	cmp	r6, #16
 8004c8a:	d109      	bne.n	8004ca0 <_strtol_l.isra.0+0x4a>
 8004c8c:	2c30      	cmp	r4, #48	; 0x30
 8004c8e:	d107      	bne.n	8004ca0 <_strtol_l.isra.0+0x4a>
 8004c90:	782b      	ldrb	r3, [r5, #0]
 8004c92:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004c96:	2b58      	cmp	r3, #88	; 0x58
 8004c98:	d150      	bne.n	8004d3c <_strtol_l.isra.0+0xe6>
 8004c9a:	786c      	ldrb	r4, [r5, #1]
 8004c9c:	2610      	movs	r6, #16
 8004c9e:	3502      	adds	r5, #2
 8004ca0:	2a00      	cmp	r2, #0
 8004ca2:	f04f 0700 	mov.w	r7, #0
 8004ca6:	bf14      	ite	ne
 8004ca8:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8004cac:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8004cb0:	4638      	mov	r0, r7
 8004cb2:	fbb1 fcf6 	udiv	ip, r1, r6
 8004cb6:	fb06 1e1c 	mls	lr, r6, ip, r1
 8004cba:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8004cbe:	2b09      	cmp	r3, #9
 8004cc0:	d817      	bhi.n	8004cf2 <_strtol_l.isra.0+0x9c>
 8004cc2:	461c      	mov	r4, r3
 8004cc4:	42a6      	cmp	r6, r4
 8004cc6:	dd23      	ble.n	8004d10 <_strtol_l.isra.0+0xba>
 8004cc8:	1c7b      	adds	r3, r7, #1
 8004cca:	d007      	beq.n	8004cdc <_strtol_l.isra.0+0x86>
 8004ccc:	4584      	cmp	ip, r0
 8004cce:	d31c      	bcc.n	8004d0a <_strtol_l.isra.0+0xb4>
 8004cd0:	d101      	bne.n	8004cd6 <_strtol_l.isra.0+0x80>
 8004cd2:	45a6      	cmp	lr, r4
 8004cd4:	db19      	blt.n	8004d0a <_strtol_l.isra.0+0xb4>
 8004cd6:	fb00 4006 	mla	r0, r0, r6, r4
 8004cda:	2701      	movs	r7, #1
 8004cdc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004ce0:	e7eb      	b.n	8004cba <_strtol_l.isra.0+0x64>
 8004ce2:	462f      	mov	r7, r5
 8004ce4:	e7be      	b.n	8004c64 <_strtol_l.isra.0+0xe>
 8004ce6:	2c2b      	cmp	r4, #43	; 0x2b
 8004ce8:	461a      	mov	r2, r3
 8004cea:	bf04      	itt	eq
 8004cec:	1cbd      	addeq	r5, r7, #2
 8004cee:	787c      	ldrbeq	r4, [r7, #1]
 8004cf0:	e7c8      	b.n	8004c84 <_strtol_l.isra.0+0x2e>
 8004cf2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8004cf6:	2b19      	cmp	r3, #25
 8004cf8:	d801      	bhi.n	8004cfe <_strtol_l.isra.0+0xa8>
 8004cfa:	3c37      	subs	r4, #55	; 0x37
 8004cfc:	e7e2      	b.n	8004cc4 <_strtol_l.isra.0+0x6e>
 8004cfe:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8004d02:	2b19      	cmp	r3, #25
 8004d04:	d804      	bhi.n	8004d10 <_strtol_l.isra.0+0xba>
 8004d06:	3c57      	subs	r4, #87	; 0x57
 8004d08:	e7dc      	b.n	8004cc4 <_strtol_l.isra.0+0x6e>
 8004d0a:	f04f 37ff 	mov.w	r7, #4294967295
 8004d0e:	e7e5      	b.n	8004cdc <_strtol_l.isra.0+0x86>
 8004d10:	1c7b      	adds	r3, r7, #1
 8004d12:	d108      	bne.n	8004d26 <_strtol_l.isra.0+0xd0>
 8004d14:	2322      	movs	r3, #34	; 0x22
 8004d16:	4608      	mov	r0, r1
 8004d18:	f8c8 3000 	str.w	r3, [r8]
 8004d1c:	f1ba 0f00 	cmp.w	sl, #0
 8004d20:	d107      	bne.n	8004d32 <_strtol_l.isra.0+0xdc>
 8004d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d26:	b102      	cbz	r2, 8004d2a <_strtol_l.isra.0+0xd4>
 8004d28:	4240      	negs	r0, r0
 8004d2a:	f1ba 0f00 	cmp.w	sl, #0
 8004d2e:	d0f8      	beq.n	8004d22 <_strtol_l.isra.0+0xcc>
 8004d30:	b10f      	cbz	r7, 8004d36 <_strtol_l.isra.0+0xe0>
 8004d32:	f105 39ff 	add.w	r9, r5, #4294967295
 8004d36:	f8ca 9000 	str.w	r9, [sl]
 8004d3a:	e7f2      	b.n	8004d22 <_strtol_l.isra.0+0xcc>
 8004d3c:	2430      	movs	r4, #48	; 0x30
 8004d3e:	2e00      	cmp	r6, #0
 8004d40:	d1ae      	bne.n	8004ca0 <_strtol_l.isra.0+0x4a>
 8004d42:	2608      	movs	r6, #8
 8004d44:	e7ac      	b.n	8004ca0 <_strtol_l.isra.0+0x4a>
 8004d46:	2c30      	cmp	r4, #48	; 0x30
 8004d48:	d0a2      	beq.n	8004c90 <_strtol_l.isra.0+0x3a>
 8004d4a:	260a      	movs	r6, #10
 8004d4c:	e7a8      	b.n	8004ca0 <_strtol_l.isra.0+0x4a>
	...

08004d50 <_strtol_r>:
 8004d50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d52:	4c06      	ldr	r4, [pc, #24]	; (8004d6c <_strtol_r+0x1c>)
 8004d54:	4d06      	ldr	r5, [pc, #24]	; (8004d70 <_strtol_r+0x20>)
 8004d56:	6824      	ldr	r4, [r4, #0]
 8004d58:	6a24      	ldr	r4, [r4, #32]
 8004d5a:	2c00      	cmp	r4, #0
 8004d5c:	bf08      	it	eq
 8004d5e:	462c      	moveq	r4, r5
 8004d60:	9400      	str	r4, [sp, #0]
 8004d62:	f7ff ff78 	bl	8004c56 <_strtol_l.isra.0>
 8004d66:	b003      	add	sp, #12
 8004d68:	bd30      	pop	{r4, r5, pc}
 8004d6a:	bf00      	nop
 8004d6c:	2000000c 	.word	0x2000000c
 8004d70:	20000070 	.word	0x20000070

08004d74 <_strtoul_l.isra.0>:
 8004d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d78:	4680      	mov	r8, r0
 8004d7a:	4689      	mov	r9, r1
 8004d7c:	4692      	mov	sl, r2
 8004d7e:	461e      	mov	r6, r3
 8004d80:	460f      	mov	r7, r1
 8004d82:	463d      	mov	r5, r7
 8004d84:	9808      	ldr	r0, [sp, #32]
 8004d86:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004d8a:	f000 f8d9 	bl	8004f40 <__locale_ctype_ptr_l>
 8004d8e:	4420      	add	r0, r4
 8004d90:	7843      	ldrb	r3, [r0, #1]
 8004d92:	f013 0308 	ands.w	r3, r3, #8
 8004d96:	d130      	bne.n	8004dfa <_strtoul_l.isra.0+0x86>
 8004d98:	2c2d      	cmp	r4, #45	; 0x2d
 8004d9a:	d130      	bne.n	8004dfe <_strtoul_l.isra.0+0x8a>
 8004d9c:	1cbd      	adds	r5, r7, #2
 8004d9e:	787c      	ldrb	r4, [r7, #1]
 8004da0:	2101      	movs	r1, #1
 8004da2:	2e00      	cmp	r6, #0
 8004da4:	d05c      	beq.n	8004e60 <_strtoul_l.isra.0+0xec>
 8004da6:	2e10      	cmp	r6, #16
 8004da8:	d109      	bne.n	8004dbe <_strtoul_l.isra.0+0x4a>
 8004daa:	2c30      	cmp	r4, #48	; 0x30
 8004dac:	d107      	bne.n	8004dbe <_strtoul_l.isra.0+0x4a>
 8004dae:	782b      	ldrb	r3, [r5, #0]
 8004db0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004db4:	2b58      	cmp	r3, #88	; 0x58
 8004db6:	d14e      	bne.n	8004e56 <_strtoul_l.isra.0+0xe2>
 8004db8:	786c      	ldrb	r4, [r5, #1]
 8004dba:	2610      	movs	r6, #16
 8004dbc:	3502      	adds	r5, #2
 8004dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	fbb2 f2f6 	udiv	r2, r2, r6
 8004dc8:	fb06 fc02 	mul.w	ip, r6, r2
 8004dcc:	4618      	mov	r0, r3
 8004dce:	ea6f 0c0c 	mvn.w	ip, ip
 8004dd2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8004dd6:	2f09      	cmp	r7, #9
 8004dd8:	d817      	bhi.n	8004e0a <_strtoul_l.isra.0+0x96>
 8004dda:	463c      	mov	r4, r7
 8004ddc:	42a6      	cmp	r6, r4
 8004dde:	dd23      	ble.n	8004e28 <_strtoul_l.isra.0+0xb4>
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	db1e      	blt.n	8004e22 <_strtoul_l.isra.0+0xae>
 8004de4:	4282      	cmp	r2, r0
 8004de6:	d31c      	bcc.n	8004e22 <_strtoul_l.isra.0+0xae>
 8004de8:	d101      	bne.n	8004dee <_strtoul_l.isra.0+0x7a>
 8004dea:	45a4      	cmp	ip, r4
 8004dec:	db19      	blt.n	8004e22 <_strtoul_l.isra.0+0xae>
 8004dee:	fb00 4006 	mla	r0, r0, r6, r4
 8004df2:	2301      	movs	r3, #1
 8004df4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004df8:	e7eb      	b.n	8004dd2 <_strtoul_l.isra.0+0x5e>
 8004dfa:	462f      	mov	r7, r5
 8004dfc:	e7c1      	b.n	8004d82 <_strtoul_l.isra.0+0xe>
 8004dfe:	2c2b      	cmp	r4, #43	; 0x2b
 8004e00:	4619      	mov	r1, r3
 8004e02:	bf04      	itt	eq
 8004e04:	1cbd      	addeq	r5, r7, #2
 8004e06:	787c      	ldrbeq	r4, [r7, #1]
 8004e08:	e7cb      	b.n	8004da2 <_strtoul_l.isra.0+0x2e>
 8004e0a:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8004e0e:	2f19      	cmp	r7, #25
 8004e10:	d801      	bhi.n	8004e16 <_strtoul_l.isra.0+0xa2>
 8004e12:	3c37      	subs	r4, #55	; 0x37
 8004e14:	e7e2      	b.n	8004ddc <_strtoul_l.isra.0+0x68>
 8004e16:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8004e1a:	2f19      	cmp	r7, #25
 8004e1c:	d804      	bhi.n	8004e28 <_strtoul_l.isra.0+0xb4>
 8004e1e:	3c57      	subs	r4, #87	; 0x57
 8004e20:	e7dc      	b.n	8004ddc <_strtoul_l.isra.0+0x68>
 8004e22:	f04f 33ff 	mov.w	r3, #4294967295
 8004e26:	e7e5      	b.n	8004df4 <_strtoul_l.isra.0+0x80>
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	da09      	bge.n	8004e40 <_strtoul_l.isra.0+0xcc>
 8004e2c:	2322      	movs	r3, #34	; 0x22
 8004e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e32:	f8c8 3000 	str.w	r3, [r8]
 8004e36:	f1ba 0f00 	cmp.w	sl, #0
 8004e3a:	d107      	bne.n	8004e4c <_strtoul_l.isra.0+0xd8>
 8004e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e40:	b101      	cbz	r1, 8004e44 <_strtoul_l.isra.0+0xd0>
 8004e42:	4240      	negs	r0, r0
 8004e44:	f1ba 0f00 	cmp.w	sl, #0
 8004e48:	d0f8      	beq.n	8004e3c <_strtoul_l.isra.0+0xc8>
 8004e4a:	b10b      	cbz	r3, 8004e50 <_strtoul_l.isra.0+0xdc>
 8004e4c:	f105 39ff 	add.w	r9, r5, #4294967295
 8004e50:	f8ca 9000 	str.w	r9, [sl]
 8004e54:	e7f2      	b.n	8004e3c <_strtoul_l.isra.0+0xc8>
 8004e56:	2430      	movs	r4, #48	; 0x30
 8004e58:	2e00      	cmp	r6, #0
 8004e5a:	d1b0      	bne.n	8004dbe <_strtoul_l.isra.0+0x4a>
 8004e5c:	2608      	movs	r6, #8
 8004e5e:	e7ae      	b.n	8004dbe <_strtoul_l.isra.0+0x4a>
 8004e60:	2c30      	cmp	r4, #48	; 0x30
 8004e62:	d0a4      	beq.n	8004dae <_strtoul_l.isra.0+0x3a>
 8004e64:	260a      	movs	r6, #10
 8004e66:	e7aa      	b.n	8004dbe <_strtoul_l.isra.0+0x4a>

08004e68 <_strtoul_r>:
 8004e68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e6a:	4c06      	ldr	r4, [pc, #24]	; (8004e84 <_strtoul_r+0x1c>)
 8004e6c:	4d06      	ldr	r5, [pc, #24]	; (8004e88 <_strtoul_r+0x20>)
 8004e6e:	6824      	ldr	r4, [r4, #0]
 8004e70:	6a24      	ldr	r4, [r4, #32]
 8004e72:	2c00      	cmp	r4, #0
 8004e74:	bf08      	it	eq
 8004e76:	462c      	moveq	r4, r5
 8004e78:	9400      	str	r4, [sp, #0]
 8004e7a:	f7ff ff7b 	bl	8004d74 <_strtoul_l.isra.0>
 8004e7e:	b003      	add	sp, #12
 8004e80:	bd30      	pop	{r4, r5, pc}
 8004e82:	bf00      	nop
 8004e84:	2000000c 	.word	0x2000000c
 8004e88:	20000070 	.word	0x20000070

08004e8c <__submore>:
 8004e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e90:	460c      	mov	r4, r1
 8004e92:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004e94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e98:	4299      	cmp	r1, r3
 8004e9a:	d11a      	bne.n	8004ed2 <__submore+0x46>
 8004e9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ea0:	f7fe ffe6 	bl	8003e70 <_malloc_r>
 8004ea4:	b918      	cbnz	r0, 8004eae <__submore+0x22>
 8004ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8004eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004eae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004eb2:	6360      	str	r0, [r4, #52]	; 0x34
 8004eb4:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8004eb8:	63a3      	str	r3, [r4, #56]	; 0x38
 8004eba:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8004ebe:	7083      	strb	r3, [r0, #2]
 8004ec0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004ec4:	7043      	strb	r3, [r0, #1]
 8004ec6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004eca:	7003      	strb	r3, [r0, #0]
 8004ecc:	6020      	str	r0, [r4, #0]
 8004ece:	2000      	movs	r0, #0
 8004ed0:	e7eb      	b.n	8004eaa <__submore+0x1e>
 8004ed2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004ed4:	0077      	lsls	r7, r6, #1
 8004ed6:	463a      	mov	r2, r7
 8004ed8:	f000 f86f 	bl	8004fba <_realloc_r>
 8004edc:	4605      	mov	r5, r0
 8004ede:	2800      	cmp	r0, #0
 8004ee0:	d0e1      	beq.n	8004ea6 <__submore+0x1a>
 8004ee2:	eb00 0806 	add.w	r8, r0, r6
 8004ee6:	4601      	mov	r1, r0
 8004ee8:	4632      	mov	r2, r6
 8004eea:	4640      	mov	r0, r8
 8004eec:	f000 f85a 	bl	8004fa4 <memcpy>
 8004ef0:	f8c4 8000 	str.w	r8, [r4]
 8004ef4:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8004ef8:	e7e9      	b.n	8004ece <__submore+0x42>
	...

08004efc <_fstat_r>:
 8004efc:	b538      	push	{r3, r4, r5, lr}
 8004efe:	2300      	movs	r3, #0
 8004f00:	4c06      	ldr	r4, [pc, #24]	; (8004f1c <_fstat_r+0x20>)
 8004f02:	4605      	mov	r5, r0
 8004f04:	4608      	mov	r0, r1
 8004f06:	4611      	mov	r1, r2
 8004f08:	6023      	str	r3, [r4, #0]
 8004f0a:	f7fb fe50 	bl	8000bae <_fstat>
 8004f0e:	1c43      	adds	r3, r0, #1
 8004f10:	d102      	bne.n	8004f18 <_fstat_r+0x1c>
 8004f12:	6823      	ldr	r3, [r4, #0]
 8004f14:	b103      	cbz	r3, 8004f18 <_fstat_r+0x1c>
 8004f16:	602b      	str	r3, [r5, #0]
 8004f18:	bd38      	pop	{r3, r4, r5, pc}
 8004f1a:	bf00      	nop
 8004f1c:	20001a24 	.word	0x20001a24

08004f20 <_isatty_r>:
 8004f20:	b538      	push	{r3, r4, r5, lr}
 8004f22:	2300      	movs	r3, #0
 8004f24:	4c05      	ldr	r4, [pc, #20]	; (8004f3c <_isatty_r+0x1c>)
 8004f26:	4605      	mov	r5, r0
 8004f28:	4608      	mov	r0, r1
 8004f2a:	6023      	str	r3, [r4, #0]
 8004f2c:	f7fb fe4f 	bl	8000bce <_isatty>
 8004f30:	1c43      	adds	r3, r0, #1
 8004f32:	d102      	bne.n	8004f3a <_isatty_r+0x1a>
 8004f34:	6823      	ldr	r3, [r4, #0]
 8004f36:	b103      	cbz	r3, 8004f3a <_isatty_r+0x1a>
 8004f38:	602b      	str	r3, [r5, #0]
 8004f3a:	bd38      	pop	{r3, r4, r5, pc}
 8004f3c:	20001a24 	.word	0x20001a24

08004f40 <__locale_ctype_ptr_l>:
 8004f40:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8004f44:	4770      	bx	lr
	...

08004f48 <__locale_ctype_ptr>:
 8004f48:	4b04      	ldr	r3, [pc, #16]	; (8004f5c <__locale_ctype_ptr+0x14>)
 8004f4a:	4a05      	ldr	r2, [pc, #20]	; (8004f60 <__locale_ctype_ptr+0x18>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	6a1b      	ldr	r3, [r3, #32]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	bf08      	it	eq
 8004f54:	4613      	moveq	r3, r2
 8004f56:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8004f5a:	4770      	bx	lr
 8004f5c:	2000000c 	.word	0x2000000c
 8004f60:	20000070 	.word	0x20000070

08004f64 <__ascii_mbtowc>:
 8004f64:	b082      	sub	sp, #8
 8004f66:	b901      	cbnz	r1, 8004f6a <__ascii_mbtowc+0x6>
 8004f68:	a901      	add	r1, sp, #4
 8004f6a:	b142      	cbz	r2, 8004f7e <__ascii_mbtowc+0x1a>
 8004f6c:	b14b      	cbz	r3, 8004f82 <__ascii_mbtowc+0x1e>
 8004f6e:	7813      	ldrb	r3, [r2, #0]
 8004f70:	600b      	str	r3, [r1, #0]
 8004f72:	7812      	ldrb	r2, [r2, #0]
 8004f74:	1c10      	adds	r0, r2, #0
 8004f76:	bf18      	it	ne
 8004f78:	2001      	movne	r0, #1
 8004f7a:	b002      	add	sp, #8
 8004f7c:	4770      	bx	lr
 8004f7e:	4610      	mov	r0, r2
 8004f80:	e7fb      	b.n	8004f7a <__ascii_mbtowc+0x16>
 8004f82:	f06f 0001 	mvn.w	r0, #1
 8004f86:	e7f8      	b.n	8004f7a <__ascii_mbtowc+0x16>

08004f88 <memchr>:
 8004f88:	b2c9      	uxtb	r1, r1
 8004f8a:	4402      	add	r2, r0
 8004f8c:	b510      	push	{r4, lr}
 8004f8e:	4290      	cmp	r0, r2
 8004f90:	4603      	mov	r3, r0
 8004f92:	d101      	bne.n	8004f98 <memchr+0x10>
 8004f94:	2300      	movs	r3, #0
 8004f96:	e003      	b.n	8004fa0 <memchr+0x18>
 8004f98:	781c      	ldrb	r4, [r3, #0]
 8004f9a:	3001      	adds	r0, #1
 8004f9c:	428c      	cmp	r4, r1
 8004f9e:	d1f6      	bne.n	8004f8e <memchr+0x6>
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	bd10      	pop	{r4, pc}

08004fa4 <memcpy>:
 8004fa4:	1e43      	subs	r3, r0, #1
 8004fa6:	440a      	add	r2, r1
 8004fa8:	b510      	push	{r4, lr}
 8004faa:	4291      	cmp	r1, r2
 8004fac:	d100      	bne.n	8004fb0 <memcpy+0xc>
 8004fae:	bd10      	pop	{r4, pc}
 8004fb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fb8:	e7f7      	b.n	8004faa <memcpy+0x6>

08004fba <_realloc_r>:
 8004fba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fbc:	4607      	mov	r7, r0
 8004fbe:	4614      	mov	r4, r2
 8004fc0:	460e      	mov	r6, r1
 8004fc2:	b921      	cbnz	r1, 8004fce <_realloc_r+0x14>
 8004fc4:	4611      	mov	r1, r2
 8004fc6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004fca:	f7fe bf51 	b.w	8003e70 <_malloc_r>
 8004fce:	b922      	cbnz	r2, 8004fda <_realloc_r+0x20>
 8004fd0:	4625      	mov	r5, r4
 8004fd2:	f7fe feff 	bl	8003dd4 <_free_r>
 8004fd6:	4628      	mov	r0, r5
 8004fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fda:	f000 f821 	bl	8005020 <_malloc_usable_size_r>
 8004fde:	42a0      	cmp	r0, r4
 8004fe0:	d20f      	bcs.n	8005002 <_realloc_r+0x48>
 8004fe2:	4621      	mov	r1, r4
 8004fe4:	4638      	mov	r0, r7
 8004fe6:	f7fe ff43 	bl	8003e70 <_malloc_r>
 8004fea:	4605      	mov	r5, r0
 8004fec:	2800      	cmp	r0, #0
 8004fee:	d0f2      	beq.n	8004fd6 <_realloc_r+0x1c>
 8004ff0:	4631      	mov	r1, r6
 8004ff2:	4622      	mov	r2, r4
 8004ff4:	f7ff ffd6 	bl	8004fa4 <memcpy>
 8004ff8:	4631      	mov	r1, r6
 8004ffa:	4638      	mov	r0, r7
 8004ffc:	f7fe feea 	bl	8003dd4 <_free_r>
 8005000:	e7e9      	b.n	8004fd6 <_realloc_r+0x1c>
 8005002:	4635      	mov	r5, r6
 8005004:	e7e7      	b.n	8004fd6 <_realloc_r+0x1c>

08005006 <__ascii_wctomb>:
 8005006:	b149      	cbz	r1, 800501c <__ascii_wctomb+0x16>
 8005008:	2aff      	cmp	r2, #255	; 0xff
 800500a:	bf8d      	iteet	hi
 800500c:	238a      	movhi	r3, #138	; 0x8a
 800500e:	700a      	strbls	r2, [r1, #0]
 8005010:	2001      	movls	r0, #1
 8005012:	6003      	strhi	r3, [r0, #0]
 8005014:	bf88      	it	hi
 8005016:	f04f 30ff 	movhi.w	r0, #4294967295
 800501a:	4770      	bx	lr
 800501c:	4608      	mov	r0, r1
 800501e:	4770      	bx	lr

08005020 <_malloc_usable_size_r>:
 8005020:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005024:	1f18      	subs	r0, r3, #4
 8005026:	2b00      	cmp	r3, #0
 8005028:	bfbc      	itt	lt
 800502a:	580b      	ldrlt	r3, [r1, r0]
 800502c:	18c0      	addlt	r0, r0, r3
 800502e:	4770      	bx	lr

08005030 <_init>:
 8005030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005032:	bf00      	nop
 8005034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005036:	bc08      	pop	{r3}
 8005038:	469e      	mov	lr, r3
 800503a:	4770      	bx	lr

0800503c <_fini>:
 800503c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800503e:	bf00      	nop
 8005040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005042:	bc08      	pop	{r3}
 8005044:	469e      	mov	lr, r3
 8005046:	4770      	bx	lr
